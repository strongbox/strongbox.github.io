{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Strongbox \u00b6 Strongbox is an OpenSource artifact repository manager written in Java. We aim to provide an easy and reliable platform, for hosting your (binary) artifacts, regardless of your repository layout. Features \u00b6 Directory browsing We have two types of directory browsing implemented: /browse - browsing via the user interface. /api/browse - API endpoint which returns either JSON or very lightweight HTML directory listing. Cron Tasks We have various cron tasks available to automate almost anything like rebuilding metadata, emptying trash, etc. Java implementation Groovy implementation Event handling Logging Log tailing View logs without downloading Configure log levels globally (and per package) Download logs over HTTP Repository types Hosted Proxy Group (including repository ordering, routing rules and nested group repositories) Layout providers Maven 2.x/3.x NPM NuGet v2 Raw PyPi (in progress) contributors, please, check here ) Composer ( contributors, please, check here ) Docker ( contributors, please, check here ) DEB ( contributors, please, check here ) Gems ( contributors, please, check here ) Yum ( contributors, please, check here ) Supported tools Ant and Ivy Choco Gradle Maven NPM Nuget with Mono Nuget in Visual Studio SBT Yarn Search providers Search providers offer a way to execute searches against different search engines. By default, searches are executed against OrientDB, unless a search provider has been specified. Click here for more details Artifact Query Language (AQL) to make searching easy and consistent between layouts OrientDB (default implementation for all repositories and layout formats) Maven Indexer Security HTTP Basic authentication JWT authentication LDAP Custom authentication provider, based on users that stored in the second-level cache backed by OrientDB Users are pre-defined in the etc/conf/strongbox-security-users.xml file REST API All of Strongbox's features are available via REST API end-points. You can customize a user's access to only allow specific end-points to be accessible. Search for artifacts Manage the server's core configuration Manage repositories Manage users Manage logging Manage cron tasks We also have: Automated generation of documentation using Swagger Ready-to-use Java-based client(s) covering each REST command. Screenshots \u00b6 Show us some love! \u00b6 If you like what you are seeing, please give us a star and follow our journey!","title":"Introduction"},{"location":"index.html#strongbox","text":"Strongbox is an OpenSource artifact repository manager written in Java. We aim to provide an easy and reliable platform, for hosting your (binary) artifacts, regardless of your repository layout.","title":"Strongbox"},{"location":"index.html#features","text":"Directory browsing We have two types of directory browsing implemented: /browse - browsing via the user interface. /api/browse - API endpoint which returns either JSON or very lightweight HTML directory listing. Cron Tasks We have various cron tasks available to automate almost anything like rebuilding metadata, emptying trash, etc. Java implementation Groovy implementation Event handling Logging Log tailing View logs without downloading Configure log levels globally (and per package) Download logs over HTTP Repository types Hosted Proxy Group (including repository ordering, routing rules and nested group repositories) Layout providers Maven 2.x/3.x NPM NuGet v2 Raw PyPi (in progress) contributors, please, check here ) Composer ( contributors, please, check here ) Docker ( contributors, please, check here ) DEB ( contributors, please, check here ) Gems ( contributors, please, check here ) Yum ( contributors, please, check here ) Supported tools Ant and Ivy Choco Gradle Maven NPM Nuget with Mono Nuget in Visual Studio SBT Yarn Search providers Search providers offer a way to execute searches against different search engines. By default, searches are executed against OrientDB, unless a search provider has been specified. Click here for more details Artifact Query Language (AQL) to make searching easy and consistent between layouts OrientDB (default implementation for all repositories and layout formats) Maven Indexer Security HTTP Basic authentication JWT authentication LDAP Custom authentication provider, based on users that stored in the second-level cache backed by OrientDB Users are pre-defined in the etc/conf/strongbox-security-users.xml file REST API All of Strongbox's features are available via REST API end-points. You can customize a user's access to only allow specific end-points to be accessible. Search for artifacts Manage the server's core configuration Manage repositories Manage users Manage logging Manage cron tasks We also have: Automated generation of documentation using Swagger Ready-to-use Java-based client(s) covering each REST command.","title":"Features"},{"location":"index.html#screenshots","text":"","title":"Screenshots"},{"location":"index.html#show-us-some-love","text":"If you like what you are seeing, please give us a star and follow our journey!","title":"Show us some love!"},{"location":"chat-redirect.html","text":"","title":"Join chat"},{"location":"contributing.html","text":"Contributing \u00b6 Thank you for considering to contribute to our project! We deeply appreciate any contributions be it may fixing the docs, bug fix or performance improvement. Check the opened issues - there is always something you can help with. Once you have found an issue you would like to work on: Read our Coding Conventions Read our Code of Conduct Read our Developer Guide We have a helpful community of developers on our channel, please feel free to drop by, if you have questions, issues, or would like to contribute! Submitting a bug report \u00b6 Before submitting a bug report, please use the issue tracker's search to verify the bug has not been reported yet. If the bug has not been reported, please add a new one and mention all of the steps to reproduce it. In case there is a bug in the user interface - please submit it at strongbox/strongbox-web-ui , preferably with a screenshot and steps to reproduce. Tip Strongbox is still under heavy development. Some things might break and/or change and some are simply not implemented yet. Please ask us in the main channel before submitting a bug report to confirm. Submitting pull requests \u00b6 Contributions and contributors are always welcome! If you have decided to work on an issue, please comment before you start the actual work to check if somebody else is not already working on it. If nobody is working, please create a fork of strongbox/strongbox and create a branch from the master which has the issue number you will be working on. For example, if the issue number is 1004 , the branch name should be issue-1004 . While working on the issue, please commit using the following messaging format: Issue 1004: Title of the issue - Removing unused class and fixing failing test cases - Oh, look, another necessary change here! Once you're done with your work - feel free to open a Pull Request. Our CI will build the entire code and report any failing tests. In case of issues (i.e. build failures), please ping us in the chat. Please continue reading our CONTRIBUTING.md . Warning For legal reasons we will request you to sign our ICLA before we can merge your pull request. The collected information is in no way provided to third-party companies nor anybody else. Refusing to sign the ICLA will leave us with no other choice but to close any pull request you might have opened. Special thanks to all of our contributors! \u00b6 We would like to take a moment and shout out a special THANK YOU to all of our contributors for their awesome work! Strongbox would not have been the same without you and we deeply appreciate all of your help!","title":"Contributing"},{"location":"contributing.html#contributing","text":"Thank you for considering to contribute to our project! We deeply appreciate any contributions be it may fixing the docs, bug fix or performance improvement. Check the opened issues - there is always something you can help with. Once you have found an issue you would like to work on: Read our Coding Conventions Read our Code of Conduct Read our Developer Guide We have a helpful community of developers on our channel, please feel free to drop by, if you have questions, issues, or would like to contribute!","title":"Contributing"},{"location":"contributing.html#submitting-a-bug-report","text":"Before submitting a bug report, please use the issue tracker's search to verify the bug has not been reported yet. If the bug has not been reported, please add a new one and mention all of the steps to reproduce it. In case there is a bug in the user interface - please submit it at strongbox/strongbox-web-ui , preferably with a screenshot and steps to reproduce. Tip Strongbox is still under heavy development. Some things might break and/or change and some are simply not implemented yet. Please ask us in the main channel before submitting a bug report to confirm.","title":"Submitting a bug report"},{"location":"contributing.html#submitting-pull-requests","text":"Contributions and contributors are always welcome! If you have decided to work on an issue, please comment before you start the actual work to check if somebody else is not already working on it. If nobody is working, please create a fork of strongbox/strongbox and create a branch from the master which has the issue number you will be working on. For example, if the issue number is 1004 , the branch name should be issue-1004 . While working on the issue, please commit using the following messaging format: Issue 1004: Title of the issue - Removing unused class and fixing failing test cases - Oh, look, another necessary change here! Once you're done with your work - feel free to open a Pull Request. Our CI will build the entire code and report any failing tests. In case of issues (i.e. build failures), please ping us in the chat. Please continue reading our CONTRIBUTING.md . Warning For legal reasons we will request you to sign our ICLA before we can merge your pull request. The collected information is in no way provided to third-party companies nor anybody else. Refusing to sign the ICLA will leave us with no other choice but to close any pull request you might have opened.","title":"Submitting pull requests"},{"location":"contributing.html#special-thanks-to-all-of-our-contributors","text":"We would like to take a moment and shout out a special THANK YOU to all of our contributors for their awesome work! Strongbox would not have been the same without you and we deeply appreciate all of your help!","title":"Special thanks to all of our contributors!"},{"location":"license.html","text":"","title":"License"},{"location":"release-notes.html","text":"Release notes \u00b6","title":"Release notes"},{"location":"release-notes.html#release-notes","text":"","title":"Release notes"},{"location":"developer-guide/index.html","text":"Developer's Guide \u00b6 This section of our documentation is aimed at developers who intend to further improve our code base. The following pages will help you get started and we strongly advise you to read them carefully, as they will explain how to get set up, start coding and meet our requirements for accepting your changes: Getting Started Building The Code Coding Convention Code of Conduct Contributing Writing Tests Getting Started With Persistence Upgrading Dependencies","title":"Introduction"},{"location":"developer-guide/index.html#developers-guide","text":"This section of our documentation is aimed at developers who intend to further improve our code base. The following pages will help you get started and we strongly advise you to read them carefully, as they will explain how to get set up, start coding and meet our requirements for accepting your changes: Getting Started Building The Code Coding Convention Code of Conduct Contributing Writing Tests Getting Started With Persistence Upgrading Dependencies","title":"Developer's Guide"},{"location":"developer-guide/add-logging.html","text":"Add logging to projects or modules \u00b6 The logging in the application is set up using: logback ( logback-core , logback-classic ) jcl-over-slf4j (to control Jersey and Spring output) logback-configuration Dependencies \u00b6 Configuration \u00b6 If you have strongbox-commons as a (direct, or transitive) dependency of your module, you will be able to use the logging, without having to specify the dependencies yourself. If, for one reason, or another, you do not want to have this dependency, you will need the following dependencies instead: <!-- Logging --> <dependency> <groupId> org.slf4j </groupId> <artifactId> jcl-over-slf4j </artifactId> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> jul-to-slf4j </artifactId> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> </dependency> Dependency Conflicts \u00b6 Dependencies which have transitive dependencies on different versions of the libraries below, will most-likely cause dependency conflicts: log4j commons-logging commons-logging-api In order to exclude them as transitive dependencies, you will need to have something similar to this example: <dependency> <groupId> org.springframework </groupId> <artifactId> spring-core </artifactId> <version> ${version.spring} </version> <exclusions> <!-- Exclude Commons Logging --> <exclusion> <groupId> commons-logging </groupId> <artifactId> commons-logging </artifactId> </exclusion> </exclusions> </dependency> Logging Configuration File Location \u00b6 The logging is controlled via the strongbox/strongbox-resources/strongbox-common-resources/src/main/resources/logback-spring.xml . This resource should be copied wherever necessary using: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <executions> <execution> <id> unpack-resources-logging </id> <phase> process-resources </phase> <goals> <goal> unpack </goal> </goals> <configuration> <artifactItems> <artifactItem> <groupId> ${project.groupId} </groupId> <artifactId> strongbox-common-resources </artifactId> <version> ${project.version} </version> <type> jar </type> <overWrite> true </overWrite> <outputDirectory> ${dir.strongbox.home}/etc </outputDirectory> <includes> logback.xml </includes> </artifactItem> </artifactItems> </configuration> </execution> </executions> </plugin> Configuring the Logging via The REST API \u00b6 The logging can be configured via the REST API. We have created a separate project called logback-configuration for this purpose. For details on how to configure the logging and resolve the log files via the REST API, please visit the rest documentation in your Strongbox instance at http://localhost:48080/docs/rest/api.html .","title":"Logging"},{"location":"developer-guide/add-logging.html#add-logging-to-projects-or-modules","text":"The logging in the application is set up using: logback ( logback-core , logback-classic ) jcl-over-slf4j (to control Jersey and Spring output) logback-configuration","title":"Add logging to projects or modules"},{"location":"developer-guide/add-logging.html#dependencies","text":"","title":"Dependencies"},{"location":"developer-guide/add-logging.html#configuration","text":"If you have strongbox-commons as a (direct, or transitive) dependency of your module, you will be able to use the logging, without having to specify the dependencies yourself. If, for one reason, or another, you do not want to have this dependency, you will need the following dependencies instead: <!-- Logging --> <dependency> <groupId> org.slf4j </groupId> <artifactId> jcl-over-slf4j </artifactId> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> jul-to-slf4j </artifactId> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> </dependency>","title":"Configuration"},{"location":"developer-guide/add-logging.html#dependency-conflicts","text":"Dependencies which have transitive dependencies on different versions of the libraries below, will most-likely cause dependency conflicts: log4j commons-logging commons-logging-api In order to exclude them as transitive dependencies, you will need to have something similar to this example: <dependency> <groupId> org.springframework </groupId> <artifactId> spring-core </artifactId> <version> ${version.spring} </version> <exclusions> <!-- Exclude Commons Logging --> <exclusion> <groupId> commons-logging </groupId> <artifactId> commons-logging </artifactId> </exclusion> </exclusions> </dependency>","title":"Dependency Conflicts"},{"location":"developer-guide/add-logging.html#logging-configuration-file-location","text":"The logging is controlled via the strongbox/strongbox-resources/strongbox-common-resources/src/main/resources/logback-spring.xml . This resource should be copied wherever necessary using: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <executions> <execution> <id> unpack-resources-logging </id> <phase> process-resources </phase> <goals> <goal> unpack </goal> </goals> <configuration> <artifactItems> <artifactItem> <groupId> ${project.groupId} </groupId> <artifactId> strongbox-common-resources </artifactId> <version> ${project.version} </version> <type> jar </type> <overWrite> true </overWrite> <outputDirectory> ${dir.strongbox.home}/etc </outputDirectory> <includes> logback.xml </includes> </artifactItem> </artifactItems> </configuration> </execution> </executions> </plugin>","title":"Logging Configuration File Location"},{"location":"developer-guide/add-logging.html#configuring-the-logging-via-the-rest-api","text":"The logging can be configured via the REST API. We have created a separate project called logback-configuration for this purpose. For details on how to configure the logging and resolve the log files via the REST API, please visit the rest documentation in your Strongbox instance at http://localhost:48080/docs/rest/api.html .","title":"Configuring the Logging via The REST API"},{"location":"developer-guide/assertj-user-guide.html","text":"AssertJ User Guide \u00b6 Assertions \u00b6 All AssertJ assertions are static methods in the org.assertj.core.api.Assertions class. AssertJ assertions always look like assertThat(testedValue).<condition>(realValue) . For example, when we want to check if objects are equal, we would use: assertThat(\"actual string\").isEqualTo(\"expected string\") If we would like to to add a description to our assertion, we would use as(description) . For example: assertThat(\"actual string\").as(\"Values should be equal\").isEqualTo(\"expected string\") Assertion Condition fail() Fails a test with the given failure message isTrue() If we want to verify that a boolean value is true isSameAs(object) If we want to ensure that two objects refer to the same object isNull() If we want to verify that an object is null hasSize(int) If we want to verify size of collection isEmpty() If we want to verify that collection is empty isNotSameAs(object) If we want to ensure that two objects don't refer to the same object isNotEqualTo(object) If we want to verify that the expected value (or object) is not equal to the actual value (or object) isNotNull() If we want to verify that an object is not null isFalse() If we want to verify that a boolean value is false isEqualTo() If we want to verify that the expected value (or object) is equal to the actual value (or object) isThrownBy(supplier) If we want to write assertions for the exceptions thrown by the system","title":"AssertJ"},{"location":"developer-guide/assertj-user-guide.html#assertj-user-guide","text":"","title":"AssertJ User Guide"},{"location":"developer-guide/assertj-user-guide.html#assertions","text":"All AssertJ assertions are static methods in the org.assertj.core.api.Assertions class. AssertJ assertions always look like assertThat(testedValue).<condition>(realValue) . For example, when we want to check if objects are equal, we would use: assertThat(\"actual string\").isEqualTo(\"expected string\") If we would like to to add a description to our assertion, we would use as(description) . For example: assertThat(\"actual string\").as(\"Values should be equal\").isEqualTo(\"expected string\") Assertion Condition fail() Fails a test with the given failure message isTrue() If we want to verify that a boolean value is true isSameAs(object) If we want to ensure that two objects refer to the same object isNull() If we want to verify that an object is null hasSize(int) If we want to verify size of collection isEmpty() If we want to verify that collection is empty isNotSameAs(object) If we want to ensure that two objects don't refer to the same object isNotEqualTo(object) If we want to verify that the expected value (or object) is not equal to the actual value (or object) isNotNull() If we want to verify that an object is not null isFalse() If we want to verify that a boolean value is false isEqualTo() If we want to verify that the expected value (or object) is equal to the actual value (or object) isThrownBy(supplier) If we want to write assertions for the exceptions thrown by the system","title":"Assertions"},{"location":"developer-guide/building-strongbox-using-strongbox-instance.html","text":"Building Strongbox using a Strongbox Instance \u00b6 We like our dog food and we try it all the time! Working on Strongbox features is fun, but has a hidden issue - you can unintentionally break things. Even though we try to have our code covered with lots of test cases - a moment comes when you need to test things manually to make sure your changes are not affecting other features or performance. Doing a build of @strongbox/strongbox using a Strongbox instance is as \"real world\" environment as it can get and this article goes into details how to do the testing. Starting a Strongbox Instance \u00b6 Before you start testing, you will need to have a running Strongbox instance. You can start Strongbox in two ways - via spring-boot and from strongbox-distribution . In most cases, during the development phase you will mainly start an instance via spring-boot . However once you are done with your task you should always ensure the strongbox-distribution package works as expected. Strongbox via spring-boot 1 2 3 4 git clone https://github.com/strongbox/strongbox mvn clean install -DskipTests cd strongbox-web-core mvn spring-boot:run Strongbox from strongbox-distribution 1 2 3 4 5 6 git clone https://github.com/strongbox/strongbox mvn clean install -DskipTests cd strongbox-distribution/target tar -zxf *gz cd strongbox-distribution-*/strongbox-*/ ./bin/strongbox console Building and Deploying using Strongbox \u00b6 Following the steps below should result in successful result: Did you pay attention? Configure your settings.xml to point to the local Strongbox Instance : Download # Linux / MacOS curl -o ~/.m2/settings-local.xml \\ https://strongbox.github.io/assets/resources/maven/settings-local.xml # Windows curl -o %HOMEPATH%\\.m2\\settings-local.xml ^ https://strongbox.github.io/assets/resources/maven/settings-local.xml Raw/Copy <?xml version=\"1.0\" encoding=\"UTF-8\"?> <settings> <localRepository>.m2/repository-strongbox-local</localRepository> <mirrors> <mirror> <id>strongbox</id> <name>strongbox</name> <url>http://localhost:48080/storages/public/maven-group/</url> <mirrorOf>*</mirrorOf> </mirror> </mirrors> <profiles> <profile> <id>carlspring-repositories</id> <activation> <activeByDefault>true</activeByDefault> </activation> <repositories> <repository> <id>strongbox</id> <name>strongbox</name> <url>http://localhost:48080/storages/public/maven-group/</url> <layout>default</layout> </repository> </repositories> <pluginRepositories> <pluginRepository> <id>strongbox</id> <name>strongbox</name> <url>http://localhost:48080/storages/public/maven-group/</url> <layout>default</layout> </pluginRepository> </pluginRepositories> </profile> </profiles> <servers> <server> <id>releases</id> <username>admin</username> <password>password</password> </server> <server> <id>snapshots</id> <username>admin</username> <password>password</password> </server> </servers> </settings> Make a clean clone of @strongbox/strongbox into a separate path (i.e. strongbox-tmp ) Build Strongbox using a Strongbox instance: $ cd strongbox-tmp $ mvn clean install -DskipTests -s ~/.m2/settings-local.xml ... (should start downloading artifacts from localhost:48080 [INFO] Scanning for projects... Downloading from strongbox: http://localhost:48080/storages/public/maven-group/org/carlspring/strongbox/strongbox-parent/1.0-SNAPSHOT/maven-metadata.xml Downloaded from strongbox: http://localhost:48080/storages/public/maven-group/org/carlspring/strongbox/strongbox-parent/1.0-SNAPSHOT/maven-metadata.xml (617 B at 1.7 kB/s) ... [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ Deploy into Strongbox $ mvn clean deploy \\ -s ~/.m2/settings-local.xml -DaltDeploymentRepository=snapshots::default::http://localhost:48080/storages/storage0/snapshots/ \\ -DskipTests \\ -fn ... [INFO] --- maven-install-plugin:2.4:install (default-install) @ strongbox-masterbuild --- [INFO] Installing /java/strongbox-tmp/pom.xml to /java/strongbox-tmp/.m2/repository-strongbox-local/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/strongbox-masterbuild-1.0-SNAPSHOT.pom [INFO] [INFO] --- maven-deploy-plugin:2.7:deploy (default-deploy) @ strongbox-masterbuild --- [INFO] Using alternate deployment repository snapshots::default::http://localhost:48080/storages/storage0/snapshots/ Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/strongbox-masterbuild-1.0-20180128.060409-1.pom Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/strongbox-masterbuild-1.0-20180128.060409-1.pom (4 KB at 5.6 KB/sec) Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/maven-metadata.xml (618 B at 1.2 KB/sec) Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/maven-metadata.xml (303 B at 0.6 KB/sec) ... [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------","title":"Building Strongbox using a Strongbox instance"},{"location":"developer-guide/building-strongbox-using-strongbox-instance.html#building-strongbox-using-a-strongbox-instance","text":"We like our dog food and we try it all the time! Working on Strongbox features is fun, but has a hidden issue - you can unintentionally break things. Even though we try to have our code covered with lots of test cases - a moment comes when you need to test things manually to make sure your changes are not affecting other features or performance. Doing a build of @strongbox/strongbox using a Strongbox instance is as \"real world\" environment as it can get and this article goes into details how to do the testing.","title":"Building Strongbox using a Strongbox Instance"},{"location":"developer-guide/building-strongbox-using-strongbox-instance.html#starting-a-strongbox-instance","text":"Before you start testing, you will need to have a running Strongbox instance. You can start Strongbox in two ways - via spring-boot and from strongbox-distribution . In most cases, during the development phase you will mainly start an instance via spring-boot . However once you are done with your task you should always ensure the strongbox-distribution package works as expected. Strongbox via spring-boot 1 2 3 4 git clone https://github.com/strongbox/strongbox mvn clean install -DskipTests cd strongbox-web-core mvn spring-boot:run Strongbox from strongbox-distribution 1 2 3 4 5 6 git clone https://github.com/strongbox/strongbox mvn clean install -DskipTests cd strongbox-distribution/target tar -zxf *gz cd strongbox-distribution-*/strongbox-*/ ./bin/strongbox console","title":"Starting a Strongbox Instance"},{"location":"developer-guide/building-strongbox-using-strongbox-instance.html#building-and-deploying-using-strongbox","text":"Following the steps below should result in successful result: Did you pay attention? Configure your settings.xml to point to the local Strongbox Instance : Download # Linux / MacOS curl -o ~/.m2/settings-local.xml \\ https://strongbox.github.io/assets/resources/maven/settings-local.xml # Windows curl -o %HOMEPATH%\\.m2\\settings-local.xml ^ https://strongbox.github.io/assets/resources/maven/settings-local.xml Raw/Copy <?xml version=\"1.0\" encoding=\"UTF-8\"?> <settings> <localRepository>.m2/repository-strongbox-local</localRepository> <mirrors> <mirror> <id>strongbox</id> <name>strongbox</name> <url>http://localhost:48080/storages/public/maven-group/</url> <mirrorOf>*</mirrorOf> </mirror> </mirrors> <profiles> <profile> <id>carlspring-repositories</id> <activation> <activeByDefault>true</activeByDefault> </activation> <repositories> <repository> <id>strongbox</id> <name>strongbox</name> <url>http://localhost:48080/storages/public/maven-group/</url> <layout>default</layout> </repository> </repositories> <pluginRepositories> <pluginRepository> <id>strongbox</id> <name>strongbox</name> <url>http://localhost:48080/storages/public/maven-group/</url> <layout>default</layout> </pluginRepository> </pluginRepositories> </profile> </profiles> <servers> <server> <id>releases</id> <username>admin</username> <password>password</password> </server> <server> <id>snapshots</id> <username>admin</username> <password>password</password> </server> </servers> </settings> Make a clean clone of @strongbox/strongbox into a separate path (i.e. strongbox-tmp ) Build Strongbox using a Strongbox instance: $ cd strongbox-tmp $ mvn clean install -DskipTests -s ~/.m2/settings-local.xml ... (should start downloading artifacts from localhost:48080 [INFO] Scanning for projects... Downloading from strongbox: http://localhost:48080/storages/public/maven-group/org/carlspring/strongbox/strongbox-parent/1.0-SNAPSHOT/maven-metadata.xml Downloaded from strongbox: http://localhost:48080/storages/public/maven-group/org/carlspring/strongbox/strongbox-parent/1.0-SNAPSHOT/maven-metadata.xml (617 B at 1.7 kB/s) ... [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ Deploy into Strongbox $ mvn clean deploy \\ -s ~/.m2/settings-local.xml -DaltDeploymentRepository=snapshots::default::http://localhost:48080/storages/storage0/snapshots/ \\ -DskipTests \\ -fn ... [INFO] --- maven-install-plugin:2.4:install (default-install) @ strongbox-masterbuild --- [INFO] Installing /java/strongbox-tmp/pom.xml to /java/strongbox-tmp/.m2/repository-strongbox-local/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/strongbox-masterbuild-1.0-SNAPSHOT.pom [INFO] [INFO] --- maven-deploy-plugin:2.7:deploy (default-deploy) @ strongbox-masterbuild --- [INFO] Using alternate deployment repository snapshots::default::http://localhost:48080/storages/storage0/snapshots/ Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/strongbox-masterbuild-1.0-20180128.060409-1.pom Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/strongbox-masterbuild-1.0-20180128.060409-1.pom (4 KB at 5.6 KB/sec) Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/1.0-SNAPSHOT/maven-metadata.xml (618 B at 1.2 KB/sec) Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/strongbox-masterbuild/maven-metadata.xml (303 B at 0.6 KB/sec) ... [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------","title":"Building and Deploying using Strongbox"},{"location":"developer-guide/building-the-code-with-docker.html","text":"Building the code with Docker \u00b6 Introduction \u00b6 Docker is awesome and we are using it to build and test almost everything. It has proven to be quite fast and convenient way to easily reproduce issues. We encourage you to have a decent version of Docker installed on your machine so that you can debug or reproduce issues easier. You should note that we are mostly using Linux so this guide is more focused on how to do things on Linux distributions. However, things under Windows shouldn't be that different. Docker installation \u00b6 Depending on your OS and distribution you can install different versions of Docker CE (Community Edition). In most cases your distribution will have it's own package of Docker which works fine. Please head to the docker installation manual pages to check how to install it on your machine: Also, don't forget to install Docker Compose on your machine because we have some docker-compose.yml files in place to make it easier for you to start Strongbox. Available images \u00b6 We have created docker images for the most used distributions (Debian, Centos, OpenSUSE, Ubuntu) and we test for a lot of different scenarios and tools. Our images are published in the Docker hub and can be found at strongboxci . At the time of writing this, we have the following distribution images: strongboxci/alpine strongboxci/centos strongboxci/debian strongboxci/opensuse strongboxci/ubuntu Most of the tests we run in our CI are using strongboxci/alpine . Please note that almost all of our images come with maven pre-installed and configured with our settings.xml file. You don't need to do anything other than just start the container and build your code. Possible permission issues (Linux) \u00b6 It is important to mention that our docker images are running under the user jenkins which has user_id=1000 and group_id=1000 . This is usually the very first user on many distributions and in general should \"work\". Please check your user/group id by executing id . If you see something like the output below - you shouldn't have problems: uid=1000(your-username) gid=1000(your-username) groups=1000(your-username) If you see another uid/gid you will likely hit a permission issue. Unfortunately docker/compose#3328 , docker/compose#4700 and docker/cli#1318 are preventing docker-compose from being able to automatically fix the group id. There are two workarounds which you can apply for things to work as expected: Instead of using docker-compose , you can use plain docker and pass --group-add `id -g` to the arguments. This will add your local group id in the docker container and you will be able to work as usual, however it will require typing the docker run command every time. Example command: docker run -it --rm --group-add `id -g` -v /path/to/strongbox-project:/workspace strongboxci/alpine:jdk8-mvn3.6 You can create a user with uid=1000 and gid=1000 and then fix the permissions of the folders: Create the user/group groupadd -g 1000 jenkins useradd -u 1000 -g 1000 -s /bin/bash -m jenkins Fix the permissions chown -R `id -u`.1001 /path/to/strongbox-project ~/.m2/repository chmod -R 775 /path/to/strongbox-project ~/.m2/repository You can now proceed with running docker-compose up as usual and it should work. Windows issues \u00b6 Running docker-compose on Windows may require changes in docker-compose.yml where should be added a new environment variable: environment : - COMPOSE_CONVERT_WINDOWS_PATHS=1 Also be sure that a local drive is available for docker containers (Docker Desktop settings -> Shared Drives) Run strongbox \u00b6 You just want to start a Strongbox instance from sources? We've got you covered: git clone https://github.com/strongbox/strongbox.git cd strongbox docker-compose up Once the build has completed, Strongbox will start and you will be able to access it at http://localhost:48080/ Building and testing \u00b6 To build your code inside a container with our images you need to have cloned the repository you need and then start a docker container with the image you need. This is an example of how to build Strongbox from sources inside a container using strongboxci/alpine:jdk8-mvn3.6 : $ git clone https://github.com/strongbox/strongbox.git $ cd strongbox $ docker pull strongboxci/alpine:jdk8-mvn3.6 $ docker run -it --rm \\ -v $(pwd):/home/jenkins/workspace \\ -w /home/jenkins/workspace \\ strongboxci/alpine:jdk8-mvn3.6 Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T16:41:47+00:00) Maven home: /java/mvn-3.3.9 Java version: 1.8.0_161, vendor: Oracle Corporation Java home: /java/jdk-1.8u161-b12/jre Default locale: en, platform encoding: UTF-8 OS name: \"linux\", version: \"4.13.0-37-generic\", arch: \"amd64\", family: \"unix\" bash-4.3$ What the docker run command just did was to create a disposable container ( --rm ) in which you can execute any commands. By passing the -w flag we have set the current working directory to be the workspace (default is /home/jenkins ). We can now proceed with building the code: mvn clean install This might take a while, but in the end you should have a successful build. Mount maven repository cache It is also possible to mount your local ~/.m2/repository directory into the container. Just pass -v ~/.m2/repository:/home/jenkins/.m2/repository into the arguments and you're good to go. Making life easier \u00b6 If you have already checked out our strongboxci/alpine repository you would have noticed the amount of different images we have. Trying to remember all of them and the way you need to setup the container is tedious and unnecessary. We have created a .bashrc with commands you can execute to easily get a container up and running Our .bashrc has two types of commands which: Start a container by mounting the current working directory as workspace (i.e dockerMvn , dockerGradle , etc) Start a container and automatically clone a project from github and use that as the workspace . (i.e. dockerMvnCheckout , dockerGradleCheckout , etc) If you don't remember arguments the command needs you can always execute dockerMvn --help and it will print them to you as well as an example. Setting up ~/.bashrc \u00b6 If you are interested in using the commands from our .bashrc : 1 2 3 4 curl -o ~/.bashrc-strongbox \\ -L https://strongbox.github.io/assets/resources/docker/bashrc-strongbox chmod 750 ~/.bashrc-strongbox echo \"[ -f \\$HOME/.bashrc-strongbox ] && . \\$HOME/.bashrc-strongbox\" >> ~/.bashrc You can now either open up a new terminal or execute source ~/.bashrc Have fun building things in docker Example commands \u00b6 Checkout strongbox/strongbox.git and run mvn clean install dockerMvnCheckout Checkout strongbox/strongbox.git and run mvn clean install -DskipTests dockerMvnCheckout strongbox master/branch/PR-1234 \"mvn clean install\" Use current working directory to build project cd /some/path dockerMvn Checkout strongbox/strongbox-web-integration-tests.git and build using Gradle dockerGradleCheckout strongbox-web-integration-tests master \"cd gradle; mvn clean install\" Use the host 's settings.xml file instead of the container's dockerMvn \"mvn clean install -s ~/.m2/settings-host.xml\" dockerMvnCheckout strongbox PR-1234 \"mvn clean install -DskipTests -s ~/.m2/settings-host.xml\"","title":"Building the code (Docker)"},{"location":"developer-guide/building-the-code-with-docker.html#building-the-code-with-docker","text":"","title":"Building the code with Docker"},{"location":"developer-guide/building-the-code-with-docker.html#introduction","text":"Docker is awesome and we are using it to build and test almost everything. It has proven to be quite fast and convenient way to easily reproduce issues. We encourage you to have a decent version of Docker installed on your machine so that you can debug or reproduce issues easier. You should note that we are mostly using Linux so this guide is more focused on how to do things on Linux distributions. However, things under Windows shouldn't be that different.","title":"Introduction"},{"location":"developer-guide/building-the-code-with-docker.html#docker-installation","text":"Depending on your OS and distribution you can install different versions of Docker CE (Community Edition). In most cases your distribution will have it's own package of Docker which works fine. Please head to the docker installation manual pages to check how to install it on your machine: Also, don't forget to install Docker Compose on your machine because we have some docker-compose.yml files in place to make it easier for you to start Strongbox.","title":"Docker installation"},{"location":"developer-guide/building-the-code-with-docker.html#available-images","text":"We have created docker images for the most used distributions (Debian, Centos, OpenSUSE, Ubuntu) and we test for a lot of different scenarios and tools. Our images are published in the Docker hub and can be found at strongboxci . At the time of writing this, we have the following distribution images: strongboxci/alpine strongboxci/centos strongboxci/debian strongboxci/opensuse strongboxci/ubuntu Most of the tests we run in our CI are using strongboxci/alpine . Please note that almost all of our images come with maven pre-installed and configured with our settings.xml file. You don't need to do anything other than just start the container and build your code.","title":"Available images"},{"location":"developer-guide/building-the-code-with-docker.html#possible-permission-issues-linux","text":"It is important to mention that our docker images are running under the user jenkins which has user_id=1000 and group_id=1000 . This is usually the very first user on many distributions and in general should \"work\". Please check your user/group id by executing id . If you see something like the output below - you shouldn't have problems: uid=1000(your-username) gid=1000(your-username) groups=1000(your-username) If you see another uid/gid you will likely hit a permission issue. Unfortunately docker/compose#3328 , docker/compose#4700 and docker/cli#1318 are preventing docker-compose from being able to automatically fix the group id. There are two workarounds which you can apply for things to work as expected: Instead of using docker-compose , you can use plain docker and pass --group-add `id -g` to the arguments. This will add your local group id in the docker container and you will be able to work as usual, however it will require typing the docker run command every time. Example command: docker run -it --rm --group-add `id -g` -v /path/to/strongbox-project:/workspace strongboxci/alpine:jdk8-mvn3.6 You can create a user with uid=1000 and gid=1000 and then fix the permissions of the folders: Create the user/group groupadd -g 1000 jenkins useradd -u 1000 -g 1000 -s /bin/bash -m jenkins Fix the permissions chown -R `id -u`.1001 /path/to/strongbox-project ~/.m2/repository chmod -R 775 /path/to/strongbox-project ~/.m2/repository You can now proceed with running docker-compose up as usual and it should work.","title":"Possible permission issues (Linux)"},{"location":"developer-guide/building-the-code-with-docker.html#windows-issues","text":"Running docker-compose on Windows may require changes in docker-compose.yml where should be added a new environment variable: environment : - COMPOSE_CONVERT_WINDOWS_PATHS=1 Also be sure that a local drive is available for docker containers (Docker Desktop settings -> Shared Drives)","title":"Windows issues"},{"location":"developer-guide/building-the-code-with-docker.html#run-strongbox","text":"You just want to start a Strongbox instance from sources? We've got you covered: git clone https://github.com/strongbox/strongbox.git cd strongbox docker-compose up Once the build has completed, Strongbox will start and you will be able to access it at http://localhost:48080/","title":"Run strongbox"},{"location":"developer-guide/building-the-code-with-docker.html#building-and-testing","text":"To build your code inside a container with our images you need to have cloned the repository you need and then start a docker container with the image you need. This is an example of how to build Strongbox from sources inside a container using strongboxci/alpine:jdk8-mvn3.6 : $ git clone https://github.com/strongbox/strongbox.git $ cd strongbox $ docker pull strongboxci/alpine:jdk8-mvn3.6 $ docker run -it --rm \\ -v $(pwd):/home/jenkins/workspace \\ -w /home/jenkins/workspace \\ strongboxci/alpine:jdk8-mvn3.6 Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T16:41:47+00:00) Maven home: /java/mvn-3.3.9 Java version: 1.8.0_161, vendor: Oracle Corporation Java home: /java/jdk-1.8u161-b12/jre Default locale: en, platform encoding: UTF-8 OS name: \"linux\", version: \"4.13.0-37-generic\", arch: \"amd64\", family: \"unix\" bash-4.3$ What the docker run command just did was to create a disposable container ( --rm ) in which you can execute any commands. By passing the -w flag we have set the current working directory to be the workspace (default is /home/jenkins ). We can now proceed with building the code: mvn clean install This might take a while, but in the end you should have a successful build. Mount maven repository cache It is also possible to mount your local ~/.m2/repository directory into the container. Just pass -v ~/.m2/repository:/home/jenkins/.m2/repository into the arguments and you're good to go.","title":"Building and testing"},{"location":"developer-guide/building-the-code-with-docker.html#making-life-easier","text":"If you have already checked out our strongboxci/alpine repository you would have noticed the amount of different images we have. Trying to remember all of them and the way you need to setup the container is tedious and unnecessary. We have created a .bashrc with commands you can execute to easily get a container up and running Our .bashrc has two types of commands which: Start a container by mounting the current working directory as workspace (i.e dockerMvn , dockerGradle , etc) Start a container and automatically clone a project from github and use that as the workspace . (i.e. dockerMvnCheckout , dockerGradleCheckout , etc) If you don't remember arguments the command needs you can always execute dockerMvn --help and it will print them to you as well as an example.","title":"Making life easier"},{"location":"developer-guide/building-the-code-with-docker.html#setting-up-bashrc","text":"If you are interested in using the commands from our .bashrc : 1 2 3 4 curl -o ~/.bashrc-strongbox \\ -L https://strongbox.github.io/assets/resources/docker/bashrc-strongbox chmod 750 ~/.bashrc-strongbox echo \"[ -f \\$HOME/.bashrc-strongbox ] && . \\$HOME/.bashrc-strongbox\" >> ~/.bashrc You can now either open up a new terminal or execute source ~/.bashrc Have fun building things in docker","title":"Setting up ~/.bashrc"},{"location":"developer-guide/building-the-code-with-docker.html#example-commands","text":"Checkout strongbox/strongbox.git and run mvn clean install dockerMvnCheckout Checkout strongbox/strongbox.git and run mvn clean install -DskipTests dockerMvnCheckout strongbox master/branch/PR-1234 \"mvn clean install\" Use current working directory to build project cd /some/path dockerMvn Checkout strongbox/strongbox-web-integration-tests.git and build using Gradle dockerGradleCheckout strongbox-web-integration-tests master \"cd gradle; mvn clean install\" Use the host 's settings.xml file instead of the container's dockerMvn \"mvn clean install -s ~/.m2/settings-host.xml\" dockerMvnCheckout strongbox PR-1234 \"mvn clean install -DskipTests -s ~/.m2/settings-host.xml\"","title":"Example commands"},{"location":"developer-guide/building-the-code.html","text":"Building the code \u00b6 Before continuing, please make sure you've read the Getting Started section. Building strongbox \u00b6 Running the commands below should be enough to end with a successful build: 1 2 3 git clone https://github.com/strongbox/strongbox cd strongbox mvn clean install When you have properly setup your settings.xml file, you should not need to run any of the steps below. In case our artifact repository manager is not working (which happens very rarely), you might have to build and install the following projects using mvn clean install in the order they are listed below before building Strongbox: unboundid-maven-plugin little-proxy-maven-plugin maven-commons commons-io commons-http logback-configuration Tests \u00b6 Skipping tests \u00b6 To skip the Maven tests and just build and install the code, run: mvn clean install -DskipTests Executing a particular test \u00b6 To execute a particular tests, run: mvn clean install -Dtest=MyTest To execute a test method of a test, run: mvn clean install -Dtest=MyTest#testMyMethod Executing the tests in remote debug mode \u00b6 To execute the tests in remote debug mode, run: mvn clean install \\ -Dmaven.surefire.debug=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9001 -Xnoagent\" Executing the tests like they are run in Jenkins \u00b6 Jenkins runs the tests by invoking a few Maven profiles, so that, for example, random ports can be allocated for the various plugins that open ports (such as the little-proxy-maven-plugin and unboundid-maven-plugin , for example). mvn clean install \\ -Preserve-ports,run-it-tests,!set-default-ports \\ -Dmaven.test.failure.ignore=false Common Build problems \u00b6 Busy 2424 Port \u00b6 If you see something like this: WARNING Port 0.0.0.0:2424 busy, trying the next available... [OServerNetworkListener] SEVERE Unable to listen for connections using the configured ports '2424-2424' on host '0.0.0.0' [OServerNetworkListener] ERROR Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) Then please make sure that: You don't have any other build already running You don't have any other test in progress (e.g. halted by debugger process) The reason for this failure is that OrientDB can't start, if another OrientDB process is running an listening on the same port. Filename too long (Windows 7 and 10) \u00b6 If you are getting one of these errors: error: unable to create file strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-maven-layout/strongbox-maven-metadata-api/src/main/java/org/carlspring/strongbox/storage/metadata/comparators/MetadataVersionComparator.java: Filename too long package org.carlspring.strongbox.x.y.z does not exist Then you are likely hitting a well-known issue with long paths under Windows. Executing command below should fix the issue: git config --system core.longpaths true At this point, you should be able to git clone the project properly under Windows and procceed with the build. Windows 10 \u00b6 If some tests on the master or other stable branch fail, please consider running terminal as an administrator. Spring Boot \u00b6 Running Spring Boot \u00b6 Sometimes you may have to run Jetty and manually invoke some manual tests. To do this run: cd strongbox-web-core/ mvn spring-boot:run Keeping Forks in Sync \u00b6 First, you need to have added the original remote (this is a one time only set up task): git remote add strongbox https://github.com/strongbox/strongbox.git Then in order to sync your fork with the original remote, execute the following: git fetch strongbox git checkout master git merge strongbox/master See Also \u00b6 Building Strongbox Against Strongbox Git Tips","title":"Building the code"},{"location":"developer-guide/building-the-code.html#building-the-code","text":"Before continuing, please make sure you've read the Getting Started section.","title":"Building the code"},{"location":"developer-guide/building-the-code.html#building-strongbox","text":"Running the commands below should be enough to end with a successful build: 1 2 3 git clone https://github.com/strongbox/strongbox cd strongbox mvn clean install When you have properly setup your settings.xml file, you should not need to run any of the steps below. In case our artifact repository manager is not working (which happens very rarely), you might have to build and install the following projects using mvn clean install in the order they are listed below before building Strongbox: unboundid-maven-plugin little-proxy-maven-plugin maven-commons commons-io commons-http logback-configuration","title":"Building strongbox"},{"location":"developer-guide/building-the-code.html#tests","text":"","title":"Tests"},{"location":"developer-guide/building-the-code.html#skipping-tests","text":"To skip the Maven tests and just build and install the code, run: mvn clean install -DskipTests","title":"Skipping tests"},{"location":"developer-guide/building-the-code.html#executing-a-particular-test","text":"To execute a particular tests, run: mvn clean install -Dtest=MyTest To execute a test method of a test, run: mvn clean install -Dtest=MyTest#testMyMethod","title":"Executing a particular test"},{"location":"developer-guide/building-the-code.html#executing-the-tests-in-remote-debug-mode","text":"To execute the tests in remote debug mode, run: mvn clean install \\ -Dmaven.surefire.debug=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9001 -Xnoagent\"","title":"Executing the tests in remote debug mode"},{"location":"developer-guide/building-the-code.html#executing-the-tests-like-they-are-run-in-jenkins","text":"Jenkins runs the tests by invoking a few Maven profiles, so that, for example, random ports can be allocated for the various plugins that open ports (such as the little-proxy-maven-plugin and unboundid-maven-plugin , for example). mvn clean install \\ -Preserve-ports,run-it-tests,!set-default-ports \\ -Dmaven.test.failure.ignore=false","title":"Executing the tests like they are run in Jenkins"},{"location":"developer-guide/building-the-code.html#common-build-problems","text":"","title":"Common Build problems"},{"location":"developer-guide/building-the-code.html#busy-2424-port","text":"If you see something like this: WARNING Port 0.0.0.0:2424 busy, trying the next available... [OServerNetworkListener] SEVERE Unable to listen for connections using the configured ports '2424-2424' on host '0.0.0.0' [OServerNetworkListener] ERROR Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) Then please make sure that: You don't have any other build already running You don't have any other test in progress (e.g. halted by debugger process) The reason for this failure is that OrientDB can't start, if another OrientDB process is running an listening on the same port.","title":"Busy 2424 Port"},{"location":"developer-guide/building-the-code.html#filename-too-long-windows-7-and-10","text":"If you are getting one of these errors: error: unable to create file strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-maven-layout/strongbox-maven-metadata-api/src/main/java/org/carlspring/strongbox/storage/metadata/comparators/MetadataVersionComparator.java: Filename too long package org.carlspring.strongbox.x.y.z does not exist Then you are likely hitting a well-known issue with long paths under Windows. Executing command below should fix the issue: git config --system core.longpaths true At this point, you should be able to git clone the project properly under Windows and procceed with the build.","title":"Filename too long (Windows 7 and 10)"},{"location":"developer-guide/building-the-code.html#windows-10","text":"If some tests on the master or other stable branch fail, please consider running terminal as an administrator.","title":"Windows 10"},{"location":"developer-guide/building-the-code.html#spring-boot","text":"","title":"Spring Boot"},{"location":"developer-guide/building-the-code.html#running-spring-boot","text":"Sometimes you may have to run Jetty and manually invoke some manual tests. To do this run: cd strongbox-web-core/ mvn spring-boot:run","title":"Running Spring Boot"},{"location":"developer-guide/building-the-code.html#keeping-forks-in-sync","text":"First, you need to have added the original remote (this is a one time only set up task): git remote add strongbox https://github.com/strongbox/strongbox.git Then in order to sync your fork with the original remote, execute the following: git fetch strongbox git checkout master git merge strongbox/master","title":"Keeping Forks in Sync"},{"location":"developer-guide/building-the-code.html#see-also","text":"Building Strongbox Against Strongbox Git Tips","title":"See Also"},{"location":"developer-guide/coding-convention.html","text":"Coding convention \u00b6 Reasoning \u00b6 It is important to have consistency across the codebase. This won't necessarily make your code work better, but it might help make it more understandable, less time-consuming and less irritating to go through when doing a code review of your changes. While to some this will seem like a nuisance, with no real benefit to the actual code, and while we do understand this point of view, we think that reading diff -s should be quick and easy. Accepting a pull request requires for it to be code reviewed first which, in term, means going over the code and figuring out what is what, why the change makes sense and whether, or not it will impact something else. All of this takes time, which, of course, is a commodity. Formatting rules to follow \u00b6 Use four spaces, instead of a tab. Make sure files have an empty line at the end. Within methods, please try to leave lines between logical units of code to improve readability. Acceptable and preferred int i = 5; int j = 6; int k += i + j + 7; logger.debug(\"k = \" + k); k += i + j + 7; logger.debug(\"k = \" + k); try { doSomethingThatMightThrowAnException(k); } catch (TheException e) { logger.error(e.getMessage(), e); } logger.debug(\"k = \" + k); Please avoid writing code like this int i = 5; int j = 6; int k = 7; logger.debug(\"k = \" + k); k += i + j + 7; logger.debug(\"k = \" + k); try { doSomethingThatMightThrowAnException(k); } catch (TheException e) { logger.error(e.getMessage(), e); } logger.debug(\"k = \" + k); When re-indenting code, please make a single commit with just the indentation changes and make sure you describe that this is just an re-indentation change in the commit message. Mixing reformatting and actual functional changes in the same commit makes things much more obscure to track and figure out. Don't reformat entire files, unless absolutely necessary! This makes it harder (and more time-consuming) to check what changes you've actually made. Try not to re-order code imports. Sometimes, while optimizing imports this is not possible, but re-ordering a long list of imports can make a diff hard to read. Code Example \u00b6 Please, consider the following an example of how to indent your code. Example class with proper formatting package com.bar; /** * License header goes here. */ import com.foo.*; import com.foo.dot.*; import java.util.*; /** * @author john.doe */ public class Foo extends TestCase implements Serializable { private int[] X = new int[]{ 1, 3, 5 7, 9, 11 }; private String[] strings = new String[] { \"Some text\", \"Some other text\", \"And a lot more text\" }; // For short values: @FancyAnnotation(someArrayParameter = { \"foo\", \"bar\" }) private FancyAnnotatedField f1; // Or... for longer values -- a value per line: @FancyAnnotation(someArrayParameter = { \"fooLongFooBarBlahFooBlahFoo\", \"barFooBlahBlahBlahMoreBlahFoo\" }) private FancyAnnotatedField f2; public void setUp() { super.setUp(); } public void test(boolean a, int x, int y, int z) throws Exception { label1: do { try { if (x > 0) { int someVariable = x + y == z ? x + 1: y + 2; } else if (x < 0) { int someVariable = (y + z); someVariable = x = x + y; String string1 = \"This is a long\" + \" string which contains x = \" + x; } else { label2: for (int i = 0; i < 5; i++) { doSomething(i); } } switch (a) { case 0: doCase0(); break; default: doDefault(); } } catch (Exception e) { processException(e.getMessage(), x + y, z, a); } finally { processFinally(); } } if (2 < 3) { return; } if (3 < 4) { return; } else { break; } do { x++; } while (x < 10000); while (x > 0) { System.out.println(x--); } for (int i = 0; i < 5; i++) { System.out.println(i); } for (int i = 0; i < 5; i++) { if (i != 1) { System.out.println(i); } else { System.out.println(\"This is it.\"); } } } private class InnerClass implements I1, I2 { public void bar() throws E1, E2 { System.out.println(\"bar\"); } } } Code style profiles \u00b6 We have created code style profiles which you can import into your IDE: strongbox-idea.xml strongbox-eclipse.xml","title":"Coding convention"},{"location":"developer-guide/coding-convention.html#coding-convention","text":"","title":"Coding convention"},{"location":"developer-guide/coding-convention.html#reasoning","text":"It is important to have consistency across the codebase. This won't necessarily make your code work better, but it might help make it more understandable, less time-consuming and less irritating to go through when doing a code review of your changes. While to some this will seem like a nuisance, with no real benefit to the actual code, and while we do understand this point of view, we think that reading diff -s should be quick and easy. Accepting a pull request requires for it to be code reviewed first which, in term, means going over the code and figuring out what is what, why the change makes sense and whether, or not it will impact something else. All of this takes time, which, of course, is a commodity.","title":"Reasoning"},{"location":"developer-guide/coding-convention.html#formatting-rules-to-follow","text":"Use four spaces, instead of a tab. Make sure files have an empty line at the end. Within methods, please try to leave lines between logical units of code to improve readability. Acceptable and preferred int i = 5; int j = 6; int k += i + j + 7; logger.debug(\"k = \" + k); k += i + j + 7; logger.debug(\"k = \" + k); try { doSomethingThatMightThrowAnException(k); } catch (TheException e) { logger.error(e.getMessage(), e); } logger.debug(\"k = \" + k); Please avoid writing code like this int i = 5; int j = 6; int k = 7; logger.debug(\"k = \" + k); k += i + j + 7; logger.debug(\"k = \" + k); try { doSomethingThatMightThrowAnException(k); } catch (TheException e) { logger.error(e.getMessage(), e); } logger.debug(\"k = \" + k); When re-indenting code, please make a single commit with just the indentation changes and make sure you describe that this is just an re-indentation change in the commit message. Mixing reformatting and actual functional changes in the same commit makes things much more obscure to track and figure out. Don't reformat entire files, unless absolutely necessary! This makes it harder (and more time-consuming) to check what changes you've actually made. Try not to re-order code imports. Sometimes, while optimizing imports this is not possible, but re-ordering a long list of imports can make a diff hard to read.","title":"Formatting rules to follow"},{"location":"developer-guide/coding-convention.html#code-example","text":"Please, consider the following an example of how to indent your code. Example class with proper formatting package com.bar; /** * License header goes here. */ import com.foo.*; import com.foo.dot.*; import java.util.*; /** * @author john.doe */ public class Foo extends TestCase implements Serializable { private int[] X = new int[]{ 1, 3, 5 7, 9, 11 }; private String[] strings = new String[] { \"Some text\", \"Some other text\", \"And a lot more text\" }; // For short values: @FancyAnnotation(someArrayParameter = { \"foo\", \"bar\" }) private FancyAnnotatedField f1; // Or... for longer values -- a value per line: @FancyAnnotation(someArrayParameter = { \"fooLongFooBarBlahFooBlahFoo\", \"barFooBlahBlahBlahMoreBlahFoo\" }) private FancyAnnotatedField f2; public void setUp() { super.setUp(); } public void test(boolean a, int x, int y, int z) throws Exception { label1: do { try { if (x > 0) { int someVariable = x + y == z ? x + 1: y + 2; } else if (x < 0) { int someVariable = (y + z); someVariable = x = x + y; String string1 = \"This is a long\" + \" string which contains x = \" + x; } else { label2: for (int i = 0; i < 5; i++) { doSomething(i); } } switch (a) { case 0: doCase0(); break; default: doDefault(); } } catch (Exception e) { processException(e.getMessage(), x + y, z, a); } finally { processFinally(); } } if (2 < 3) { return; } if (3 < 4) { return; } else { break; } do { x++; } while (x < 10000); while (x > 0) { System.out.println(x--); } for (int i = 0; i < 5; i++) { System.out.println(i); } for (int i = 0; i < 5; i++) { if (i != 1) { System.out.println(i); } else { System.out.println(\"This is it.\"); } } } private class InnerClass implements I1, I2 { public void bar() throws E1, E2 { System.out.println(\"bar\"); } } }","title":"Code Example"},{"location":"developer-guide/coding-convention.html#code-style-profiles","text":"We have created code style profiles which you can import into your IDE: strongbox-idea.xml strongbox-eclipse.xml","title":"Code style profiles"},{"location":"developer-guide/getting-started-with-persistence.html","text":"Getting started with persistence \u00b6 Abstract \u00b6 This page contains explanations and code samples for developers who need to store their entities into the database. The Strongbox project uses OrientDB as its internal persistent storage through the corresponding JPA implementation and spring-orm middle tier. Also we use JTA for transaction management and spring-tx implementation module from Spring technology stack. OrientDB Studio \u00b6 As you are learning about Strongbox persistence, you may want to explore the existing persistence implementation. For development environments, Strongbox includes an embedded OrientDB server as well as an embedded instance of OrientDB Studio. By default, when you run the application from the source tree, you'll use the embedded database server. However, OrientDB Studio is disabled by default. Running OrientDB Studio From Source Tree \u00b6 To enable OrientDB Studio, you need only to set the property strongbox.orientdb.studio.enabled to true . You can do this on the Maven command line by running Strongbox as follows: $ mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-Dstrongbox.orientdb.studio.enabled=true\" There are two additional properties that can be used to configure OrientDB Studio: strongbox.orientdb.studio.ip.address strongbox.orientdb.studio.port Running OrientDB Studio From The Distribution \u00b6 If you're running from the tar.gz , or rpm distributions, you can start Strongbox as follows to enable OrientDB Studio: $ cd /opt/strongbox $ STRONGBOX_VAULT=/opt/strongbox-vault STRONGBOX_ORIENTDB_STUDIO_ENABLED=true ./bin/strongbox console Please, note that the STRONGBOX_VAULT environment variable needs to be pointing to an absolute path for this to work. As with the source distribution, you can set additional environment variables to further configure OrientDB Studio: $ export STRONGBOX_ORIENTDB_STUDIO_IP_ADDRESS=0.0.0.0 $ export STRONGBOX_ORIENTDB_STUDIO_PORT=2480 Once the application is running, you can login to OrientDB Studio by visiting http://127.0.0.1:2480/studio/index.html in your browser. The initial credentials are admin and password . After your login, you'll land on the Browse Screen, which allows you to query the embedded database. Finally, you can explore the schema defined in the database by clicking SCHEMA . Adding Dependencies \u00b6 Let's assume that you, as a Strongbox developer, need to create a new module or write some persistence code in an existing module that does not contain any persistence dependencies yet. (Otherwise you will already have the proper <dependencies/> section in your pom.xml , similar to the one in the example below). You will need to add the following code snippet to your module's pom.xml under the <dependencies> section: <dependency> <groupId> ${project.groupId} </groupId> <artifactId> strongbox-data-service </artifactId> <version> ${project.version} </version> </dependency> Notice that there is no need to define any direct dependencies on OrientDB or Spring Data - it's already done via the strongbox-data-service module. Creating Your Entity Class \u00b6 Let's now assume that you have a POJO and you need to save it to the database (and that you probably have at least CRUD operation's implemented in it as well). Place your code under the org.carlspring.strongbox.domain.yourstuff package. For the sake of the example, let's pick MyEntity as the name of your entity. If you want to store that entity properly you need to adopt the following rules: Extend the org.carlspring.strongbox.data.domain.GenericEntity class to inherit all required fields and logic from the superclass. Define getters and setters according to the JavaBeans coding convention for all non-transient properties in your class. Define a default empty constructor for safety (even if the compiler will create one for you, if you don't define any other constructors) and follow the JPA and java.io.Serializable standards. Override the equals() and hashCode() methods according to java hashCode contract (because your entity could be used in collection classes such as java.util.Set and if you don't define such methods properly other developers or yourself will be not able to use your entity). Optional - define a toString() implementation to let yourself and other developers see something meaningful in the debug messages. The complete source code example that follows all requirements should look something like this: package org.carlspring.strongbox.domain ; import org.carlspring.strongbox.data.domain.GenericEntity ; import com.google.common.base.Objects ; public class MyEntity extends GenericEntity { private String property ; public MyEntity () { } public String getProperty () { return property ; } public void setProperty ( String property ) { this . property = property ; } @Override public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null || getClass () != o . getClass ()) { return false ; } MyEntity myEntity = ( MyEntity ) o ; return Objects . equal ( property , myEntity . property ); } @Override public int hashCode () { return Objects . hashCode ( property ); } @Override public String toString () { final StringBuilder sb = new StringBuilder ( \"MyEntity{\" ); sb . append ( \"property='\" ). append ( property ). append ( '\\'' ); sb . append ( '}' ); return sb . toString (); } } Creating a DAO Layer \u00b6 First of all you will need to extend the CrudService with the second type parameter that corresponds to your ID's data type. Usually it's just strings. To read more about ID's in OrientDB, check the manual package org.carlspring.strongbox.users.service ; import org.carlspring.strongbox.data.service.CrudService ; import org.carlspring.strongbox.users.domain.MyEntity ; import org.springframework.transaction.annotation.Transactional ; /** * CRUD service for managing {@link MyEntity} entities. * * @author Alex Oreshkevich */ @Transactional public interface MyEntityService extends CrudService < MyEntity , String > { MyEntity findByProperty ( String property ); } After that you will need to define an implementation of your service class. Follow these rules for the service implementation: Inherit your CRUD service from CommonCrudService<MyEntity> class; Name it like your service interface with an Impl suffix, for example MyEntityServiceImpl ; Annotate your class with the Spring @Service and @Transactional annotations; Do not define your service class as public and use interface instead of class for injection (with @Autowired ); this follows the best practice principles from Joshua Bloch 'Effective Java' book called Programming to Interface; Optional - define any methods you need to work with your MyEntity class; these methods mostly should be based on common API form javax.persistence.EntityManager , or custom queries (see example below); Avoid query parameters construction through string concatenation! Please avoid using query parameter construction through string concatenation! This usually leads to SQL Injection issues! Bad query example: String sQuery = \"select * from MyEntity where proprety='\" + propertyValue + \"'\" ; What you should do instead is to create a service which does properly assigns the parameters. Here's an example service: @Transactional public class MyEntityServiceImpl extends CommonCrudService < MyEntity > implements MyEntityService { public MyEntity findByProperty ( String property ) { String sQuery = \"select * from MyEntity where property = :propertyValue\" ; OSQLSynchQuery < Long > oQuery = new OSQLSynchQuery < Long > ( sQuery ); oQuery . setLimit ( 1 ); HashMap < String , String > params = new HashMap < String , String > (); params . put ( \"propertyValue\" , property ); List < MyEntity > resultList = getDelegate (). command ( oQuery ). execute ( params ); return ! resultList . isEmpty () ? resultList . iterator (). next () : null ; } } Register entity schema in EntityManager \u00b6 Before using entities you will need to register them. Consider the following example: @Inject private OEntityManager oEntityManager ; @PostConstruct public void init () { oEntityManager . registerEntityClass ( MyEntity . class ); }","title":"Getting started with persistence"},{"location":"developer-guide/getting-started-with-persistence.html#getting-started-with-persistence","text":"","title":"Getting started with persistence"},{"location":"developer-guide/getting-started-with-persistence.html#abstract","text":"This page contains explanations and code samples for developers who need to store their entities into the database. The Strongbox project uses OrientDB as its internal persistent storage through the corresponding JPA implementation and spring-orm middle tier. Also we use JTA for transaction management and spring-tx implementation module from Spring technology stack.","title":"Abstract"},{"location":"developer-guide/getting-started-with-persistence.html#orientdb-studio","text":"As you are learning about Strongbox persistence, you may want to explore the existing persistence implementation. For development environments, Strongbox includes an embedded OrientDB server as well as an embedded instance of OrientDB Studio. By default, when you run the application from the source tree, you'll use the embedded database server. However, OrientDB Studio is disabled by default.","title":"OrientDB Studio"},{"location":"developer-guide/getting-started-with-persistence.html#running-orientdb-studio-from-source-tree","text":"To enable OrientDB Studio, you need only to set the property strongbox.orientdb.studio.enabled to true . You can do this on the Maven command line by running Strongbox as follows: $ mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-Dstrongbox.orientdb.studio.enabled=true\" There are two additional properties that can be used to configure OrientDB Studio: strongbox.orientdb.studio.ip.address strongbox.orientdb.studio.port","title":"Running OrientDB Studio From Source Tree"},{"location":"developer-guide/getting-started-with-persistence.html#running-orientdb-studio-from-the-distribution","text":"If you're running from the tar.gz , or rpm distributions, you can start Strongbox as follows to enable OrientDB Studio: $ cd /opt/strongbox $ STRONGBOX_VAULT=/opt/strongbox-vault STRONGBOX_ORIENTDB_STUDIO_ENABLED=true ./bin/strongbox console Please, note that the STRONGBOX_VAULT environment variable needs to be pointing to an absolute path for this to work. As with the source distribution, you can set additional environment variables to further configure OrientDB Studio: $ export STRONGBOX_ORIENTDB_STUDIO_IP_ADDRESS=0.0.0.0 $ export STRONGBOX_ORIENTDB_STUDIO_PORT=2480 Once the application is running, you can login to OrientDB Studio by visiting http://127.0.0.1:2480/studio/index.html in your browser. The initial credentials are admin and password . After your login, you'll land on the Browse Screen, which allows you to query the embedded database. Finally, you can explore the schema defined in the database by clicking SCHEMA .","title":"Running OrientDB Studio From The Distribution"},{"location":"developer-guide/getting-started-with-persistence.html#adding-dependencies","text":"Let's assume that you, as a Strongbox developer, need to create a new module or write some persistence code in an existing module that does not contain any persistence dependencies yet. (Otherwise you will already have the proper <dependencies/> section in your pom.xml , similar to the one in the example below). You will need to add the following code snippet to your module's pom.xml under the <dependencies> section: <dependency> <groupId> ${project.groupId} </groupId> <artifactId> strongbox-data-service </artifactId> <version> ${project.version} </version> </dependency> Notice that there is no need to define any direct dependencies on OrientDB or Spring Data - it's already done via the strongbox-data-service module.","title":"Adding Dependencies"},{"location":"developer-guide/getting-started-with-persistence.html#creating-your-entity-class","text":"Let's now assume that you have a POJO and you need to save it to the database (and that you probably have at least CRUD operation's implemented in it as well). Place your code under the org.carlspring.strongbox.domain.yourstuff package. For the sake of the example, let's pick MyEntity as the name of your entity. If you want to store that entity properly you need to adopt the following rules: Extend the org.carlspring.strongbox.data.domain.GenericEntity class to inherit all required fields and logic from the superclass. Define getters and setters according to the JavaBeans coding convention for all non-transient properties in your class. Define a default empty constructor for safety (even if the compiler will create one for you, if you don't define any other constructors) and follow the JPA and java.io.Serializable standards. Override the equals() and hashCode() methods according to java hashCode contract (because your entity could be used in collection classes such as java.util.Set and if you don't define such methods properly other developers or yourself will be not able to use your entity). Optional - define a toString() implementation to let yourself and other developers see something meaningful in the debug messages. The complete source code example that follows all requirements should look something like this: package org.carlspring.strongbox.domain ; import org.carlspring.strongbox.data.domain.GenericEntity ; import com.google.common.base.Objects ; public class MyEntity extends GenericEntity { private String property ; public MyEntity () { } public String getProperty () { return property ; } public void setProperty ( String property ) { this . property = property ; } @Override public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null || getClass () != o . getClass ()) { return false ; } MyEntity myEntity = ( MyEntity ) o ; return Objects . equal ( property , myEntity . property ); } @Override public int hashCode () { return Objects . hashCode ( property ); } @Override public String toString () { final StringBuilder sb = new StringBuilder ( \"MyEntity{\" ); sb . append ( \"property='\" ). append ( property ). append ( '\\'' ); sb . append ( '}' ); return sb . toString (); } }","title":"Creating Your Entity Class"},{"location":"developer-guide/getting-started-with-persistence.html#creating-a-dao-layer","text":"First of all you will need to extend the CrudService with the second type parameter that corresponds to your ID's data type. Usually it's just strings. To read more about ID's in OrientDB, check the manual package org.carlspring.strongbox.users.service ; import org.carlspring.strongbox.data.service.CrudService ; import org.carlspring.strongbox.users.domain.MyEntity ; import org.springframework.transaction.annotation.Transactional ; /** * CRUD service for managing {@link MyEntity} entities. * * @author Alex Oreshkevich */ @Transactional public interface MyEntityService extends CrudService < MyEntity , String > { MyEntity findByProperty ( String property ); } After that you will need to define an implementation of your service class. Follow these rules for the service implementation: Inherit your CRUD service from CommonCrudService<MyEntity> class; Name it like your service interface with an Impl suffix, for example MyEntityServiceImpl ; Annotate your class with the Spring @Service and @Transactional annotations; Do not define your service class as public and use interface instead of class for injection (with @Autowired ); this follows the best practice principles from Joshua Bloch 'Effective Java' book called Programming to Interface; Optional - define any methods you need to work with your MyEntity class; these methods mostly should be based on common API form javax.persistence.EntityManager , or custom queries (see example below); Avoid query parameters construction through string concatenation! Please avoid using query parameter construction through string concatenation! This usually leads to SQL Injection issues! Bad query example: String sQuery = \"select * from MyEntity where proprety='\" + propertyValue + \"'\" ; What you should do instead is to create a service which does properly assigns the parameters. Here's an example service: @Transactional public class MyEntityServiceImpl extends CommonCrudService < MyEntity > implements MyEntityService { public MyEntity findByProperty ( String property ) { String sQuery = \"select * from MyEntity where property = :propertyValue\" ; OSQLSynchQuery < Long > oQuery = new OSQLSynchQuery < Long > ( sQuery ); oQuery . setLimit ( 1 ); HashMap < String , String > params = new HashMap < String , String > (); params . put ( \"propertyValue\" , property ); List < MyEntity > resultList = getDelegate (). command ( oQuery ). execute ( params ); return ! resultList . isEmpty () ? resultList . iterator (). next () : null ; } }","title":"Creating a DAO Layer"},{"location":"developer-guide/getting-started-with-persistence.html#register-entity-schema-in-entitymanager","text":"Before using entities you will need to register them. Consider the following example: @Inject private OEntityManager oEntityManager ; @PostConstruct public void init () { oEntityManager . registerEntityClass ( MyEntity . class ); }","title":"Register entity schema in EntityManager"},{"location":"developer-guide/getting-started.html","text":"Getting started (Developer) \u00b6 Pre-requisites \u00b6 Maven 3.6.3+ OpenJDK 1.8 , or OracleJDK 1.8 build >= 222 (JDK versions other than 8 will not work yet) Git installed and in your PATH variable System Requirements \u00b6 In order to build Strongbox in reasonably short times you need: At least 16 GB RAM Minimum 2 cores / 4 threads (recommended: 4 cores / 8 threads or more) An SSD Before you continue \u00b6 Please, place this settings.xml file under your ~/.m2 directory. We have dependencies which are only available through our repository and if you skip this it will cause build failure. Linux 1 2 3 mkdir ~/.m2 curl -o ~/.m2/settings.xml \\ https://strongbox.github.io/assets/resources/maven/settings.xml Windows 1 2 3 mkdir %HOMEPATH%\\.m2 curl -o %HOMEPATH%\\.m2\\settings.xml ^ https://strongbox.github.io/assets/resources/maven/settings.xml Tip You can use a different location to save our settings.xml . For example, you could save it as ~/.m2/settings-strongbox.xml and then specify this path when executing maven commands: mvn -s ~/.m2/settings-strongbox.xml clean install","title":"Getting started"},{"location":"developer-guide/getting-started.html#getting-started-developer","text":"","title":"Getting started (Developer)"},{"location":"developer-guide/getting-started.html#pre-requisites","text":"Maven 3.6.3+ OpenJDK 1.8 , or OracleJDK 1.8 build >= 222 (JDK versions other than 8 will not work yet) Git installed and in your PATH variable","title":"Pre-requisites"},{"location":"developer-guide/getting-started.html#system-requirements","text":"In order to build Strongbox in reasonably short times you need: At least 16 GB RAM Minimum 2 cores / 4 threads (recommended: 4 cores / 8 threads or more) An SSD","title":"System Requirements"},{"location":"developer-guide/getting-started.html#before-you-continue","text":"Please, place this settings.xml file under your ~/.m2 directory. We have dependencies which are only available through our repository and if you skip this it will cause build failure. Linux 1 2 3 mkdir ~/.m2 curl -o ~/.m2/settings.xml \\ https://strongbox.github.io/assets/resources/maven/settings.xml Windows 1 2 3 mkdir %HOMEPATH%\\.m2 curl -o %HOMEPATH%\\.m2\\settings.xml ^ https://strongbox.github.io/assets/resources/maven/settings.xml Tip You can use a different location to save our settings.xml . For example, you could save it as ~/.m2/settings-strongbox.xml and then specify this path when executing maven commands: mvn -s ~/.m2/settings-strongbox.xml clean install","title":"Before you continue"},{"location":"developer-guide/how-to-gather-requirements.html","text":"How To Gather Requirements And Keep Issues In An Easy For Handover State \u00b6 Gathering requirements is of key importance when you need to plan, organize and distribute work. When raising issues and tasks in an issue tracker, it's important to be able to describe in a clear and concise way what needs to be done, so that anyone in the team could pick up the work and have as much information and resources, as necessary in order to be able to work out the finer details independently. When the overall duration of the task is estimated to be long, it's important to have clarity on what the list of sub-tasks is and to keep the progress visible, so that others could join in and easily help push things forward without overlapping efforts, or the need for lengthy explanations on how they can help. This could be crucial, if the completion of the task is required in a significantly shorted time-frame. Also, as we all know, everything happens in life (people get, go on vacation, or quit) and without such clarity, it would take an additional effort to evaluate the progress of the task, should the original assignee be re-assigned, or not be able to complete the work. For smooth development we need to be able to have two things: A stable master (building fine without failing tests) Continuity in case someone on the core team falls sick, has finished working on the project for the day, or next few days and has either broken the master , or been in the middle of an urgent investigation which someone else will need to continue in their absense This is a short list of things to keep in mind when gathering requirements, so that they could be well defined and easy to handover: (Recommended) Make a rough outline of a the problem (use bullet points to force yourself to be brief, but at the same time try to provide a sufficiently clear explanation) As soon as you have gained an initial understanding of the overall task, try to outline the main parts of the work that needs to be done, so that you could later dive into the the finer details. (Recommended) Expand on each bullet point with sub-points, until the amount of detail is sufficient, but stick to the point and don't add excessive details This will help improve the understanding of what needs to be done and provide more granularity. (Recommended) Outline the points of contact (requested by, SME(s) on this topic, mailing lists, forums) This will help you find more information, or get hints. Feel free to ask questions on Stackoverflow, there are many people out there who could help, or provide a different angle to view things from. (Recommended) Gather a list of useful links This is extremely important for continuity and handovers, as it will help others get up to speed with what you already know. (Recommended) Gather a list of documentation resources that will need to be updated, (if any) Our documentation needs to be continuously improved and we can't rely on others documenting things for us. (Recommended) Link related tasks When you have related tasks, this helps keep track of what needs to be done as next steps in order to complete a certain feature and not lose track of the follow-up tasks. (Recommended) Outline the testing strategy, (if any) This will help understand what needs to be checked in order to consider the fix, or feature ready for merging. (Optional) Have a brief \"definition of done\" Some tasks might not involve testing and this would help understand where to draw the line and consider the work finished. Sometimes a task needs more work after the testing phase is complete. For example, you might need to switch, or updated URL-s, trigger a build of another project, or something else along these lines. In such cases, this sort of section would be quite useful. (Recommended) Use task lists to tick out things that have been done and what you're working on (by either adding a comment next to the task, or putting (in progress) next to it, so that there is clarity where the overall task stands and how it's progressing Doing this allows everyone to have an understanding of what exactly is finished and where a given task stands. It helps identify parts of the overall task where others can join in and help speed up the progress. This also helps maintain a good morale, as there is a psycholofical aspect to it: if your task list consists of three tasks that take six weeks, it might seem that you're stuck, or not progressing, when, in fact you've actually done fifty tasks which nobody knows (or will ever know) about. If you had added those tasks to the check list, it would be apparent how much work you have really done and you will be able to show it clearly. It's up to you what you add to this check list. Try to add visible tasks, but don't be excessive and add tasks that would take extra small/trivial tasks that'll take five-ten minutes to do. (Recommended) When the requirements are gathered, identify the larger pieces of work and split them into new tasks, if necessary (repeat the requirements gathering process and apply it to them as necessary) As work progresses on a given task, sometimes new requirements pop up that will increase the time required to complete. When it makes sense, extract the work into separate new tasks. Keeping the overall task as something easy to achieve, improves the morale, as it increases the sense of achievement. Lenghty tasks have the following undesired side-effects: Reviewing the code will take a while You might have to rebase several times and waste time resolving conflicts (Recommended) Continuously add useful commands and output (when working on the task) This will help other people join in and help you, or continue your work, if necessary. It will also help you not waste time to figure out that three line script you knocked up yesterday that you used to check some data. Here are some example tasks that follow these principles: #1056 , #1130 , #1165 .","title":"How To Gather Requirements"},{"location":"developer-guide/how-to-gather-requirements.html#how-to-gather-requirements-and-keep-issues-in-an-easy-for-handover-state","text":"Gathering requirements is of key importance when you need to plan, organize and distribute work. When raising issues and tasks in an issue tracker, it's important to be able to describe in a clear and concise way what needs to be done, so that anyone in the team could pick up the work and have as much information and resources, as necessary in order to be able to work out the finer details independently. When the overall duration of the task is estimated to be long, it's important to have clarity on what the list of sub-tasks is and to keep the progress visible, so that others could join in and easily help push things forward without overlapping efforts, or the need for lengthy explanations on how they can help. This could be crucial, if the completion of the task is required in a significantly shorted time-frame. Also, as we all know, everything happens in life (people get, go on vacation, or quit) and without such clarity, it would take an additional effort to evaluate the progress of the task, should the original assignee be re-assigned, or not be able to complete the work. For smooth development we need to be able to have two things: A stable master (building fine without failing tests) Continuity in case someone on the core team falls sick, has finished working on the project for the day, or next few days and has either broken the master , or been in the middle of an urgent investigation which someone else will need to continue in their absense This is a short list of things to keep in mind when gathering requirements, so that they could be well defined and easy to handover: (Recommended) Make a rough outline of a the problem (use bullet points to force yourself to be brief, but at the same time try to provide a sufficiently clear explanation) As soon as you have gained an initial understanding of the overall task, try to outline the main parts of the work that needs to be done, so that you could later dive into the the finer details. (Recommended) Expand on each bullet point with sub-points, until the amount of detail is sufficient, but stick to the point and don't add excessive details This will help improve the understanding of what needs to be done and provide more granularity. (Recommended) Outline the points of contact (requested by, SME(s) on this topic, mailing lists, forums) This will help you find more information, or get hints. Feel free to ask questions on Stackoverflow, there are many people out there who could help, or provide a different angle to view things from. (Recommended) Gather a list of useful links This is extremely important for continuity and handovers, as it will help others get up to speed with what you already know. (Recommended) Gather a list of documentation resources that will need to be updated, (if any) Our documentation needs to be continuously improved and we can't rely on others documenting things for us. (Recommended) Link related tasks When you have related tasks, this helps keep track of what needs to be done as next steps in order to complete a certain feature and not lose track of the follow-up tasks. (Recommended) Outline the testing strategy, (if any) This will help understand what needs to be checked in order to consider the fix, or feature ready for merging. (Optional) Have a brief \"definition of done\" Some tasks might not involve testing and this would help understand where to draw the line and consider the work finished. Sometimes a task needs more work after the testing phase is complete. For example, you might need to switch, or updated URL-s, trigger a build of another project, or something else along these lines. In such cases, this sort of section would be quite useful. (Recommended) Use task lists to tick out things that have been done and what you're working on (by either adding a comment next to the task, or putting (in progress) next to it, so that there is clarity where the overall task stands and how it's progressing Doing this allows everyone to have an understanding of what exactly is finished and where a given task stands. It helps identify parts of the overall task where others can join in and help speed up the progress. This also helps maintain a good morale, as there is a psycholofical aspect to it: if your task list consists of three tasks that take six weeks, it might seem that you're stuck, or not progressing, when, in fact you've actually done fifty tasks which nobody knows (or will ever know) about. If you had added those tasks to the check list, it would be apparent how much work you have really done and you will be able to show it clearly. It's up to you what you add to this check list. Try to add visible tasks, but don't be excessive and add tasks that would take extra small/trivial tasks that'll take five-ten minutes to do. (Recommended) When the requirements are gathered, identify the larger pieces of work and split them into new tasks, if necessary (repeat the requirements gathering process and apply it to them as necessary) As work progresses on a given task, sometimes new requirements pop up that will increase the time required to complete. When it makes sense, extract the work into separate new tasks. Keeping the overall task as something easy to achieve, improves the morale, as it increases the sense of achievement. Lenghty tasks have the following undesired side-effects: Reviewing the code will take a while You might have to rebase several times and waste time resolving conflicts (Recommended) Continuously add useful commands and output (when working on the task) This will help other people join in and help you, or continue your work, if necessary. It will also help you not waste time to figure out that three line script you knocked up yesterday that you used to check some data. Here are some example tasks that follow these principles: #1056 , #1130 , #1165 .","title":"How To Gather Requirements And Keep Issues In An Easy For Handover State"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html","text":"Custom Authenticator \u00b6 Is There A Simple Example Project? \u00b6 Yes, you can checkout out the strongbox-authentication-example project. What Dependencies Do I Need? \u00b6 In your project you will need to add the following dependency: <dependencies> <dependency> <groupId> org.carlspring.strongbox </groupId> <artifactId> strongbox-authentication-api </artifactId> <version> ${version.strongbox} </version> </dependency> </dependencies> What Do I Need To Implement? \u00b6 Create an implementation of AuthenticationProvider . The purpose of this class is to process a specific Authentication implementation and return a fully authenticated object including credentials. You can find a simple example of this in the EmptyAuthenticationProviderComponent . Create an implementation of Authenticator . This is the core API interface that delivers AuthenticationProvider and a name used for recognition. You can find a simple example of this in the [EmptyAuthenticator]. My Implementation Is Ready, Now What? \u00b6 Build your code: mvn clean package Copy the produced jar file to the strongbox/webapp/WEB-INF/lib directory under your Strongbox distribution. Final Notes \u00b6 Please remember that Authenticator implementations have to be Spring @Components . They are scanned by the Spring mechanisms to load fresh Application Context in the start time, or in the runtime (on reload request). There are already a large number of existing AuthenticationProvider implementations for various needs, which are ready for use. See Also \u00b6 Strongbox Authentication Example [The strongbox\u2010authentication\u2010providers.xml File] Spring JavaDocs: AuthenticationProvider TODO: fix links","title":"Writing custom authenticator"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#custom-authenticator","text":"","title":"Custom Authenticator"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#is-there-a-simple-example-project","text":"Yes, you can checkout out the strongbox-authentication-example project.","title":"Is There A Simple Example Project?"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#what-dependencies-do-i-need","text":"In your project you will need to add the following dependency: <dependencies> <dependency> <groupId> org.carlspring.strongbox </groupId> <artifactId> strongbox-authentication-api </artifactId> <version> ${version.strongbox} </version> </dependency> </dependencies>","title":"What Dependencies Do I Need?"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#what-do-i-need-to-implement","text":"Create an implementation of AuthenticationProvider . The purpose of this class is to process a specific Authentication implementation and return a fully authenticated object including credentials. You can find a simple example of this in the EmptyAuthenticationProviderComponent . Create an implementation of Authenticator . This is the core API interface that delivers AuthenticationProvider and a name used for recognition. You can find a simple example of this in the [EmptyAuthenticator].","title":"What Do I Need To Implement?"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#my-implementation-is-ready-now-what","text":"Build your code: mvn clean package Copy the produced jar file to the strongbox/webapp/WEB-INF/lib directory under your Strongbox distribution.","title":"My Implementation Is Ready, Now What?"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#final-notes","text":"Please remember that Authenticator implementations have to be Spring @Components . They are scanned by the Spring mechanisms to load fresh Application Context in the start time, or in the runtime (on reload request). There are already a large number of existing AuthenticationProvider implementations for various needs, which are ready for use.","title":"Final Notes"},{"location":"developer-guide/how-to-implement-a-custom-authenticator.html#see-also","text":"Strongbox Authentication Example [The strongbox\u2010authentication\u2010providers.xml File] Spring JavaDocs: AuthenticationProvider TODO: fix links","title":"See Also"},{"location":"developer-guide/how-to-implement-spring-controllers.html","text":"How to implement controllers \u00b6 Preface \u00b6 This guideline aims to outline some of the basic expectations that must be met before you can commit your code. The scope of this guide are controllers which will be used by the front-end. Controllers which are specific to handling traffic such as downloading/uploading/processing artifacts are out of this scope and need to be discussed before proceeding. In case you have doubts, conflicts or any questions/ideas, please don't hesitate to message us on gitter! The key words \" MUST \", \" MUST NOT \", \" REQUIRED \", \" SHALL \", \" SHALL NOT \", \" SHOULD \", \" SHOULD NOT \", \" RECOMMENDED \", \" MAY \", and \" OPTIONAL \" in this document are to be interpreted as described in RFC 2119 . General rules \u00b6 1. You MUST have your controller stored in ./strongbox-web-core/src/main/java/org/carlspring/strongbox/controllers or a proper sub-directory in that path. 2. You MUST have test cases which cover as much as possible your controller. 3. Your endpoints MUST always be able to produce MediaType.APPLICATION_JSON_VALUE . 4. If your controller/method is going to be processing data submitted by a client, you MUST use Spring Form Validation and follow the Spring Form Validation Rules which also shows an example. 5. You MUST respond with an appropriate status code and successful or failed message when an action has been completed (i.e. user created/updated/deleted). BaseController has already implemented methods for these cases. Status code for successful operations MUST be 200 OK Status code for failed operations SHOULD be 400 Bad Request or any other status code which better describes the issue. When possible, the failure message SHOULD contain some information about why the operation has failed - i.e username already exists. You SHOULD avoid using e.getMessage() because it's not immediately apparent what's wrong and the user might not even know what the exception message means. 5.1 When returning a successful or failed message, you MUST also take into account the request's Accept header and respond with MediaType.APPLICATION_JSON_VALUE for Accept: application/json and MediaType.TEXT_PLAIN_VALUE for Accept: text/plain . Your text/plain response MUST only contain an informative message in the response body as shown in the examples below. Example for text/plain response Client Accept: text/plain and performed operation was successful Status: 200 OK Body: User was successfully created! Client Accept: text/plain and performed operation has failed (i.e. form validation failed or something else happened) Status: 400 Bad Request Body: User cannot be saved because the submitted form contains errors! Client Accept: text/plain and performed operation has failed (i.e. form validation failed or something else happened) Status: 409 Conflict Body: User with the same username has already been registered. Your application/json response MUST contain an informative message and MAY contain additional information (i.e. form errors ) Examples for JSON response Client Accept: application/json and performed operation was successful Status: 200 OK Body: { \"message\": \"User was successfully created!\" } Client Accept: application/json and performed operation has failed because submitted form data was invalid. Status: 400 Bad Request Body: { \"message\": \"User cannot be saved because the submitted form contains errors!\", \"errors\": [ { \"password\": [ \"This field is less than 6 characters long!\", \"This field requires at least 2 capital letters\" ] }, { \"username\": [ \"Username is already registered.\" ] } ] } Client Accept: application/json and performed operation has failed for whatever other reason. Status: 409 Conflict Body: { \"message\": \"User with the same username has already been registered.\" } 6. EntityBody objects SHOULD be stored: in ./strongbox-web-core/src/main/java/org/carlspring/strongbox/controllers/support or a proper sub-directory in that path. in the path/sub-path of the controller - i.e. .../controllers/users/support 7. You SHOULD NOT return status code 500 in a controller, except for cases when it's really unclear what might have gone wrong and that's truly the only reasonable response. 8. When you return JSON and it contains collections - you SHOULD return them as an array of objects and not an object with properties. Doing otherwise will have negative effects because: - In JavaScript {} is considered to be an object and [] is an array. What happens if you return a collection in {} is you end up having an object with properties instead of an array of objects . This could happen if you use Map<String, Collection<String>> or other similar java types in the class you are converting to JSON . - TypeScript has static type-checking and this \"bad\" json requires some ugly coding for the compiler to get the code working. - The UI has form validation and can display collections, but for this to work it requires an array. Receiving \"bad\" json will require converting it from an object with properties to an array of objects so it can work in the frontend. Afterwards it has to be converted back to the old format to be acceptable by the backend for when the form is being submitted to the server. - The UI is using class-transformer which transforms the received JSON into an actual Class so that will be broken as well. In case you have doubts about this - feel free to ask us in gitter ! \"BAD\" JSON - You should avoid this unless it's specifically mentioned in the issue you're doing or there is a very, very good reason for this which has been approved. { \"user\": { \"username\": \"my-user\" \"permissions\": { \"/some/path\": [\"READ\", \"WRITE\"], \"/some/other/path\": [\"READ\"] } } } GOOD JSON { \"user\": { \"username\": \"my-user\" \"permissions\": [ { \"path\": \"/some/path\", \"permissions\": [\"READ\", \"WRITE\"] }, { \"path\": \"/some/other/path\", \"permissions\": [\"READ\"] } ] } } Spring Form Validation Rules \u00b6 These rules are only applied for Controllers which have Spring Form Validation (form validation for short). 1. You MUST store Form classes in ./strongbox-web-core/src/main/java/org/carlspring/strongbox/forms/ or a proper sub-directory in that path. 2. Unless said otherwise, your validation endpoint MUST only consume JSON . 3. You MUST add validation rules to your form fields to avoid saving invalid data. 4. You MUST follow the General Rule #5 and General Rule #5.1 and return a successful or failed message when the form has been processed. If the form is invalid, when returning the failure message you MUST also include errors array which contains the error messages per field (i.e. min length is N but user gave N-1 / field requires int but got string). Check the Examples for JSON response section. 5. In case you are implementing a custom validator - you SHOULD follow the Spring Framework Reference . Example code \u00b6 ExampleController.java package org.carlspring.strongbox.controllers ; import org.carlspring.strongbox.controllers.support.ExampleEntityBody ; import org.carlspring.strongbox.forms.ExampleForm ; import org.carlspring.strongbox.validation.RequestBodyValidationException ; import java.util.Arrays ; import java.util.List ; import io.swagger.annotations.* ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.MediaType ; import org.springframework.http.ResponseEntity ; import org.springframework.validation.BindingResult ; import org.springframework.validation.annotation.Validated ; import org.springframework.web.bind.annotation.* ; /** * This oversimplified example controller is written following the How-To-Implement-Spring-Controllers guide. * It's purpose is entirely educational and is meant to help newcomers. * <p> * https://github.com/strongbox/strongbox/wiki/How-To-Implement-Spring-Controllers * * @author Przemyslaw Fusik * @author Steve Todorov */ @RestController @RequestMapping ( \"/example-controller\" ) @Api ( value = \"/example-controller\" ) public class ExampleController extends BaseController { public static final String NOT_FOUND_MESSAGE = \"Could not find record in database.\" ; @ApiOperation ( value = \"List available examples\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ) }) @GetMapping ( value = \"/all\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity getExamples () { List < String > list = Arrays . asList ( \"a\" , \"foo\" , \"bar\" , \"list\" , \"of\" , \"strings\" ); return getJSONListResponseEntityBody ( \"examples\" , list ); } @ApiOperation ( value = \"Show specific example\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ) }) @GetMapping ( value = \"/get/{example}\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity getExample ( @ApiParam ( value = \"Get a specific example\" , required = true ) @PathVariable String example , @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) { if ( example . equals ( \"not-found\" )) { return getNotFoundResponseEntity ( NOT_FOUND_MESSAGE , accept ); } ExampleEntityBody body = new ExampleEntityBody ( example ); return ResponseEntity . ok ( body ); } @ApiOperation ( value = \"Update example's credentials.\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 400 , message = \"Validation errors occurred\" ) }) @PostMapping ( value = \"/update/{example}\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity updateExample ( @ApiParam ( value = \"Update a specific example using form validation\" , required = true ) @PathVariable String example , @RequestHeader ( HttpHeaders . ACCEPT ) String accept , @RequestBody ( required = false ) @Validated ExampleForm exampleForm , BindingResult bindingResult ) { if ( example . equals ( \"not-found\" )) { return getNotFoundResponseEntity ( NOT_FOUND_MESSAGE , accept ); } // In case of form validation failures - throw a RequestBodyValidationException. // This will be automatically handled afterwards. if ( exampleForm == null ) { throw new RequestBodyValidationException ( \"Empty request body\" , bindingResult ); } if ( bindingResult . hasErrors ()) { throw new RequestBodyValidationException ( \"Validation error\" , bindingResult ); } return getSuccessfulResponseEntity ( \"Credentials have been successfully updated.\" , accept ); } @ApiOperation ( value = \"Delete an example\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 404 , message = \"Example could not be found.\" ) }) @DeleteMapping ( value = \"/delete/{example}\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity deleteExample ( @ApiParam ( value = \"Delete a specific example\" , required = true ) @PathVariable String example , @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) { if ( example . equals ( \"not-found\" )) { return getNotFoundResponseEntity ( NOT_FOUND_MESSAGE , accept ); } return getSuccessfulResponseEntity ( \"example has been successfully deleted.\" , accept ); } @ApiOperation ( value = \"Handling exceptions\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 500 , message = \"Something really bad and unpredictable happened.\" ) }) @GetMapping ( value = \"/handle-exception\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity handleExceptions ( @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) { try { throw new Exception ( \"Something bad happened.\" ); } catch ( Exception e ) { String message = \"This example message will be logged in the logs and sent to the client.\" ; return getExceptionResponseEntity ( HttpStatus . INTERNAL_SERVER_ERROR , message , e , accept ); } } @ApiOperation ( value = \"Handling unhadled exceptions\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 500 , message = \"Something really bad and unpredictable happened.\" ) }) @GetMapping ( value = \"/unhandled-exception\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity unhandledExceptions ( @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) throws Exception { throw new Exception ( \"Something bad happened.\" ); } } ExampleForm.java package org.carlspring.strongbox.forms ; import javax.validation.constraints.NotNull ; import javax.validation.constraints.Pattern ; import javax.validation.constraints.Size ; import javax.xml.bind.annotation.XmlAccessType ; import javax.xml.bind.annotation.XmlAccessorType ; import javax.xml.bind.annotation.XmlRootElement ; /** * @author Przemyslaw Fusik */ @XmlRootElement @XmlAccessorType ( XmlAccessType . FIELD ) public class ExampleForm { @NotNull @Size ( max = 64 ) private String username ; @Size ( min = 6 , message = \"This field is less than 6 characters long!\" ) @Pattern ( regexp = \".*[A-Z].*[A-Z].*\" , message = \"This field requires at least 2 capital letters\" ) private String password ; public String getUsername () { return username ; } public void setUsername ( final String username ) { this . username = username ; } public String getPassword () { return password ; } public void setPassword ( final String password ) { this . password = password ; } } ExampleControllerTest.java package org.carlspring.strongbox.controllers ; import org.carlspring.strongbox.config.IntegrationTest ; import org.carlspring.strongbox.forms.ExampleForm ; import org.carlspring.strongbox.rest.common.RestAssuredBaseTest ; import org.junit.Test ; import org.junit.jupiter.api.extension.ExtendWith ; import org.springframework.http.HttpStatus ; import org.springframework.http.MediaType ; import org.springframework.test.context.junit.jupiter.SpringExtension ; import static io.restassured.module.mockmvc.RestAssuredMockMvc.given ; import static org.hamcrest.CoreMatchers.containsString ; import static org.hamcrest.Matchers.* ; /** * @author Przemyslaw Fusik * @author Steve Todorov */ @IntegrationTest @ExtendWith ( SpringExtension . class ) public class ExampleControllerTest extends RestAssuredBaseTest { @Test public void testGetExamplesResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/all\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"examples\" , hasSize ( greaterThan ( 0 ))); } @Test public void testGetExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/get/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"name\" , not ( nullValue ())); } @Test public void testGetNonExistingJsonExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/get/not-found\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . NOT_FOUND . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testGetNonExistingPlainExampleResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/get/not-found\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . NOT_FOUND . value ()) . body ( containsString ( ExampleController . NOT_FOUND_MESSAGE )); } @Test public void testDeleteExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . delete ( \"/example-controller/delete/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testDeleteNonExistingExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . delete ( \"/example-controller/delete/not-found\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . NOT_FOUND . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testBadFormRequestWithJsonResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"god\" ); given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( \"message\" , not ( nullValue ())) . body ( \"errors\" , hasSize ( greaterThan ( 0 ))); } @Test public void testBadFormRequestWithPlainTextResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"god\" ); given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( containsString ( \"Validation error\" )); } @Test public void testEmptyFormRequestBodyWithJsonResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testEmptyFormRequestBodyWithPlainTextResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( containsString ( \"Empty request body\" )); } @Test public void testValidFormRequestWithJsonResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"abcDEF1234\" ); exampleForm . setUsername ( \"my-username\" ); given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testValidFormRequestWithPlainTextResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"abcDEF1234\" ); exampleForm . setUsername ( \"my-username\" ); given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( containsString ( \"Credentials have been successfully updated\" )); } @Test public void testExceptionHandlingWithJsonResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/handle-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( \"message\" , containsString ( \"This example message will be logged in the logs and sent to the client.\" )); } @Test public void testExceptionHandlingWithPlainTextResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/handle-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( containsString ( \"This example message will be logged in the logs and sent to the client.\" )); } @Test public void testUnhandledExceptionHandlingWithJsonResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/unhandled-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( \"error\" , containsString ( \"Something bad happened.\" )); } @Test public void testUnhandledExceptionHandlingWithPlainTextResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/unhandled-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( containsString ( \"Something bad happened.\" )); } }","title":"Writing controllers"},{"location":"developer-guide/how-to-implement-spring-controllers.html#how-to-implement-controllers","text":"","title":"How to implement controllers"},{"location":"developer-guide/how-to-implement-spring-controllers.html#preface","text":"This guideline aims to outline some of the basic expectations that must be met before you can commit your code. The scope of this guide are controllers which will be used by the front-end. Controllers which are specific to handling traffic such as downloading/uploading/processing artifacts are out of this scope and need to be discussed before proceeding. In case you have doubts, conflicts or any questions/ideas, please don't hesitate to message us on gitter! The key words \" MUST \", \" MUST NOT \", \" REQUIRED \", \" SHALL \", \" SHALL NOT \", \" SHOULD \", \" SHOULD NOT \", \" RECOMMENDED \", \" MAY \", and \" OPTIONAL \" in this document are to be interpreted as described in RFC 2119 .","title":"Preface"},{"location":"developer-guide/how-to-implement-spring-controllers.html#general-rules","text":"1. You MUST have your controller stored in ./strongbox-web-core/src/main/java/org/carlspring/strongbox/controllers or a proper sub-directory in that path. 2. You MUST have test cases which cover as much as possible your controller. 3. Your endpoints MUST always be able to produce MediaType.APPLICATION_JSON_VALUE . 4. If your controller/method is going to be processing data submitted by a client, you MUST use Spring Form Validation and follow the Spring Form Validation Rules which also shows an example. 5. You MUST respond with an appropriate status code and successful or failed message when an action has been completed (i.e. user created/updated/deleted). BaseController has already implemented methods for these cases. Status code for successful operations MUST be 200 OK Status code for failed operations SHOULD be 400 Bad Request or any other status code which better describes the issue. When possible, the failure message SHOULD contain some information about why the operation has failed - i.e username already exists. You SHOULD avoid using e.getMessage() because it's not immediately apparent what's wrong and the user might not even know what the exception message means. 5.1 When returning a successful or failed message, you MUST also take into account the request's Accept header and respond with MediaType.APPLICATION_JSON_VALUE for Accept: application/json and MediaType.TEXT_PLAIN_VALUE for Accept: text/plain . Your text/plain response MUST only contain an informative message in the response body as shown in the examples below. Example for text/plain response Client Accept: text/plain and performed operation was successful Status: 200 OK Body: User was successfully created! Client Accept: text/plain and performed operation has failed (i.e. form validation failed or something else happened) Status: 400 Bad Request Body: User cannot be saved because the submitted form contains errors! Client Accept: text/plain and performed operation has failed (i.e. form validation failed or something else happened) Status: 409 Conflict Body: User with the same username has already been registered. Your application/json response MUST contain an informative message and MAY contain additional information (i.e. form errors ) Examples for JSON response Client Accept: application/json and performed operation was successful Status: 200 OK Body: { \"message\": \"User was successfully created!\" } Client Accept: application/json and performed operation has failed because submitted form data was invalid. Status: 400 Bad Request Body: { \"message\": \"User cannot be saved because the submitted form contains errors!\", \"errors\": [ { \"password\": [ \"This field is less than 6 characters long!\", \"This field requires at least 2 capital letters\" ] }, { \"username\": [ \"Username is already registered.\" ] } ] } Client Accept: application/json and performed operation has failed for whatever other reason. Status: 409 Conflict Body: { \"message\": \"User with the same username has already been registered.\" } 6. EntityBody objects SHOULD be stored: in ./strongbox-web-core/src/main/java/org/carlspring/strongbox/controllers/support or a proper sub-directory in that path. in the path/sub-path of the controller - i.e. .../controllers/users/support 7. You SHOULD NOT return status code 500 in a controller, except for cases when it's really unclear what might have gone wrong and that's truly the only reasonable response. 8. When you return JSON and it contains collections - you SHOULD return them as an array of objects and not an object with properties. Doing otherwise will have negative effects because: - In JavaScript {} is considered to be an object and [] is an array. What happens if you return a collection in {} is you end up having an object with properties instead of an array of objects . This could happen if you use Map<String, Collection<String>> or other similar java types in the class you are converting to JSON . - TypeScript has static type-checking and this \"bad\" json requires some ugly coding for the compiler to get the code working. - The UI has form validation and can display collections, but for this to work it requires an array. Receiving \"bad\" json will require converting it from an object with properties to an array of objects so it can work in the frontend. Afterwards it has to be converted back to the old format to be acceptable by the backend for when the form is being submitted to the server. - The UI is using class-transformer which transforms the received JSON into an actual Class so that will be broken as well. In case you have doubts about this - feel free to ask us in gitter ! \"BAD\" JSON - You should avoid this unless it's specifically mentioned in the issue you're doing or there is a very, very good reason for this which has been approved. { \"user\": { \"username\": \"my-user\" \"permissions\": { \"/some/path\": [\"READ\", \"WRITE\"], \"/some/other/path\": [\"READ\"] } } } GOOD JSON { \"user\": { \"username\": \"my-user\" \"permissions\": [ { \"path\": \"/some/path\", \"permissions\": [\"READ\", \"WRITE\"] }, { \"path\": \"/some/other/path\", \"permissions\": [\"READ\"] } ] } }","title":"General rules"},{"location":"developer-guide/how-to-implement-spring-controllers.html#spring-form-validation-rules","text":"These rules are only applied for Controllers which have Spring Form Validation (form validation for short). 1. You MUST store Form classes in ./strongbox-web-core/src/main/java/org/carlspring/strongbox/forms/ or a proper sub-directory in that path. 2. Unless said otherwise, your validation endpoint MUST only consume JSON . 3. You MUST add validation rules to your form fields to avoid saving invalid data. 4. You MUST follow the General Rule #5 and General Rule #5.1 and return a successful or failed message when the form has been processed. If the form is invalid, when returning the failure message you MUST also include errors array which contains the error messages per field (i.e. min length is N but user gave N-1 / field requires int but got string). Check the Examples for JSON response section. 5. In case you are implementing a custom validator - you SHOULD follow the Spring Framework Reference .","title":"Spring Form Validation Rules"},{"location":"developer-guide/how-to-implement-spring-controllers.html#example-code","text":"ExampleController.java package org.carlspring.strongbox.controllers ; import org.carlspring.strongbox.controllers.support.ExampleEntityBody ; import org.carlspring.strongbox.forms.ExampleForm ; import org.carlspring.strongbox.validation.RequestBodyValidationException ; import java.util.Arrays ; import java.util.List ; import io.swagger.annotations.* ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.MediaType ; import org.springframework.http.ResponseEntity ; import org.springframework.validation.BindingResult ; import org.springframework.validation.annotation.Validated ; import org.springframework.web.bind.annotation.* ; /** * This oversimplified example controller is written following the How-To-Implement-Spring-Controllers guide. * It's purpose is entirely educational and is meant to help newcomers. * <p> * https://github.com/strongbox/strongbox/wiki/How-To-Implement-Spring-Controllers * * @author Przemyslaw Fusik * @author Steve Todorov */ @RestController @RequestMapping ( \"/example-controller\" ) @Api ( value = \"/example-controller\" ) public class ExampleController extends BaseController { public static final String NOT_FOUND_MESSAGE = \"Could not find record in database.\" ; @ApiOperation ( value = \"List available examples\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ) }) @GetMapping ( value = \"/all\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity getExamples () { List < String > list = Arrays . asList ( \"a\" , \"foo\" , \"bar\" , \"list\" , \"of\" , \"strings\" ); return getJSONListResponseEntityBody ( \"examples\" , list ); } @ApiOperation ( value = \"Show specific example\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ) }) @GetMapping ( value = \"/get/{example}\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity getExample ( @ApiParam ( value = \"Get a specific example\" , required = true ) @PathVariable String example , @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) { if ( example . equals ( \"not-found\" )) { return getNotFoundResponseEntity ( NOT_FOUND_MESSAGE , accept ); } ExampleEntityBody body = new ExampleEntityBody ( example ); return ResponseEntity . ok ( body ); } @ApiOperation ( value = \"Update example's credentials.\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 400 , message = \"Validation errors occurred\" ) }) @PostMapping ( value = \"/update/{example}\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity updateExample ( @ApiParam ( value = \"Update a specific example using form validation\" , required = true ) @PathVariable String example , @RequestHeader ( HttpHeaders . ACCEPT ) String accept , @RequestBody ( required = false ) @Validated ExampleForm exampleForm , BindingResult bindingResult ) { if ( example . equals ( \"not-found\" )) { return getNotFoundResponseEntity ( NOT_FOUND_MESSAGE , accept ); } // In case of form validation failures - throw a RequestBodyValidationException. // This will be automatically handled afterwards. if ( exampleForm == null ) { throw new RequestBodyValidationException ( \"Empty request body\" , bindingResult ); } if ( bindingResult . hasErrors ()) { throw new RequestBodyValidationException ( \"Validation error\" , bindingResult ); } return getSuccessfulResponseEntity ( \"Credentials have been successfully updated.\" , accept ); } @ApiOperation ( value = \"Delete an example\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 404 , message = \"Example could not be found.\" ) }) @DeleteMapping ( value = \"/delete/{example}\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity deleteExample ( @ApiParam ( value = \"Delete a specific example\" , required = true ) @PathVariable String example , @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) { if ( example . equals ( \"not-found\" )) { return getNotFoundResponseEntity ( NOT_FOUND_MESSAGE , accept ); } return getSuccessfulResponseEntity ( \"example has been successfully deleted.\" , accept ); } @ApiOperation ( value = \"Handling exceptions\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 500 , message = \"Something really bad and unpredictable happened.\" ) }) @GetMapping ( value = \"/handle-exception\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity handleExceptions ( @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) { try { throw new Exception ( \"Something bad happened.\" ); } catch ( Exception e ) { String message = \"This example message will be logged in the logs and sent to the client.\" ; return getExceptionResponseEntity ( HttpStatus . INTERNAL_SERVER_ERROR , message , e , accept ); } } @ApiOperation ( value = \"Handling unhadled exceptions\" ) @ApiResponses ( value = { @ApiResponse ( code = 200 , message = \"Everything went ok\" ), @ApiResponse ( code = 500 , message = \"Something really bad and unpredictable happened.\" ) }) @GetMapping ( value = \"/unhandled-exception\" , consumes = MediaType . APPLICATION_JSON_VALUE , produces = { MediaType . TEXT_PLAIN_VALUE , MediaType . APPLICATION_JSON_VALUE }) public ResponseEntity unhandledExceptions ( @RequestHeader ( HttpHeaders . ACCEPT ) String accept ) throws Exception { throw new Exception ( \"Something bad happened.\" ); } } ExampleForm.java package org.carlspring.strongbox.forms ; import javax.validation.constraints.NotNull ; import javax.validation.constraints.Pattern ; import javax.validation.constraints.Size ; import javax.xml.bind.annotation.XmlAccessType ; import javax.xml.bind.annotation.XmlAccessorType ; import javax.xml.bind.annotation.XmlRootElement ; /** * @author Przemyslaw Fusik */ @XmlRootElement @XmlAccessorType ( XmlAccessType . FIELD ) public class ExampleForm { @NotNull @Size ( max = 64 ) private String username ; @Size ( min = 6 , message = \"This field is less than 6 characters long!\" ) @Pattern ( regexp = \".*[A-Z].*[A-Z].*\" , message = \"This field requires at least 2 capital letters\" ) private String password ; public String getUsername () { return username ; } public void setUsername ( final String username ) { this . username = username ; } public String getPassword () { return password ; } public void setPassword ( final String password ) { this . password = password ; } } ExampleControllerTest.java package org.carlspring.strongbox.controllers ; import org.carlspring.strongbox.config.IntegrationTest ; import org.carlspring.strongbox.forms.ExampleForm ; import org.carlspring.strongbox.rest.common.RestAssuredBaseTest ; import org.junit.Test ; import org.junit.jupiter.api.extension.ExtendWith ; import org.springframework.http.HttpStatus ; import org.springframework.http.MediaType ; import org.springframework.test.context.junit.jupiter.SpringExtension ; import static io.restassured.module.mockmvc.RestAssuredMockMvc.given ; import static org.hamcrest.CoreMatchers.containsString ; import static org.hamcrest.Matchers.* ; /** * @author Przemyslaw Fusik * @author Steve Todorov */ @IntegrationTest @ExtendWith ( SpringExtension . class ) public class ExampleControllerTest extends RestAssuredBaseTest { @Test public void testGetExamplesResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/all\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"examples\" , hasSize ( greaterThan ( 0 ))); } @Test public void testGetExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/get/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"name\" , not ( nullValue ())); } @Test public void testGetNonExistingJsonExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/get/not-found\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . NOT_FOUND . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testGetNonExistingPlainExampleResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/get/not-found\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . NOT_FOUND . value ()) . body ( containsString ( ExampleController . NOT_FOUND_MESSAGE )); } @Test public void testDeleteExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . delete ( \"/example-controller/delete/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testDeleteNonExistingExampleResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . delete ( \"/example-controller/delete/not-found\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . NOT_FOUND . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testBadFormRequestWithJsonResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"god\" ); given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( \"message\" , not ( nullValue ())) . body ( \"errors\" , hasSize ( greaterThan ( 0 ))); } @Test public void testBadFormRequestWithPlainTextResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"god\" ); given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( containsString ( \"Validation error\" )); } @Test public void testEmptyFormRequestBodyWithJsonResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testEmptyFormRequestBodyWithPlainTextResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . BAD_REQUEST . value ()) . body ( containsString ( \"Empty request body\" )); } @Test public void testValidFormRequestWithJsonResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"abcDEF1234\" ); exampleForm . setUsername ( \"my-username\" ); given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( \"message\" , not ( nullValue ())); } @Test public void testValidFormRequestWithPlainTextResponse () throws Exception { ExampleForm exampleForm = new ExampleForm (); exampleForm . setPassword ( \"abcDEF1234\" ); exampleForm . setUsername ( \"my-username\" ); given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . body ( exampleForm ) . when () . post ( \"/example-controller/update/foo-bar\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . OK . value ()) . body ( containsString ( \"Credentials have been successfully updated\" )); } @Test public void testExceptionHandlingWithJsonResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/handle-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( \"message\" , containsString ( \"This example message will be logged in the logs and sent to the client.\" )); } @Test public void testExceptionHandlingWithPlainTextResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/handle-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( containsString ( \"This example message will be logged in the logs and sent to the client.\" )); } @Test public void testUnhandledExceptionHandlingWithJsonResponse () throws Exception { given (). accept ( MediaType . APPLICATION_JSON_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/unhandled-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( \"error\" , containsString ( \"Something bad happened.\" )); } @Test public void testUnhandledExceptionHandlingWithPlainTextResponse () throws Exception { given (). accept ( MediaType . TEXT_PLAIN_VALUE ) . contentType ( MediaType . APPLICATION_JSON_VALUE ) . when () . get ( \"/example-controller/unhandled-exception\" ) . peek () // Use peek() to print the output . then () . statusCode ( HttpStatus . INTERNAL_SERVER_ERROR . value ()) . body ( containsString ( \"Something bad happened.\" )); } }","title":"Example code"},{"location":"developer-guide/how-to-inspect-a-hazelcast-cache.html","text":"How to inspect a Hazelcast cache \u00b6 Introduction \u00b6 Strongbox uses Hazelcast for caching. While developing it can be useful to get detailed information on the Hazelcast cache clusters. By installing the Hazelcast management center , it is possible to monitor the overall state of Hazelcast clusters, as well as detailed analysis and browsing of data structures in real time, updating map configurations, and taking thread dumps from nodes. Getting the Management Center up and running \u00b6 Download the Hazelcast Management Center from this page . Unpack the ZIP or TAR file locally. For Windows, run start.bat . For Linux, run start.sh . This will start the application using default settings at http://localhost:8080/hazelcast-mancenter . Navigate to http://localhost:8080/hazelcast-mancenter in a browser. You will be prompted for user configuration details. Fill these in and submit. The Management Center is now ready to receive statistics from the Hazelcast cache clusters in Strongbox. Pointing the Strongbox at Management Center \u00b6 Setting the cacheManagerConfiguration.managementCenter.enabled property to true will configure Strongbox to send detailed statistics to the Management Center. By default, Strongbox will use the default URL from above, but this can be overridden by using the cacheManagerConfiguration.managementCenter.url property. Once Strongbox is started, detailed information will be available in the Management Center. Restrictions \u00b6 The open source edition of Hazelcast Management Center can at most be used by three members in the cluster. Refer to the Hazelcast documentation for more information.","title":"Inspecting Hazelcast"},{"location":"developer-guide/how-to-inspect-a-hazelcast-cache.html#how-to-inspect-a-hazelcast-cache","text":"","title":"How to inspect a Hazelcast cache"},{"location":"developer-guide/how-to-inspect-a-hazelcast-cache.html#introduction","text":"Strongbox uses Hazelcast for caching. While developing it can be useful to get detailed information on the Hazelcast cache clusters. By installing the Hazelcast management center , it is possible to monitor the overall state of Hazelcast clusters, as well as detailed analysis and browsing of data structures in real time, updating map configurations, and taking thread dumps from nodes.","title":"Introduction"},{"location":"developer-guide/how-to-inspect-a-hazelcast-cache.html#getting-the-management-center-up-and-running","text":"Download the Hazelcast Management Center from this page . Unpack the ZIP or TAR file locally. For Windows, run start.bat . For Linux, run start.sh . This will start the application using default settings at http://localhost:8080/hazelcast-mancenter . Navigate to http://localhost:8080/hazelcast-mancenter in a browser. You will be prompted for user configuration details. Fill these in and submit. The Management Center is now ready to receive statistics from the Hazelcast cache clusters in Strongbox.","title":"Getting the Management Center up and running"},{"location":"developer-guide/how-to-inspect-a-hazelcast-cache.html#pointing-the-strongbox-at-management-center","text":"Setting the cacheManagerConfiguration.managementCenter.enabled property to true will configure Strongbox to send detailed statistics to the Management Center. By default, Strongbox will use the default URL from above, but this can be overridden by using the cacheManagerConfiguration.managementCenter.url property. Once Strongbox is started, detailed information will be available in the Management Center.","title":"Pointing the Strongbox at Management Center"},{"location":"developer-guide/how-to-inspect-a-hazelcast-cache.html#restrictions","text":"The open source edition of Hazelcast Management Center can at most be used by three members in the cluster. Refer to the Hazelcast documentation for more information.","title":"Restrictions"},{"location":"developer-guide/junit-user-guide.html","text":"JUnit User Guide \u00b6 Intro \u00b6 JUnit is one of the most popular unit-testing frameworks in the Java ecosystem. JUnit 5, which is the next generation of JUnit, promises to be a programmer-friendly testing framework for Java 8. More info on the official user guide . Architecture \u00b6 There are 3 separated modules: JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage JUnit Platform \u00b6 Foundation for launching testing frameworks on the JVM. Defines the TestEngine API for developing a testing framework that runs on the platform. JUnit Jupiter \u00b6 Includes new programming model and extension model for writing tests and extensions in JUnit 5 such as new assertions, new annotations, Java 8 Lambda Expressions, etc. JUnit Vintage \u00b6 Supports running JUnit 3 and JUnit 4 based tests on the JUnit 5 platform. Supported Java Versions \u00b6 JUnit 5 requires Java 8 (or higher) at runtime. However, you can still test code that has been compiled with previous versions of the JDK. Strongbox base classes \u00b6 This project uses multiple base classes depending on the funcionality to test. Integration tests \u00b6 @IntegrationTest is a helper meta annotation for all rest-assured based tests. Specifies tests that require web server and remote HTTP protocol. @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @SpringBootTest ( classes = { StrongboxSpringBootApplication . class , MockedRemoteRepositoriesHeartbeatConfig . class , IntegrationTest . TestConfig . class , RestAssuredConfig . class }) @WebAppConfiguration ( \"classpath:\" ) @WithUserDetails ( value = \"admin\" ) @ActiveProfiles ( profiles = \"test\" ) @TestExecutionListeners ( listeners = { RestAssuredTestExecutionListener . class , CacheManagerTestExecutionListener . class }, mergeMode = TestExecutionListeners . MergeMode . MERGE_WITH_DEFAULTS ) public @interface IntegrationTest { } An example using this annotation would be: @IntegrationTest @ExtendWith ( SpringExtension . class ) public class PingControllerTest extends MavenRestAssuredBaseTest { @Override @BeforeEach public void init () throws Exception { super . init (); setContextBaseUrl ( getContextBaseUrl () + \"/api/ping\" ); } @Test public void testShouldReturnPongText () { given (). header ( HttpHeaders . ACCEPT , MediaType . TEXT_PLAIN_VALUE ) . when () . get ( getContextBaseUrl ()) . peek () . then () . statusCode ( HttpStatus . OK . value ()) . body ( equalTo ( \"pong\" )); } } Layout providers tests \u00b6 We also can test and validate REST services depending on the layout provider. A few base classes with useful methods can be extended, for example: MavenRestAssuredBaseTest for Maven-based tests. NpmRestAssuredBaseTest for npm-based tests. NugetRestAssuredBaseTest for NuGet-based tests. Annotations \u00b6 Annotation Feature description @Test Declares a test method @BeforeAll Denotes that the annotated method will be executed before all test methods in the current class @AfterAll Denotes that the annotated method will be executed after all test methods in the current class @BeforeEach Denotes that the annotated method will be executed before each test method @AfterEach Denotes that the annotated method will be executed after each test method @Disable Disable a test method or a test class @TestFactory Denotes a method is a test factory for dynamic tests @Nested Denotes that the annotated class is a nested, non-static test class @Tag Declare tags for filtering tests @ExtendWith Register custom extensions @RepeatedTest Repeated Tests Assertions \u00b6 We decided to use AssertJ assertions instead of JUnit 5 assertions. For more details, please check the AssertJ user guide article. Tagging and Filtering \u00b6 Use @Tag annotation for tagging and filtering: public class BrowseControllerTest extends MavenRestAssuredBaseTest { @Test @Tag ( \"development\" ) @Tag ( \"production\" ) void testGetStorages ( TestInfo testInfo ) { //run in all environments } } public class TrashControllerTest extends MavenRestAssuredBaseTest { @Test @Tag ( \"development\" ) void testForceDeleteArtifactAllowed ( TestInfo testInfo ) { } } Create test plans \u00b6 You can use @IncludeTags annotations in your test plan to filter tests or include tests. @IntegrationTest @ExtendWith ( SpringExtension . class ) @SelectPackages ( \"org.carlspring.strongbox.controllers\" ) @IncludeTags ( \"production\" ) public class ProductionControllerTest extends MavenRestAssuredBaseTest { } Parameterized Tests \u00b6 JUnit 5 supports parameterized tests by default. This feature allows us to run a test multiple times with different arguments. For example, let\u2019s see the following test: @ParameterizedTest @ValueSource ( strings = { \"plain\" , \"SSL\" , \"tls\" }) void testSmtpConfigurationFormValid ( String connection ) { // given SmtpConfigurationForm smtpConfigurationForm = new SmtpConfigurationForm (); smtpConfigurationForm . setHost ( \"localhost\" ); smtpConfigurationForm . setPort ( 25 ); smtpConfigurationForm . setConnection ( connection ); // when Set < ConstraintViolation < SmtpConfigurationForm >> violations = validator . validate ( smtpConfigurationForm ); // then assertTrue ( violations . isEmpty (), \"Violations are not empty!\" ); } The @ParameterizedTest and @ValueSource annotations make the test can run with each value provided by the @ValueSource annotation. For instance, the console launcher will print output similar to the following: testSmtpConfigurationFormValid(String) \u2714 \u251c\u2500 [1] plain \u2714 \u2514\u2500 [2] SSL \u2714 \u2514\u2500 [3] tls \u2714 Besides the @ValueSource , JUnit 5 provides many kinds of sources can be used with Parameterized Tests such as: @CsvFileSource : lets us use CSV files from the classpath. Each line from a CSV file results in one invocation of the parameterized test. @MethodSource : allows us to refer to one or multiple methods of the test class. Each method must return a Stream, an Iterable, an Iterator, or an array of arguments. @ArgumentsSource : can be used to specify a custom, reusable ArgumentsProvider. @EnumSource : provides a convenient way to use Enum constants. Repeated Tests \u00b6 A new feature in JUnit 5 which allows us to repeat a test in a specified number of times is Repeated Tests. Let\u2019s see an example which declares a test that will be repeated in 100 times: @RepeatedTest ( 100 ) void repeatedTest () { // ... } Dynamic Tests \u00b6 JUnit 5 introduces the concept of Dynamic Tests which are tests that can be generated at runtime by a factory method. Let\u2019s see an example which we generate 2 tests at runtime: @TestFactory Collection < DynamicTest > dynamicTestsFromCollection () { return Arrays . asList ( dynamicTest ( \"1st dynamic test\" , () -> assertTrue ( true )), dynamicTest ( \"2nd dynamic test\" , () -> assertEquals ( 4 , 2 * 2 )) ); } Temp directories \u00b6 The @TempDir annotation is used to create and clean up a temporary directory for an individual test or all tests in a test class. To use it, annotate a non-private field of type java.nio.file.Path or java.io.File with @TempDir or add a parameter of type java.nio.file.Path or java.io.File annotated with @TempDir to a lifecycle method or test method. For example, the following test declares a parameter annotated with @TempDir for a single test method, creates and writes to a file in the temporary directory, and checks its content. @Test void writeItemsToFile ( @TempDir Path tempDir ) throws IOException { Path file = tempDir . resolve ( \"test.txt\" ); new ListWriter ( file ). write ( \"a\" , \"b\" , \"c\" ); assertEquals ( singletonList ( \"a,b,c\" ), Files . readAllLines ( file )); } The following example stores a shared temporary directory in a static field. This allows the same sharedTempDir to be used in all lifecycle methods and test methods of the test class. class SharedTempDirectoryDemo { @TempDir static Path sharedTempDir ; @Test void writeItemsToFile () throws IOException { Path file = sharedTempDir . resolve ( \"test.txt\" ); new ListWriter ( file ). write ( \"a\" , \"b\" , \"c\" ); assertEquals ( singletonList ( \"a,b,c\" ), Files . readAllLines ( file )); } @Test void anotherTestThatUsesTheSameTempDir () { // use sharedTempDir } }","title":"JUnit"},{"location":"developer-guide/junit-user-guide.html#junit-user-guide","text":"","title":"JUnit User Guide"},{"location":"developer-guide/junit-user-guide.html#intro","text":"JUnit is one of the most popular unit-testing frameworks in the Java ecosystem. JUnit 5, which is the next generation of JUnit, promises to be a programmer-friendly testing framework for Java 8. More info on the official user guide .","title":"Intro"},{"location":"developer-guide/junit-user-guide.html#architecture","text":"There are 3 separated modules: JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage","title":"Architecture"},{"location":"developer-guide/junit-user-guide.html#junit-platform","text":"Foundation for launching testing frameworks on the JVM. Defines the TestEngine API for developing a testing framework that runs on the platform.","title":"JUnit Platform"},{"location":"developer-guide/junit-user-guide.html#junit-jupiter","text":"Includes new programming model and extension model for writing tests and extensions in JUnit 5 such as new assertions, new annotations, Java 8 Lambda Expressions, etc.","title":"JUnit Jupiter"},{"location":"developer-guide/junit-user-guide.html#junit-vintage","text":"Supports running JUnit 3 and JUnit 4 based tests on the JUnit 5 platform.","title":"JUnit Vintage"},{"location":"developer-guide/junit-user-guide.html#supported-java-versions","text":"JUnit 5 requires Java 8 (or higher) at runtime. However, you can still test code that has been compiled with previous versions of the JDK.","title":"Supported Java Versions"},{"location":"developer-guide/junit-user-guide.html#strongbox-base-classes","text":"This project uses multiple base classes depending on the funcionality to test.","title":"Strongbox base classes"},{"location":"developer-guide/junit-user-guide.html#integration-tests","text":"@IntegrationTest is a helper meta annotation for all rest-assured based tests. Specifies tests that require web server and remote HTTP protocol. @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @SpringBootTest ( classes = { StrongboxSpringBootApplication . class , MockedRemoteRepositoriesHeartbeatConfig . class , IntegrationTest . TestConfig . class , RestAssuredConfig . class }) @WebAppConfiguration ( \"classpath:\" ) @WithUserDetails ( value = \"admin\" ) @ActiveProfiles ( profiles = \"test\" ) @TestExecutionListeners ( listeners = { RestAssuredTestExecutionListener . class , CacheManagerTestExecutionListener . class }, mergeMode = TestExecutionListeners . MergeMode . MERGE_WITH_DEFAULTS ) public @interface IntegrationTest { } An example using this annotation would be: @IntegrationTest @ExtendWith ( SpringExtension . class ) public class PingControllerTest extends MavenRestAssuredBaseTest { @Override @BeforeEach public void init () throws Exception { super . init (); setContextBaseUrl ( getContextBaseUrl () + \"/api/ping\" ); } @Test public void testShouldReturnPongText () { given (). header ( HttpHeaders . ACCEPT , MediaType . TEXT_PLAIN_VALUE ) . when () . get ( getContextBaseUrl ()) . peek () . then () . statusCode ( HttpStatus . OK . value ()) . body ( equalTo ( \"pong\" )); } }","title":"Integration tests"},{"location":"developer-guide/junit-user-guide.html#layout-providers-tests","text":"We also can test and validate REST services depending on the layout provider. A few base classes with useful methods can be extended, for example: MavenRestAssuredBaseTest for Maven-based tests. NpmRestAssuredBaseTest for npm-based tests. NugetRestAssuredBaseTest for NuGet-based tests.","title":"Layout providers tests"},{"location":"developer-guide/junit-user-guide.html#annotations","text":"Annotation Feature description @Test Declares a test method @BeforeAll Denotes that the annotated method will be executed before all test methods in the current class @AfterAll Denotes that the annotated method will be executed after all test methods in the current class @BeforeEach Denotes that the annotated method will be executed before each test method @AfterEach Denotes that the annotated method will be executed after each test method @Disable Disable a test method or a test class @TestFactory Denotes a method is a test factory for dynamic tests @Nested Denotes that the annotated class is a nested, non-static test class @Tag Declare tags for filtering tests @ExtendWith Register custom extensions @RepeatedTest Repeated Tests","title":"Annotations"},{"location":"developer-guide/junit-user-guide.html#assertions","text":"We decided to use AssertJ assertions instead of JUnit 5 assertions. For more details, please check the AssertJ user guide article.","title":"Assertions"},{"location":"developer-guide/junit-user-guide.html#tagging-and-filtering","text":"Use @Tag annotation for tagging and filtering: public class BrowseControllerTest extends MavenRestAssuredBaseTest { @Test @Tag ( \"development\" ) @Tag ( \"production\" ) void testGetStorages ( TestInfo testInfo ) { //run in all environments } } public class TrashControllerTest extends MavenRestAssuredBaseTest { @Test @Tag ( \"development\" ) void testForceDeleteArtifactAllowed ( TestInfo testInfo ) { } }","title":"Tagging and Filtering"},{"location":"developer-guide/junit-user-guide.html#create-test-plans","text":"You can use @IncludeTags annotations in your test plan to filter tests or include tests. @IntegrationTest @ExtendWith ( SpringExtension . class ) @SelectPackages ( \"org.carlspring.strongbox.controllers\" ) @IncludeTags ( \"production\" ) public class ProductionControllerTest extends MavenRestAssuredBaseTest { }","title":"Create test plans"},{"location":"developer-guide/junit-user-guide.html#parameterized-tests","text":"JUnit 5 supports parameterized tests by default. This feature allows us to run a test multiple times with different arguments. For example, let\u2019s see the following test: @ParameterizedTest @ValueSource ( strings = { \"plain\" , \"SSL\" , \"tls\" }) void testSmtpConfigurationFormValid ( String connection ) { // given SmtpConfigurationForm smtpConfigurationForm = new SmtpConfigurationForm (); smtpConfigurationForm . setHost ( \"localhost\" ); smtpConfigurationForm . setPort ( 25 ); smtpConfigurationForm . setConnection ( connection ); // when Set < ConstraintViolation < SmtpConfigurationForm >> violations = validator . validate ( smtpConfigurationForm ); // then assertTrue ( violations . isEmpty (), \"Violations are not empty!\" ); } The @ParameterizedTest and @ValueSource annotations make the test can run with each value provided by the @ValueSource annotation. For instance, the console launcher will print output similar to the following: testSmtpConfigurationFormValid(String) \u2714 \u251c\u2500 [1] plain \u2714 \u2514\u2500 [2] SSL \u2714 \u2514\u2500 [3] tls \u2714 Besides the @ValueSource , JUnit 5 provides many kinds of sources can be used with Parameterized Tests such as: @CsvFileSource : lets us use CSV files from the classpath. Each line from a CSV file results in one invocation of the parameterized test. @MethodSource : allows us to refer to one or multiple methods of the test class. Each method must return a Stream, an Iterable, an Iterator, or an array of arguments. @ArgumentsSource : can be used to specify a custom, reusable ArgumentsProvider. @EnumSource : provides a convenient way to use Enum constants.","title":"Parameterized Tests"},{"location":"developer-guide/junit-user-guide.html#repeated-tests","text":"A new feature in JUnit 5 which allows us to repeat a test in a specified number of times is Repeated Tests. Let\u2019s see an example which declares a test that will be repeated in 100 times: @RepeatedTest ( 100 ) void repeatedTest () { // ... }","title":"Repeated Tests"},{"location":"developer-guide/junit-user-guide.html#dynamic-tests","text":"JUnit 5 introduces the concept of Dynamic Tests which are tests that can be generated at runtime by a factory method. Let\u2019s see an example which we generate 2 tests at runtime: @TestFactory Collection < DynamicTest > dynamicTestsFromCollection () { return Arrays . asList ( dynamicTest ( \"1st dynamic test\" , () -> assertTrue ( true )), dynamicTest ( \"2nd dynamic test\" , () -> assertEquals ( 4 , 2 * 2 )) ); }","title":"Dynamic Tests"},{"location":"developer-guide/junit-user-guide.html#temp-directories","text":"The @TempDir annotation is used to create and clean up a temporary directory for an individual test or all tests in a test class. To use it, annotate a non-private field of type java.nio.file.Path or java.io.File with @TempDir or add a parameter of type java.nio.file.Path or java.io.File annotated with @TempDir to a lifecycle method or test method. For example, the following test declares a parameter annotated with @TempDir for a single test method, creates and writes to a file in the temporary directory, and checks its content. @Test void writeItemsToFile ( @TempDir Path tempDir ) throws IOException { Path file = tempDir . resolve ( \"test.txt\" ); new ListWriter ( file ). write ( \"a\" , \"b\" , \"c\" ); assertEquals ( singletonList ( \"a,b,c\" ), Files . readAllLines ( file )); } The following example stores a shared temporary directory in a static field. This allows the same sharedTempDir to be used in all lifecycle methods and test methods of the test class. class SharedTempDirectoryDemo { @TempDir static Path sharedTempDir ; @Test void writeItemsToFile () throws IOException { Path file = sharedTempDir . resolve ( \"test.txt\" ); new ListWriter ( file ). write ( \"a\" , \"b\" , \"c\" ); assertEquals ( singletonList ( \"a,b,c\" ), Files . readAllLines ( file )); } @Test void anotherTestThatUsesTheSameTempDir () { // use sharedTempDir } }","title":"Temp directories"},{"location":"developer-guide/maven-indexer.html","text":"Maven Indexer \u00b6 What Is The Maven Indexer? \u00b6 The Maven Indexer is a library created by Sonatype Inc. and contributed to the Apache Maven team. It can produce a Lucene Index and carry out queries against it. This packed index can be downloaded from the repository and be used by: Artifact repository managers Check if a remote host contains an artifact, class, etc Check what versions of an artifact exist IDE-s Resolve dependencies To find out which packages contain the class you would like to import Custom tools How Does The Maven Indexer Work? \u00b6 The Maven Indexer uses: The artifact's .pom file The artifact file itself The artifact's file system path to figure out information about the artifacts which it adds to a Lucene index. This index can then be packed and downloaded by consumers. What Kind Of Information Does The Maven Indexer Keep? \u00b6 The Maven Indexer keeps a record of the following information: Basic artifact file attributes: last modified, file extension, file size Source and/or javadoc existence flags GAV coordinates ( groupId , artifactId , version , packaging , classifier ) SHA-1 checksums (+ whether the related signature file exists) What Artifacts Does The Maven Indexer Index? \u00b6 The indexer will add a record to the Lucene index for every Maven artifact that it recognizes (the file name and artifact path have to match the Maven artifact repository storage rules), regardless of whether or not it has a .pom file. Artifacts that have several classifiers will have all their sub-artifact files added to the index, except a record for the POM. Maven indexer also may or may not store a .pom file as an artifact. However, firstly it tries to find matching real artifact file in the file system, switching over to indexing that, instead of the .pom file. What's not indexable ? \u00b6 The following file types are not indexable: maven-metadata.xml files .properties files checksum and signature files .asc , .md5 , .sha1 What Are Packed Indexes? \u00b6 Packed indexes are either a complete compressed index, or a compressed subset of data which can be applied to an existing index incrementally. What's the goal of packed indexes ? \u00b6 Packed indexes are used for transferring indexes from the remote to the proxy/tool. What Is The Maven Indexer Used For In The Strongbox Project? \u00b6 The Maven Indexer is used for integration with IDE-s. How Does The Maven Indexer Work In Strongbox ? \u00b6 Strongbox allows you to download packed repository Maven Index. Every maven repository with indexing enabled serves the packed Maven Index. Based on the repository type, the index is prepared as follows: Hosted repositories: Strongbox stores the information of uploaded artifacts (in hosted repositories) in the OrientDB database. This Information is used to create the hosted repository Maven Index. Strongbox serves following Maven Indexer Fields in indexer: artifactId; version; classifier; packaging/extension classnames lastModified size signatureExists sha1 sourcesExists javadocExists For each hosted maven repository defined in strongbox there should be a scheduled task configured to rebuild the index (unless you don't want to serve Maven Index for some repository). Rebuild Maven Indexes Cron Job is scheduled at strongbox startup on time specified by the cronExpression value within repositoryConfiguration in strongbox.yaml configuration file for repository with type equal to hosted . The process of rebuilding the hosted repository Maven Index purges previous index and recreates it from scratch using OrientDB to keep more accurate information. Thanks to this the index is up-to-date, as the real server's contents. Proxy repositories: Strongbox fetches the proxy repository Maven Index from remote host, stores it locally and serves it. For each proxy maven repository defined in strongbox there should be a scheduled task configured to re-fetch the index (unless you don't want to serve Maven Index for some repository). Download Remote Maven Index Cron Job is scheduled at strongbox startup on time specified by the cronExpression value within repositoryConfiguration in strongbox.yaml configuration file for repository with type equal to proxy . Strongbox supports incremental proxy repository Maven Index. It means that it will update the index by downloading only the missing Maven Index parts that were not downloaded before. Thanks to this feature, strongbox saves the bandwidth costs. Once the soft parts are downloaded, they are merged with the locally existing part and finally packed. The Maven indexes produced by most public repository managers (such as Maven Central), are usually rebuilt once a week. Group repositories: Strongbox creates the group repository Maven Index by merging their underlying repositories Maven Indexes. This process is recursive meaning that root group repository will contain in the Maven Index all the information stored in every inner and outer vertex repository Maven Index. Merge Maven Group Repository Index Cron Job is scheduled at strongbox startup on time specified by the cronExpression value within repositoryConfiguration in strongbox.yaml configuration file for repository with type equal to group . The process of rebuilding the group repository Maven Index purges previous index and recreates it from scratch to keep more accurate information. Where Are The Maven Indexes Located in Strongbox ? \u00b6 There are two types of Maven Indexer indexes: Local For hosted repositories, this contains the artifacts that have been deployed to this repository. For group repositories, this contains the merged index from the underlying repositories. Remote This is downloaded from the remote repository and contains a complete index of what is available on the remote. Every repository (with enabled indexing) has an index under the strongbox-vault/storages/${storageId}/${repositoryId}/.index directory where the index is located. Hosted repositories: have: Local: strongbox-vault/storages/${storageId}/${repositoryId}/local/.index Proxy repositories have: Remote: strongbox-vault/storages/${storageId}/${repositoryId}/remote/.index Group repositories have: Local: strongbox-vault/storages/${storageId}/${repositoryId}/local/.index How to force to rebuild the repository index ? \u00b6 Use REST API endpoint: POST /api/maven/index/{storageId}/{repositoryId} see also MavenIndexController How to download the packed repository index ? \u00b6 Use REST API endpoint: GET /storages/{storageId}/{repositoryId}/.index/nexus-maven-repository-index.gz see also MavenArtifactController Information For Developers \u00b6 The code for the Maven indexing is located under the strongbox-storage-maven-layout-provider module. See Also \u00b6 Maven Indexer: Github Maven Indexer: About Maven Indexer: Fields Maven Indexer: Core (Notes) Maven Indexer: Examples Maven Indexer: Incremental Downloading Maven Indexing: Indexing (Part I) Maven Indexing: Searching (Part II) Maven Indexing: Packing (Part III) Maven Metadata Stackoverflow: [maven-indexer]","title":"Maven Indexer"},{"location":"developer-guide/maven-indexer.html#maven-indexer","text":"","title":"Maven Indexer"},{"location":"developer-guide/maven-indexer.html#what-is-the-maven-indexer","text":"The Maven Indexer is a library created by Sonatype Inc. and contributed to the Apache Maven team. It can produce a Lucene Index and carry out queries against it. This packed index can be downloaded from the repository and be used by: Artifact repository managers Check if a remote host contains an artifact, class, etc Check what versions of an artifact exist IDE-s Resolve dependencies To find out which packages contain the class you would like to import Custom tools","title":"What Is The Maven Indexer?"},{"location":"developer-guide/maven-indexer.html#how-does-the-maven-indexer-work","text":"The Maven Indexer uses: The artifact's .pom file The artifact file itself The artifact's file system path to figure out information about the artifacts which it adds to a Lucene index. This index can then be packed and downloaded by consumers.","title":"How Does The Maven Indexer Work?"},{"location":"developer-guide/maven-indexer.html#what-kind-of-information-does-the-maven-indexer-keep","text":"The Maven Indexer keeps a record of the following information: Basic artifact file attributes: last modified, file extension, file size Source and/or javadoc existence flags GAV coordinates ( groupId , artifactId , version , packaging , classifier ) SHA-1 checksums (+ whether the related signature file exists)","title":"What Kind Of Information Does The Maven Indexer Keep?"},{"location":"developer-guide/maven-indexer.html#what-artifacts-does-the-maven-indexer-index","text":"The indexer will add a record to the Lucene index for every Maven artifact that it recognizes (the file name and artifact path have to match the Maven artifact repository storage rules), regardless of whether or not it has a .pom file. Artifacts that have several classifiers will have all their sub-artifact files added to the index, except a record for the POM. Maven indexer also may or may not store a .pom file as an artifact. However, firstly it tries to find matching real artifact file in the file system, switching over to indexing that, instead of the .pom file.","title":"What Artifacts Does The Maven Indexer Index?"},{"location":"developer-guide/maven-indexer.html#whats-not-indexable","text":"The following file types are not indexable: maven-metadata.xml files .properties files checksum and signature files .asc , .md5 , .sha1","title":"What's not indexable ?"},{"location":"developer-guide/maven-indexer.html#what-are-packed-indexes","text":"Packed indexes are either a complete compressed index, or a compressed subset of data which can be applied to an existing index incrementally.","title":"What Are Packed Indexes?"},{"location":"developer-guide/maven-indexer.html#whats-the-goal-of-packed-indexes","text":"Packed indexes are used for transferring indexes from the remote to the proxy/tool.","title":"What's the goal of packed indexes ?"},{"location":"developer-guide/maven-indexer.html#what-is-the-maven-indexer-used-for-in-the-strongbox-project","text":"The Maven Indexer is used for integration with IDE-s.","title":"What Is The Maven Indexer Used For In The Strongbox Project?"},{"location":"developer-guide/maven-indexer.html#how-does-the-maven-indexer-work-in-strongbox","text":"Strongbox allows you to download packed repository Maven Index. Every maven repository with indexing enabled serves the packed Maven Index. Based on the repository type, the index is prepared as follows: Hosted repositories: Strongbox stores the information of uploaded artifacts (in hosted repositories) in the OrientDB database. This Information is used to create the hosted repository Maven Index. Strongbox serves following Maven Indexer Fields in indexer: artifactId; version; classifier; packaging/extension classnames lastModified size signatureExists sha1 sourcesExists javadocExists For each hosted maven repository defined in strongbox there should be a scheduled task configured to rebuild the index (unless you don't want to serve Maven Index for some repository). Rebuild Maven Indexes Cron Job is scheduled at strongbox startup on time specified by the cronExpression value within repositoryConfiguration in strongbox.yaml configuration file for repository with type equal to hosted . The process of rebuilding the hosted repository Maven Index purges previous index and recreates it from scratch using OrientDB to keep more accurate information. Thanks to this the index is up-to-date, as the real server's contents. Proxy repositories: Strongbox fetches the proxy repository Maven Index from remote host, stores it locally and serves it. For each proxy maven repository defined in strongbox there should be a scheduled task configured to re-fetch the index (unless you don't want to serve Maven Index for some repository). Download Remote Maven Index Cron Job is scheduled at strongbox startup on time specified by the cronExpression value within repositoryConfiguration in strongbox.yaml configuration file for repository with type equal to proxy . Strongbox supports incremental proxy repository Maven Index. It means that it will update the index by downloading only the missing Maven Index parts that were not downloaded before. Thanks to this feature, strongbox saves the bandwidth costs. Once the soft parts are downloaded, they are merged with the locally existing part and finally packed. The Maven indexes produced by most public repository managers (such as Maven Central), are usually rebuilt once a week. Group repositories: Strongbox creates the group repository Maven Index by merging their underlying repositories Maven Indexes. This process is recursive meaning that root group repository will contain in the Maven Index all the information stored in every inner and outer vertex repository Maven Index. Merge Maven Group Repository Index Cron Job is scheduled at strongbox startup on time specified by the cronExpression value within repositoryConfiguration in strongbox.yaml configuration file for repository with type equal to group . The process of rebuilding the group repository Maven Index purges previous index and recreates it from scratch to keep more accurate information.","title":"How Does The Maven Indexer Work In Strongbox ?"},{"location":"developer-guide/maven-indexer.html#where-are-the-maven-indexes-located-in-strongbox","text":"There are two types of Maven Indexer indexes: Local For hosted repositories, this contains the artifacts that have been deployed to this repository. For group repositories, this contains the merged index from the underlying repositories. Remote This is downloaded from the remote repository and contains a complete index of what is available on the remote. Every repository (with enabled indexing) has an index under the strongbox-vault/storages/${storageId}/${repositoryId}/.index directory where the index is located. Hosted repositories: have: Local: strongbox-vault/storages/${storageId}/${repositoryId}/local/.index Proxy repositories have: Remote: strongbox-vault/storages/${storageId}/${repositoryId}/remote/.index Group repositories have: Local: strongbox-vault/storages/${storageId}/${repositoryId}/local/.index","title":"Where Are The Maven Indexes Located in Strongbox ?"},{"location":"developer-guide/maven-indexer.html#how-to-force-to-rebuild-the-repository-index","text":"Use REST API endpoint: POST /api/maven/index/{storageId}/{repositoryId} see also MavenIndexController","title":"How to force to rebuild the repository index ?"},{"location":"developer-guide/maven-indexer.html#how-to-download-the-packed-repository-index","text":"Use REST API endpoint: GET /storages/{storageId}/{repositoryId}/.index/nexus-maven-repository-index.gz see also MavenArtifactController","title":"How to download the packed repository index ?"},{"location":"developer-guide/maven-indexer.html#information-for-developers","text":"The code for the Maven indexing is located under the strongbox-storage-maven-layout-provider module.","title":"Information For Developers"},{"location":"developer-guide/maven-indexer.html#see-also","text":"Maven Indexer: Github Maven Indexer: About Maven Indexer: Fields Maven Indexer: Core (Notes) Maven Indexer: Examples Maven Indexer: Incremental Downloading Maven Indexing: Indexing (Part I) Maven Indexing: Searching (Part II) Maven Indexing: Packing (Part III) Maven Metadata Stackoverflow: [maven-indexer]","title":"See Also"},{"location":"developer-guide/project-structure.html","text":"Project structure \u00b6 Modules \u00b6 Core Modules \u00b6 All the core modules are located under the Strongbox project. Each of these modules has a README.md file explaining briefly what kind of code contains. New modules should also follow the same format. This is a brief breakdown of the modules: strongbox-aql This is where the Artifact Query Language (AQL) code is located. strongbox-client This is where the artifact client resides. strongbox-commons This is where the most common code that is shared across modules resides. strongbox-configuration Contains configuration parsing related code. strongbox-cron strongbox-cron-api Contains the Cron API code, that is required by custom cron and controller implementations. strongbox-cron-tasks Contains the common built-in cron tasks. strongbox-data-service Contains the base implementation of data service classes. Check the Getting Started With Persistence article for more details. strongbox-distribution This module produces the final distribution binaries for different platforms. The binaries are then made public under the releases section. strongbox-event-api Contains our Event API . strongbox-resources strongbox-common-resources This is the place where common resources which can be used by multiple projects reside. The idea is not have to duplicate things such as logback*xml , keystores and so on across the other modules. These resources are copied using the maven-dependency-plugin . strongbox-storage-api-resources Contains the strongbox.xml configuration file. strongbox-rest-client Contains the REST API client. strongbox-security strongbox-authentication-api strongbox-authentication-providers strongbox-default-authentication-provider strongbox-ldap-authentication-provider strongbox-authentication-registry strongbox-authentication-support strongbox-security-api Contains various security and encryption related classes. strongbox-user-management strongbox-storage Contains the code for the storage related modules. strongbox-storage-api Contains the the storage API. strongbox-storage-core Contains the core classes for the storage API. strongbox-storage-layout-providers strongbox-storage-maven-layout strongbox-maven-metadata-api This is the implementation of the support for the maven-metadata.xml format. strongbox-storage-maven-layout-provider This is the implementation of the Maven Layout Provider . It depends on the strongbox-maven-metadata-api . strongbox-storage-npm-layout-provider This is the implementation of the NPM layout provider . It depends on the strongbox-npm-metadata project. strongbox-storage-nuget-layout-provider This is the implementation of the Nuget layout provider . strongbox-storage-p2-layout-provider This is an incomplete early draft implementation of the P2 OSGi layout provider. This module needs a lot more work, before the P2 layout provider could be usable. strongbox-storage-raw-layout-provider This is the implementation of the Raw layout provider . strongbox-testing Contains various very useful base classes for testing. strongbox-testing-core Contains common testing-related code. strongbox-testing-storage strongbox-testing-web Contains the common restassured configuration for controller tests. strongbox-web-core This is the web module which contains all the controllers. strongbox-web-forms This is the module that contains all the web forms. You might find the Writing Web Form Tests useful. Additional Modules \u00b6 All the Strongbox modules are organized under the Strongbox organization . Creating New Modules/Projects \u00b6 Each new modules needs to extend the strongbox-parent , from where it should be extending the dependencies and the configuration for Maven plugins. Modules should not contain any artifact or plugin versions. All modules need to have a README.md file describing in brief what the module is and give brief pointers on what classes and tests are of primary interest. Each project in the Strongbox organization needs to have a copy of the LICENSE file. Integration Tests \u00b6 Web Integration Tests \u00b6 The web integration tests are located in the strongbox-web-integration-tests project. They are using the maven-invoker-plugin to execute various tests against a Strongbox instance which is started for this purpose. These tests start Maven processes via the maven-invoker-plugin and are literally mimicking Maven behaviour. The outcome of the tests is validated using Groovy scripts. Packaging Modules \u00b6 For a much more lightweight build the modules which carry out the actual packaging into assemblies and distributions, these have been extracted into separate projects under the organization. See Also \u00b6 Writing Tests REST API","title":"Project structure"},{"location":"developer-guide/project-structure.html#project-structure","text":"","title":"Project structure"},{"location":"developer-guide/project-structure.html#modules","text":"","title":"Modules"},{"location":"developer-guide/project-structure.html#core-modules","text":"All the core modules are located under the Strongbox project. Each of these modules has a README.md file explaining briefly what kind of code contains. New modules should also follow the same format. This is a brief breakdown of the modules: strongbox-aql This is where the Artifact Query Language (AQL) code is located. strongbox-client This is where the artifact client resides. strongbox-commons This is where the most common code that is shared across modules resides. strongbox-configuration Contains configuration parsing related code. strongbox-cron strongbox-cron-api Contains the Cron API code, that is required by custom cron and controller implementations. strongbox-cron-tasks Contains the common built-in cron tasks. strongbox-data-service Contains the base implementation of data service classes. Check the Getting Started With Persistence article for more details. strongbox-distribution This module produces the final distribution binaries for different platforms. The binaries are then made public under the releases section. strongbox-event-api Contains our Event API . strongbox-resources strongbox-common-resources This is the place where common resources which can be used by multiple projects reside. The idea is not have to duplicate things such as logback*xml , keystores and so on across the other modules. These resources are copied using the maven-dependency-plugin . strongbox-storage-api-resources Contains the strongbox.xml configuration file. strongbox-rest-client Contains the REST API client. strongbox-security strongbox-authentication-api strongbox-authentication-providers strongbox-default-authentication-provider strongbox-ldap-authentication-provider strongbox-authentication-registry strongbox-authentication-support strongbox-security-api Contains various security and encryption related classes. strongbox-user-management strongbox-storage Contains the code for the storage related modules. strongbox-storage-api Contains the the storage API. strongbox-storage-core Contains the core classes for the storage API. strongbox-storage-layout-providers strongbox-storage-maven-layout strongbox-maven-metadata-api This is the implementation of the support for the maven-metadata.xml format. strongbox-storage-maven-layout-provider This is the implementation of the Maven Layout Provider . It depends on the strongbox-maven-metadata-api . strongbox-storage-npm-layout-provider This is the implementation of the NPM layout provider . It depends on the strongbox-npm-metadata project. strongbox-storage-nuget-layout-provider This is the implementation of the Nuget layout provider . strongbox-storage-p2-layout-provider This is an incomplete early draft implementation of the P2 OSGi layout provider. This module needs a lot more work, before the P2 layout provider could be usable. strongbox-storage-raw-layout-provider This is the implementation of the Raw layout provider . strongbox-testing Contains various very useful base classes for testing. strongbox-testing-core Contains common testing-related code. strongbox-testing-storage strongbox-testing-web Contains the common restassured configuration for controller tests. strongbox-web-core This is the web module which contains all the controllers. strongbox-web-forms This is the module that contains all the web forms. You might find the Writing Web Form Tests useful.","title":"Core Modules"},{"location":"developer-guide/project-structure.html#additional-modules","text":"All the Strongbox modules are organized under the Strongbox organization .","title":"Additional Modules"},{"location":"developer-guide/project-structure.html#creating-new-modulesprojects","text":"Each new modules needs to extend the strongbox-parent , from where it should be extending the dependencies and the configuration for Maven plugins. Modules should not contain any artifact or plugin versions. All modules need to have a README.md file describing in brief what the module is and give brief pointers on what classes and tests are of primary interest. Each project in the Strongbox organization needs to have a copy of the LICENSE file.","title":"Creating New Modules/Projects"},{"location":"developer-guide/project-structure.html#integration-tests","text":"","title":"Integration Tests"},{"location":"developer-guide/project-structure.html#web-integration-tests","text":"The web integration tests are located in the strongbox-web-integration-tests project. They are using the maven-invoker-plugin to execute various tests against a Strongbox instance which is started for this purpose. These tests start Maven processes via the maven-invoker-plugin and are literally mimicking Maven behaviour. The outcome of the tests is validated using Groovy scripts.","title":"Web Integration Tests"},{"location":"developer-guide/project-structure.html#packaging-modules","text":"For a much more lightweight build the modules which carry out the actual packaging into assemblies and distributions, these have been extracted into separate projects under the organization.","title":"Packaging Modules"},{"location":"developer-guide/project-structure.html#see-also","text":"Writing Tests REST API","title":"See Also"},{"location":"developer-guide/search-providers.html","text":"Search Providers \u00b6 Introduction \u00b6 Search providers offer a way to execute searches against different search engines. By default, searches are executed against OrientDB. Implemented Search Providers \u00b6 OrientDbSearchProvider \u00b6 Currently OrientDbSearchProvider is the only one supported search provider and it uses OrientDB. Executing A Search Programmatically \u00b6 OrientDbSearchProvider Example \u00b6 @Inject private ArtifactIndexesService artifactIndexesService ; // Run a search against the database and get a list of // all the artifacts matching this exact GAV String query = \"groupId=org.carlspring.strongbox.searches;\" + \"artifactId=test-project;\" ; SearchRequest request = new SearchRequest ( storageId , repositoryId , query ); try { SearchResults results = artifactSearchService . search ( request ); for ( SearchResult result : results . getResults ()) { String artifactPath = result . getArtifactCoordinates (). toPath (); logger . debug ( \"Artifact path \" + artifactPath ); // Do something else here that is more meaningful } } catch ( SearchException e ) { logger . error ( e . getMessage (), e ); } See Also \u00b6 REST-API","title":"Search Providers"},{"location":"developer-guide/search-providers.html#search-providers","text":"","title":"Search Providers"},{"location":"developer-guide/search-providers.html#introduction","text":"Search providers offer a way to execute searches against different search engines. By default, searches are executed against OrientDB.","title":"Introduction"},{"location":"developer-guide/search-providers.html#implemented-search-providers","text":"","title":"Implemented Search Providers"},{"location":"developer-guide/search-providers.html#orientdbsearchprovider","text":"Currently OrientDbSearchProvider is the only one supported search provider and it uses OrientDB.","title":"OrientDbSearchProvider"},{"location":"developer-guide/search-providers.html#executing-a-search-programmatically","text":"","title":"Executing A Search Programmatically"},{"location":"developer-guide/search-providers.html#orientdbsearchprovider-example","text":"@Inject private ArtifactIndexesService artifactIndexesService ; // Run a search against the database and get a list of // all the artifacts matching this exact GAV String query = \"groupId=org.carlspring.strongbox.searches;\" + \"artifactId=test-project;\" ; SearchRequest request = new SearchRequest ( storageId , repositoryId , query ); try { SearchResults results = artifactSearchService . search ( request ); for ( SearchResult result : results . getResults ()) { String artifactPath = result . getArtifactCoordinates (). toPath (); logger . debug ( \"Artifact path \" + artifactPath ); // Do something else here that is more meaningful } } catch ( SearchException e ) { logger . error ( e . getMessage (), e ); }","title":"OrientDbSearchProvider Example"},{"location":"developer-guide/search-providers.html#see-also","text":"REST-API","title":"See Also"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html","text":"Upgrading Dependencies And Plugins \u00b6 Keeping dependencies up-to-date is a crucial task of our development process. All of our Maven dependencies and plugins are defined via the <dependencyManagement/> and, respectively, <pluginManagement/> sections in our strongbox-parent project. All of our projects inherit this parent and it's important for you to understand how to upgrade dependencies and plugins without breaking the rest of the projects and modules down the line. When a <dependency/> is defined in a <dependencyManagement/> section, the dependency can be defined versionless in any pom.xml file that extends the parent. In addition, you can define dependency <exclusions/> this way too and they will get inherited. Thus, the versions of dependencies can be controlled from one central place. Similarly, when a <plugin/> is defined in a <pluginManagement/> section, the plugin can be defined versionless in any pom.xml file that extends the parent. What's more, you can actually define the <configuration/> of the plugin in the <pluginManagement/> section as well and this will get inherited. Thus, the versions and configurations of plugins can be controlled from one central place. Steps For Upgrading Dependencies And Plugins \u00b6 Here are the steps you will need to follow in order to do so: 1. strongbox-parent \u00b6 Fork the strongbox-parent project and create a new branch named issue-XYZ or issues/XYZ where XYZ is the GitHub issue number (i.e. 12345 ) Change the version of the project to include the branch name or pull request number. For example: INITIAL_VERSION BRANCH_NAME PR_NUMBER REPLACED_VERSION 1.0-SNAPSHOT issue-XYZ N/A 1.0-issue-XYZ-SNAPSHOT 1.0-SNAPSHOT issue-XYZ-deps-upgrade N/A 1.0-issue-XYZ-SNAPSHOT 1.0-SNAPSHOT issues/XYZ N/A 1.0-issues-XYZ-SNAPSHOT 1.0-SNAPSHOT issues/XYZ-deps-upgrade N/A 1.0-issues-XYZ-SNAPSHOT 1.0-SNAPSHOT ** any_branch_name 1234 1.0-PR-1234-SNAPSHOT Note ** Using 1.0-PR-1234-SNAPSHOT versions is not recommended because it's hard to predict which is the next PR number would be. We this for special edge cases and it's highly unlikely you'll need it. Update the version of the respective dependency. Run the following to get the new version of the strongbox-parent installed in your local Maven repository: mvn clean install 2. strongbox \u00b6 Fork the strongbox project and create a new branch named issue-XYZ or issues/XYZ where XYZ is the GitHub issue number (i.e. 12345 ) Change all the parent definitions in the project's pom.xml files to use the new version of parent. Run the following to get the new version of the strongbox installed in your local Maven repository (none of the tests should fail): mvn clean install -Dintegration.tests Check that the strongbox-web-core still works (there should be no start-up errors and you should be able to browse the web application at http://localhost:48080/ : cd strongbox-web-core mvn spring-boot:run Similarly to the above, you will need to check that the strongbox-distribution is still working as expected: cd strongbox-distribution/target tar -zxf *gz cd strongbox-distribution-*/strongbox-*/ bin/strongbox console This will start Strongbox. You will need keep an eye on the log files in another terminal like this: tail -n 500 -F logs/*log For developers under Windows, we would recommend running the same steps either in Git-Bash, or under Cygwin. 3. strongbox-web-integration-tests \u00b6 Run the strongbox-web-integration-tests and make sure that none of them are failing. You will need Docker and docker-compose for this and you can find instructions on how to run these tests in the project's README.md , but this is roughly an overview of the steps: find . -maxdepth 2 -type f -name \"docker-compose.yml\" -exec docker-compose -f {} up \\; If there are issues with the tests in the strongbox-web-integration-tests project, you might have to fix them there as well and raise a pull request for that project. 4. Open a PR \u00b6 If all of the above is successful, please, raise a pull request against the strongbox-parent project. Warning! Please note you MUST wait for the Jenkins job to deploy the artifact BEFORE proceeding with the next step or it will fail complaining it cannot resolve an artifact with version ABC-issue-XYZ-SNAPSHOT ! If all of the above is successful, please, raise a pull request against the strongbox project. The automated checks of this pull request are expected to fail the first time. You will need to contact us either via a comment under the pull request, or by pinging us on our chat channel. Please, note that this pull request will only be required in order for us to check, if the build pipeline is still working properly. Once 13) is confirmed to be successful, you will need to reset the version of the strongbox-parent to what it was previously (and, potentially, in the other Strongbox projects that you may have raised a pull request in). At this point, your pull request in the strongbox project will be closed and all your other pull requests will be accepted and merged. Please, make sure all the steps above work, before raising your pull requests. If the upgrade causes an issue which you can't figure out, please raise the pull requests and try to provide as much information in the issue on our tracker, as possible, so that we could further investigate when we can.","title":"Upgrading Dependencies And Plugins"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html#upgrading-dependencies-and-plugins","text":"Keeping dependencies up-to-date is a crucial task of our development process. All of our Maven dependencies and plugins are defined via the <dependencyManagement/> and, respectively, <pluginManagement/> sections in our strongbox-parent project. All of our projects inherit this parent and it's important for you to understand how to upgrade dependencies and plugins without breaking the rest of the projects and modules down the line. When a <dependency/> is defined in a <dependencyManagement/> section, the dependency can be defined versionless in any pom.xml file that extends the parent. In addition, you can define dependency <exclusions/> this way too and they will get inherited. Thus, the versions of dependencies can be controlled from one central place. Similarly, when a <plugin/> is defined in a <pluginManagement/> section, the plugin can be defined versionless in any pom.xml file that extends the parent. What's more, you can actually define the <configuration/> of the plugin in the <pluginManagement/> section as well and this will get inherited. Thus, the versions and configurations of plugins can be controlled from one central place.","title":"Upgrading Dependencies And Plugins"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html#steps-for-upgrading-dependencies-and-plugins","text":"Here are the steps you will need to follow in order to do so:","title":"Steps For Upgrading Dependencies And Plugins"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html#1-strongbox-parent","text":"Fork the strongbox-parent project and create a new branch named issue-XYZ or issues/XYZ where XYZ is the GitHub issue number (i.e. 12345 ) Change the version of the project to include the branch name or pull request number. For example: INITIAL_VERSION BRANCH_NAME PR_NUMBER REPLACED_VERSION 1.0-SNAPSHOT issue-XYZ N/A 1.0-issue-XYZ-SNAPSHOT 1.0-SNAPSHOT issue-XYZ-deps-upgrade N/A 1.0-issue-XYZ-SNAPSHOT 1.0-SNAPSHOT issues/XYZ N/A 1.0-issues-XYZ-SNAPSHOT 1.0-SNAPSHOT issues/XYZ-deps-upgrade N/A 1.0-issues-XYZ-SNAPSHOT 1.0-SNAPSHOT ** any_branch_name 1234 1.0-PR-1234-SNAPSHOT Note ** Using 1.0-PR-1234-SNAPSHOT versions is not recommended because it's hard to predict which is the next PR number would be. We this for special edge cases and it's highly unlikely you'll need it. Update the version of the respective dependency. Run the following to get the new version of the strongbox-parent installed in your local Maven repository: mvn clean install","title":"1. strongbox-parent"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html#2-strongbox","text":"Fork the strongbox project and create a new branch named issue-XYZ or issues/XYZ where XYZ is the GitHub issue number (i.e. 12345 ) Change all the parent definitions in the project's pom.xml files to use the new version of parent. Run the following to get the new version of the strongbox installed in your local Maven repository (none of the tests should fail): mvn clean install -Dintegration.tests Check that the strongbox-web-core still works (there should be no start-up errors and you should be able to browse the web application at http://localhost:48080/ : cd strongbox-web-core mvn spring-boot:run Similarly to the above, you will need to check that the strongbox-distribution is still working as expected: cd strongbox-distribution/target tar -zxf *gz cd strongbox-distribution-*/strongbox-*/ bin/strongbox console This will start Strongbox. You will need keep an eye on the log files in another terminal like this: tail -n 500 -F logs/*log For developers under Windows, we would recommend running the same steps either in Git-Bash, or under Cygwin.","title":"2. strongbox"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html#3-strongbox-web-integration-tests","text":"Run the strongbox-web-integration-tests and make sure that none of them are failing. You will need Docker and docker-compose for this and you can find instructions on how to run these tests in the project's README.md , but this is roughly an overview of the steps: find . -maxdepth 2 -type f -name \"docker-compose.yml\" -exec docker-compose -f {} up \\; If there are issues with the tests in the strongbox-web-integration-tests project, you might have to fix them there as well and raise a pull request for that project.","title":"3. strongbox-web-integration-tests"},{"location":"developer-guide/upgrading-dependencies-and-plugins.html#4-open-a-pr","text":"If all of the above is successful, please, raise a pull request against the strongbox-parent project. Warning! Please note you MUST wait for the Jenkins job to deploy the artifact BEFORE proceeding with the next step or it will fail complaining it cannot resolve an artifact with version ABC-issue-XYZ-SNAPSHOT ! If all of the above is successful, please, raise a pull request against the strongbox project. The automated checks of this pull request are expected to fail the first time. You will need to contact us either via a comment under the pull request, or by pinging us on our chat channel. Please, note that this pull request will only be required in order for us to check, if the build pipeline is still working properly. Once 13) is confirmed to be successful, you will need to reset the version of the strongbox-parent to what it was previously (and, potentially, in the other Strongbox projects that you may have raised a pull request in). At this point, your pull request in the strongbox project will be closed and all your other pull requests will be accepted and merged. Please, make sure all the steps above work, before raising your pull requests. If the upgrade causes an issue which you can't figure out, please raise the pull requests and try to provide as much information in the issue on our tracker, as possible, so that we could further investigate when we can.","title":"4. Open a PR"},{"location":"developer-guide/using-the-event-api.html","text":"Using the event api \u00b6 Introduction \u00b6 The code for the events API is located under the strongbox-event-api module. Events \u00b6 All events must extend the org.carlspring.strongbox.event.Event base class. Event Listeners \u00b6 All event listeners must implement the org.carlspring.strongbox.event.EventListener base class. The org.carlspring.strongbox.event.EventListener has this following simple method which every listener need to implement and where the respective event handling will be performed: public interface EventListener { void handle ( Event event ); } Event Listener Registries \u00b6 Event listener instances must be registered with the respective implementation's listener registry, which will be used to dispatch events to them. All event listeners must extend the org.carlspring.strongbox.event.AbstractEventListenerRegistry base class. Consider the following example, of how to register you listener: public class ArtifactEventHandlingExample { @Inject ArtifactEventListenerRegistry artifactEventListenerRegistry ; public void doStuff () { // Create the listener DummyArtifactEventListener listener = new DummyArtifactEventListener (); // Add the listener to the registry artifactEventListenerRegistry . addListener ( listener ); // Create an event ArtifactEvent artifactEvent = new ArtifactEvent ( ArtifactEvent . EVENT_ARTIFACT_UPLOADED ); // Tell the registry to dispatch the event to all registered listeners: artifactEventListenerRegistry . dispatchEvent ( artifactEvent ); } private class DummyArtifactEventListener implements ArtifactEventListener { @Override public void handle ( ArtifactEvent event ) { System . out . println ( \"Caught artifact event type \" + event . getType () + \".\" ); } } }","title":"Events API"},{"location":"developer-guide/using-the-event-api.html#using-the-event-api","text":"","title":"Using the event api"},{"location":"developer-guide/using-the-event-api.html#introduction","text":"The code for the events API is located under the strongbox-event-api module.","title":"Introduction"},{"location":"developer-guide/using-the-event-api.html#events","text":"All events must extend the org.carlspring.strongbox.event.Event base class.","title":"Events"},{"location":"developer-guide/using-the-event-api.html#event-listeners","text":"All event listeners must implement the org.carlspring.strongbox.event.EventListener base class. The org.carlspring.strongbox.event.EventListener has this following simple method which every listener need to implement and where the respective event handling will be performed: public interface EventListener { void handle ( Event event ); }","title":"Event Listeners"},{"location":"developer-guide/using-the-event-api.html#event-listener-registries","text":"Event listener instances must be registered with the respective implementation's listener registry, which will be used to dispatch events to them. All event listeners must extend the org.carlspring.strongbox.event.AbstractEventListenerRegistry base class. Consider the following example, of how to register you listener: public class ArtifactEventHandlingExample { @Inject ArtifactEventListenerRegistry artifactEventListenerRegistry ; public void doStuff () { // Create the listener DummyArtifactEventListener listener = new DummyArtifactEventListener (); // Add the listener to the registry artifactEventListenerRegistry . addListener ( listener ); // Create an event ArtifactEvent artifactEvent = new ArtifactEvent ( ArtifactEvent . EVENT_ARTIFACT_UPLOADED ); // Tell the registry to dispatch the event to all registered listeners: artifactEventListenerRegistry . dispatchEvent ( artifactEvent ); } private class DummyArtifactEventListener implements ArtifactEventListener { @Override public void handle ( ArtifactEvent event ) { System . out . println ( \"Caught artifact event type \" + event . getType () + \".\" ); } } }","title":"Event Listener Registries"},{"location":"developer-guide/writing-tests.html","text":"Writing tests \u00b6 Basic Rules \u00b6 Use JUnit 5 as testing framework (both unit and integration tests). For assertions, please use the AssertJ library. The only module allowed to use hamcrest for assertions is the strongbox-web-core , because the actual implementation of MockMvc allows only hamcrest in their API - see issue . All code must be accompanied with sufficiently thorough test cases which validate the functionality. If tests are failing, they are a top priority. Pull requests will not be merged, if there are failing tests. Pull requests will not be merged, if they mark tests as @Disabled , without prior explanation of the cause and approval from the reviewer/team. If you need to create a repository for your test and it needs to use the Maven 2 Layout Provider , please make sure you're only enabling indexing, if really necessary, as this can be quite expensive in terms of resources. All tests MUST be idempotent , which means that we should be able to execute them multiple times from the console or an IDE and the outcome should not depend on how many times the test has been executed. Use rest-assured for testing REST API. Don't try to re-invent the wheel and inherit all rest-assured initialization stuff from RestAssuredBaseTest . Mark your test as @IntegrationTest and take a look at the existing examples (sub-classes of RestAssuredBaseTest ). If you would like to have some initialization method with @BeforeEach annotation, please make sure that you also invoke super.init() as a first line in such methods. Don't use the REST API calls for testing your service class methods, test them directly using RestAssured. Tests that need to execute operations against a repository, should create the repository on the fly in order to guarantee test resource isolation. The naming convention for such repositories is as follows: given a class name of MavenMetadataForReleasesTest , the respective repository should be called mmfrt-releases . Test Resources \u00b6 Test cases should be self-sufficient and not rely on data, or resources produced by other tests, or the outcome of other tests in any other way. Every test case should generate all the resources it requires in each of its respective test methods. Do not name test resources with common dummy names such as foo.txt , bar.zip , blah.jar and etc, as this might cause resource collisions and issues, in case someone else decided to use such a name (if you spot any such resources, please raise an issue/pull, as this is bad practice). Test Repositories \u00b6 As mentoned above every test should have isolated and self-sufficient resources. This requirement can be achieved using the @TestRepository annotation. This annotation provides an isolated test repository which can be used as a sandbox for your test method. Usage Example: @ExtendWith(RepositoryManagementTestExecutionListener.class) @Test public void testWithRepository(@TestRepository(storageId = \"storage0\", repositoryId = \"repo1\", layout = MavenArtifactCoordinates.LAYOUT_NAME) Repository repository) { System.out.println(repository.getId()); } The test repository is injected as a test method parameter with the help of RepositoryManagementTestExecutionListener . The important feature here is the synchronization between the concurrent test executions, so even if there will be other repositories with the same name within other tests, then it will be synchronized by the repository ID and they will not affect each other. The other feature is that the test repository will be removed and cleaned up after test execution, just like it was created before the test execution from scratch. Below, you can find the main configuration parameters that are avaliable: with storageId and repositoryId you can specifiy the storage and repository ID to use with layout you can set the layout format to use (ex. MavenArtifactCoordinates.LAYOUT_NAME , NpmArtifactCoordinates.LAYOUT_NAME , NugetArtifactCoordinates.LAYOUT_NAME etc.) with setup parameter you can customize the test repository initialization with RepositorySetup strategy, (for example, there is MavenIndexedRepositorySetup for indexed maven repositories). for debugging purposes, there is a cleanup flag ( true by default), with which you can disable the test repository clean up by setting it to false By default, TestRepository provides Hosted repository, other repository types are also available (check below). Proxy Repositories \u00b6 Proxy repository support provided with @TestRepository.Remote annotation. Example: @ExtendWith(RepositoryManagementTestExecutionListener.class) @Test public void testWithProxyRepository(@TestRepository.Remote(url = \"http://repo1.maven.org/maven2/\") @MavenRepository(repositoryId = \"repo1\") Repository repository) { System.out.println(repository.getId()); } Group Repositories \u00b6 Group repository support provided with @TestRepository.Group annotation. Example: @ExtendWith(RepositoryManagementTestExecutionListener.class) @Test public void testWithGroupRepository(@MavenRepository(repositoryId = \"group-member-repo1\") Repository repository1, @MavenRepository(repositoryId = \"group-member-repo2\") Repository repository2, @MavenRepository(repositoryId = \"group-member-repo3\") Repository repository3, @Group({\"group-member-repo1\", \"group-member-repo2\", \"group-member-repo3\"}) @MavenRepository(repositoryId = \"repo1\") Repository groupRepository) { System.out.println(groupRepository.getId()); } Routing Rules configuration also avaliable with @TestRepository.Group.Rule annotation. Test Artifacts \u00b6 There is a generic ArtifactGenerator interface which provides various methods for generating test artifacts. You can use this interface implementation standalone like below: ArtifactGenerator mavenArtifactGenerator = new MavenArtifactGenerator(Paths.get(\".\")); mavenArtifactGenerator.generateArtifact(\"org.carlspring.test:test-artifact\", \"1.2.4\", 1024): The above example will generate test-artifact-1.2.4.jar , test-artifact-1.2.4.jar.md5 , test-artifact-1.2.4.jar.sha1 and test-artifact-1.2.4.pom files. The other way to generate artifacts within your test method is by using the @TestArtifact annotation. Example: @ExtendWith(ArtifactManagementTestExecutionListener.class) @Test public void testWithArtifact(@TestArtifact(resource = \"org/carlspring/strongbox/test/test-artifact/1.0/test-artifact-1.0.jar\", generator = MavenArtifactGenerator.class) Path artifact1, @TestArtifact(id = \"org.carlspring.strongbox.test:another-test-artifact\", versions = \"1.1\", generator = MavenArtifactGenerator.class) Path artifact2) { ... } This will also genrate a jar , checksums and pom and inject the java.nio.file.Path instance, pointing to the jar artifact, as test method parameter. Having the artifact Path you can easily get the md5 like this: Path artifact1Md5 = artifact1.resolveSbilling(artifact1.getFileName() + \".md5\"); Test artifacts are also synchronized between concurrent test executions, the same way as the test repository. Note that the examples above will just generate test artifacts without deploing to any repository. The generated files will be placed in a temporary folder for the related test method. Deploy Test Artifacts Into Test Repository \u00b6 It's also possible to inject deployed artifacts: @ExtendWith({ RepositoryManagementTestExecutionListener.class, ArtifactManagementTestExecutionListener.class }) @Test public void testArtifact(@MavenRepository(repositoryId = \"r1\") Repository r1, @MavenArtifact(repositoryId = \"r1\", id = \"org.carlspring.strongbox.test:another-test-artifact\", versions = {\"1.1\", \"1.2\"}) List<Path> repositoryArtifacs) { ... } With the repositoryId attribute the test artifacts repositoryArtifacts will be deployed into test repository r1 , along with other generated files (checksums, poms etc). The above example also shows the case when multiple artifact versions are generated, so the List contains ordered artifact versions: Path v1_1Artifact = repositoryArtifacs.get(0); Path v1_2Artifact = repositoryArtifacs.get(1); Layout specific Test Artifacts \u00b6 It is possible to customize the test artifact generation with ArtifactGeneratorStrategy . For example, there's a MavenArtifactGeneratorStrategy implementation and a @MavenTestArtifact annotation which allow to generate Maven-specific artifacts which have things like classifiers and plugins. Life Hacks To Make Artifacts Testing Easier \u00b6 Below you can find some tips to help you write some nice tests. Shortcut Annotations \u00b6 You can use shortcut annotations defined directly within your test class with the @AliasFor annotation: public class NiceArtifactAndRepositoryTest { @Test @ExtendWith({ RepositoryManagementTestExecutionListener.class, ArtifactManagementTestExecutionListener.class }) public void testOne(@MavenRepository(repositoryId = REPOSITORY_SNAPSHOTS, policy = RepositoryPolicyEnum.SNAPSHOT) Repository repository, @MavenSnapshotArtifactsWithClassifiers(id = \"org.carlspring.strongbox.test:snapshot-artifact\") Path snapshotArtifacts) { ... } @Test @ExtendWith({ RepositoryManagementTestExecutionListener.class, ArtifactManagementTestExecutionListener.class }) public void testTwo(@MavenRepository(repositoryId = REPOSITORY_SNAPSHOTS, policy = RepositoryPolicyEnum.SNAPSHOT) Repository repository, @MavenSnapshotArtifactsWithClassifiers(id = \"org.carlspring.strongbox.test:another-snapshot-artifact\") Path snapshotArtifacts) { ... } @Target({ ElementType.PARAMETER, ElementType.ANNOTATION_TYPE }) @Retention(RetentionPolicy.RUNTIME) @Documented @MavenTestArtifact(repositoryId = REPOSITORY_SNAPSHOTS, classifiers = { \"javadoc\", \"sources\", \"source-release\" }) private static @interface MavenSnapshotArtifactsWithClassifiers { @AliasFor(annotation = MavenTestArtifact.class) String id(); @AliasFor(annotation = MavenTestArtifact.class) String[] versions() default {\"2.0-20180328.195810-1\", \"2.0-20180328.195810-2\", \"2.0-20180328.195810-3\"}; } } Above example shows how to reduce boilerplate code with predefined @MavenSnapshotArtifactsWithClassifiers annotation, so test methods can reuse it to define test artifacts with common configuration parameters. NullLayoutProvider \u00b6 It is possible to use NullLayoutProvider to write generic tests in modules where other specific layouts are not avaliable. Adding Artifacts To The Maven Index \u00b6 For test cases where you need to generate artifacts and add them to the index, please have a look at the TestCaseWithMavenArtifactGenerationAndIndexing class. Integration Tests \u00b6 Some of the tests don't need to be running all the time during development. We've marked these as integration tests in order to make the build times much more reasonable. These tests are executed using the maven-failsafe-plugin . The default configurations for the maven-surefire-plugin and maven-failsafe-plugin are located in the strongbox/strongbox-parent/pom.xml file. All these tests are executed in our Jenkins instance for all branches and pull requests. Naming Integration Tests \u00b6 The integration tests in the project should end with a *TestIT name suffix. Executing Integration Tests \u00b6 The integration tests can be invoked, by triggering the Maven profile that executes them by passing in -Dintegration.tests property. Web Form Tests \u00b6 The web forms model classes inside the strongbox-web-forms module are validated inside its corresponding form. It is needed to test them in order to ensure that every validation is correct. Please check the guide on Writing Web Form Tests . Testing REST calls \u00b6 How To Write Your Own Integration Test \u00b6 Here is sequence of actions for anyone who would like to write it's own REST API test. Extend RestAssuredBaseTest class Put @IntegrationTest and @ExtendWith(SpringExtension.class) on top of your class Review existing examples (subclasses of RestAssuredBaseTest ) How To Use rest-assured \u00b6 Here is the simplest example that will send HTTP GET request to the /greeting endpoint: given().when() .get(\"/greeting\") .then() .statusCode(200); Note: You should have import static com.jayway.restassured.module.mockmvc.RestAssuredMockMvc.*; in your test. Where It Differs From Stock Version Of rest-assured \u00b6 Instead of given() please use givenLocal() of RestAssuredBaseTest . Do I Need To Extend RestAssuredArtifactClient , Or Write My Own Methods In Unit Tests? \u00b6 Basically, no . The only reason to extend that class is when you would like to reuse something between several unit tests (to avoid code duplication). References \u00b6 Please review this excellent article. It contains a lot of cool examples: unit-testing-spring-mvc-controllers-with-rest-assured If you still have any questions please review original usage wiki page by rest-assured . Spring Test tips \u00b6 Spring Test Context caching \u00b6 Spring provides a support for Test Context caching (see here ). Using single Test Context per maven module is preferable. Expand, adjust existing test context rather than create new one. @PostConstruct and @PreDestroy Pitfalls \u00b6 @PostConstruct method on any application component configured in the ApplicationContext is getting called while Spring actually creates new Test Context @PostConstruct within an actual test class will be executed before any @BeforeEach method of the underlying test @PreDestroy method on any application component configured in the ApplicationContext is getting called when all tests are finished (because of the Spring Test Context caching feature), when JVM exits @PreDestroy within an actual test class will never be executed How Do The Tests Run In Jenkins? \u00b6 For details on how the build and tests are executed in Jenkins, you can check the project's Jenkinsfile file. Also, all Strongbox sub-projects that are running in Jenkins will have such a file, so it could be used as a reference of how things are built and tested. See Also \u00b6 Spring: Integration Testing Reference","title":"Getting started"},{"location":"developer-guide/writing-tests.html#writing-tests","text":"","title":"Writing tests"},{"location":"developer-guide/writing-tests.html#basic-rules","text":"Use JUnit 5 as testing framework (both unit and integration tests). For assertions, please use the AssertJ library. The only module allowed to use hamcrest for assertions is the strongbox-web-core , because the actual implementation of MockMvc allows only hamcrest in their API - see issue . All code must be accompanied with sufficiently thorough test cases which validate the functionality. If tests are failing, they are a top priority. Pull requests will not be merged, if there are failing tests. Pull requests will not be merged, if they mark tests as @Disabled , without prior explanation of the cause and approval from the reviewer/team. If you need to create a repository for your test and it needs to use the Maven 2 Layout Provider , please make sure you're only enabling indexing, if really necessary, as this can be quite expensive in terms of resources. All tests MUST be idempotent , which means that we should be able to execute them multiple times from the console or an IDE and the outcome should not depend on how many times the test has been executed. Use rest-assured for testing REST API. Don't try to re-invent the wheel and inherit all rest-assured initialization stuff from RestAssuredBaseTest . Mark your test as @IntegrationTest and take a look at the existing examples (sub-classes of RestAssuredBaseTest ). If you would like to have some initialization method with @BeforeEach annotation, please make sure that you also invoke super.init() as a first line in such methods. Don't use the REST API calls for testing your service class methods, test them directly using RestAssured. Tests that need to execute operations against a repository, should create the repository on the fly in order to guarantee test resource isolation. The naming convention for such repositories is as follows: given a class name of MavenMetadataForReleasesTest , the respective repository should be called mmfrt-releases .","title":"Basic Rules"},{"location":"developer-guide/writing-tests.html#test-resources","text":"Test cases should be self-sufficient and not rely on data, or resources produced by other tests, or the outcome of other tests in any other way. Every test case should generate all the resources it requires in each of its respective test methods. Do not name test resources with common dummy names such as foo.txt , bar.zip , blah.jar and etc, as this might cause resource collisions and issues, in case someone else decided to use such a name (if you spot any such resources, please raise an issue/pull, as this is bad practice).","title":"Test Resources"},{"location":"developer-guide/writing-tests.html#test-repositories","text":"As mentoned above every test should have isolated and self-sufficient resources. This requirement can be achieved using the @TestRepository annotation. This annotation provides an isolated test repository which can be used as a sandbox for your test method. Usage Example: @ExtendWith(RepositoryManagementTestExecutionListener.class) @Test public void testWithRepository(@TestRepository(storageId = \"storage0\", repositoryId = \"repo1\", layout = MavenArtifactCoordinates.LAYOUT_NAME) Repository repository) { System.out.println(repository.getId()); } The test repository is injected as a test method parameter with the help of RepositoryManagementTestExecutionListener . The important feature here is the synchronization between the concurrent test executions, so even if there will be other repositories with the same name within other tests, then it will be synchronized by the repository ID and they will not affect each other. The other feature is that the test repository will be removed and cleaned up after test execution, just like it was created before the test execution from scratch. Below, you can find the main configuration parameters that are avaliable: with storageId and repositoryId you can specifiy the storage and repository ID to use with layout you can set the layout format to use (ex. MavenArtifactCoordinates.LAYOUT_NAME , NpmArtifactCoordinates.LAYOUT_NAME , NugetArtifactCoordinates.LAYOUT_NAME etc.) with setup parameter you can customize the test repository initialization with RepositorySetup strategy, (for example, there is MavenIndexedRepositorySetup for indexed maven repositories). for debugging purposes, there is a cleanup flag ( true by default), with which you can disable the test repository clean up by setting it to false By default, TestRepository provides Hosted repository, other repository types are also available (check below).","title":"Test Repositories"},{"location":"developer-guide/writing-tests.html#proxy-repositories","text":"Proxy repository support provided with @TestRepository.Remote annotation. Example: @ExtendWith(RepositoryManagementTestExecutionListener.class) @Test public void testWithProxyRepository(@TestRepository.Remote(url = \"http://repo1.maven.org/maven2/\") @MavenRepository(repositoryId = \"repo1\") Repository repository) { System.out.println(repository.getId()); }","title":"Proxy Repositories"},{"location":"developer-guide/writing-tests.html#group-repositories","text":"Group repository support provided with @TestRepository.Group annotation. Example: @ExtendWith(RepositoryManagementTestExecutionListener.class) @Test public void testWithGroupRepository(@MavenRepository(repositoryId = \"group-member-repo1\") Repository repository1, @MavenRepository(repositoryId = \"group-member-repo2\") Repository repository2, @MavenRepository(repositoryId = \"group-member-repo3\") Repository repository3, @Group({\"group-member-repo1\", \"group-member-repo2\", \"group-member-repo3\"}) @MavenRepository(repositoryId = \"repo1\") Repository groupRepository) { System.out.println(groupRepository.getId()); } Routing Rules configuration also avaliable with @TestRepository.Group.Rule annotation.","title":"Group Repositories"},{"location":"developer-guide/writing-tests.html#test-artifacts","text":"There is a generic ArtifactGenerator interface which provides various methods for generating test artifacts. You can use this interface implementation standalone like below: ArtifactGenerator mavenArtifactGenerator = new MavenArtifactGenerator(Paths.get(\".\")); mavenArtifactGenerator.generateArtifact(\"org.carlspring.test:test-artifact\", \"1.2.4\", 1024): The above example will generate test-artifact-1.2.4.jar , test-artifact-1.2.4.jar.md5 , test-artifact-1.2.4.jar.sha1 and test-artifact-1.2.4.pom files. The other way to generate artifacts within your test method is by using the @TestArtifact annotation. Example: @ExtendWith(ArtifactManagementTestExecutionListener.class) @Test public void testWithArtifact(@TestArtifact(resource = \"org/carlspring/strongbox/test/test-artifact/1.0/test-artifact-1.0.jar\", generator = MavenArtifactGenerator.class) Path artifact1, @TestArtifact(id = \"org.carlspring.strongbox.test:another-test-artifact\", versions = \"1.1\", generator = MavenArtifactGenerator.class) Path artifact2) { ... } This will also genrate a jar , checksums and pom and inject the java.nio.file.Path instance, pointing to the jar artifact, as test method parameter. Having the artifact Path you can easily get the md5 like this: Path artifact1Md5 = artifact1.resolveSbilling(artifact1.getFileName() + \".md5\"); Test artifacts are also synchronized between concurrent test executions, the same way as the test repository. Note that the examples above will just generate test artifacts without deploing to any repository. The generated files will be placed in a temporary folder for the related test method.","title":"Test Artifacts"},{"location":"developer-guide/writing-tests.html#deploy-test-artifacts-into-test-repository","text":"It's also possible to inject deployed artifacts: @ExtendWith({ RepositoryManagementTestExecutionListener.class, ArtifactManagementTestExecutionListener.class }) @Test public void testArtifact(@MavenRepository(repositoryId = \"r1\") Repository r1, @MavenArtifact(repositoryId = \"r1\", id = \"org.carlspring.strongbox.test:another-test-artifact\", versions = {\"1.1\", \"1.2\"}) List<Path> repositoryArtifacs) { ... } With the repositoryId attribute the test artifacts repositoryArtifacts will be deployed into test repository r1 , along with other generated files (checksums, poms etc). The above example also shows the case when multiple artifact versions are generated, so the List contains ordered artifact versions: Path v1_1Artifact = repositoryArtifacs.get(0); Path v1_2Artifact = repositoryArtifacs.get(1);","title":"Deploy Test Artifacts Into Test Repository"},{"location":"developer-guide/writing-tests.html#layout-specific-test-artifacts","text":"It is possible to customize the test artifact generation with ArtifactGeneratorStrategy . For example, there's a MavenArtifactGeneratorStrategy implementation and a @MavenTestArtifact annotation which allow to generate Maven-specific artifacts which have things like classifiers and plugins.","title":"Layout specific Test Artifacts"},{"location":"developer-guide/writing-tests.html#life-hacks-to-make-artifacts-testing-easier","text":"Below you can find some tips to help you write some nice tests.","title":"Life Hacks To Make Artifacts Testing Easier"},{"location":"developer-guide/writing-tests.html#shortcut-annotations","text":"You can use shortcut annotations defined directly within your test class with the @AliasFor annotation: public class NiceArtifactAndRepositoryTest { @Test @ExtendWith({ RepositoryManagementTestExecutionListener.class, ArtifactManagementTestExecutionListener.class }) public void testOne(@MavenRepository(repositoryId = REPOSITORY_SNAPSHOTS, policy = RepositoryPolicyEnum.SNAPSHOT) Repository repository, @MavenSnapshotArtifactsWithClassifiers(id = \"org.carlspring.strongbox.test:snapshot-artifact\") Path snapshotArtifacts) { ... } @Test @ExtendWith({ RepositoryManagementTestExecutionListener.class, ArtifactManagementTestExecutionListener.class }) public void testTwo(@MavenRepository(repositoryId = REPOSITORY_SNAPSHOTS, policy = RepositoryPolicyEnum.SNAPSHOT) Repository repository, @MavenSnapshotArtifactsWithClassifiers(id = \"org.carlspring.strongbox.test:another-snapshot-artifact\") Path snapshotArtifacts) { ... } @Target({ ElementType.PARAMETER, ElementType.ANNOTATION_TYPE }) @Retention(RetentionPolicy.RUNTIME) @Documented @MavenTestArtifact(repositoryId = REPOSITORY_SNAPSHOTS, classifiers = { \"javadoc\", \"sources\", \"source-release\" }) private static @interface MavenSnapshotArtifactsWithClassifiers { @AliasFor(annotation = MavenTestArtifact.class) String id(); @AliasFor(annotation = MavenTestArtifact.class) String[] versions() default {\"2.0-20180328.195810-1\", \"2.0-20180328.195810-2\", \"2.0-20180328.195810-3\"}; } } Above example shows how to reduce boilerplate code with predefined @MavenSnapshotArtifactsWithClassifiers annotation, so test methods can reuse it to define test artifacts with common configuration parameters.","title":"Shortcut Annotations"},{"location":"developer-guide/writing-tests.html#nulllayoutprovider","text":"It is possible to use NullLayoutProvider to write generic tests in modules where other specific layouts are not avaliable.","title":"NullLayoutProvider"},{"location":"developer-guide/writing-tests.html#adding-artifacts-to-the-maven-index","text":"For test cases where you need to generate artifacts and add them to the index, please have a look at the TestCaseWithMavenArtifactGenerationAndIndexing class.","title":"Adding Artifacts To The Maven Index"},{"location":"developer-guide/writing-tests.html#integration-tests","text":"Some of the tests don't need to be running all the time during development. We've marked these as integration tests in order to make the build times much more reasonable. These tests are executed using the maven-failsafe-plugin . The default configurations for the maven-surefire-plugin and maven-failsafe-plugin are located in the strongbox/strongbox-parent/pom.xml file. All these tests are executed in our Jenkins instance for all branches and pull requests.","title":"Integration Tests"},{"location":"developer-guide/writing-tests.html#naming-integration-tests","text":"The integration tests in the project should end with a *TestIT name suffix.","title":"Naming Integration Tests"},{"location":"developer-guide/writing-tests.html#executing-integration-tests","text":"The integration tests can be invoked, by triggering the Maven profile that executes them by passing in -Dintegration.tests property.","title":"Executing Integration Tests"},{"location":"developer-guide/writing-tests.html#web-form-tests","text":"The web forms model classes inside the strongbox-web-forms module are validated inside its corresponding form. It is needed to test them in order to ensure that every validation is correct. Please check the guide on Writing Web Form Tests .","title":"Web Form Tests"},{"location":"developer-guide/writing-tests.html#testing-rest-calls","text":"","title":"Testing REST calls"},{"location":"developer-guide/writing-tests.html#how-to-write-your-own-integration-test","text":"Here is sequence of actions for anyone who would like to write it's own REST API test. Extend RestAssuredBaseTest class Put @IntegrationTest and @ExtendWith(SpringExtension.class) on top of your class Review existing examples (subclasses of RestAssuredBaseTest )","title":"How To Write Your Own Integration Test"},{"location":"developer-guide/writing-tests.html#how-to-use-rest-assured","text":"Here is the simplest example that will send HTTP GET request to the /greeting endpoint: given().when() .get(\"/greeting\") .then() .statusCode(200); Note: You should have import static com.jayway.restassured.module.mockmvc.RestAssuredMockMvc.*; in your test.","title":"How To Use rest-assured"},{"location":"developer-guide/writing-tests.html#where-it-differs-from-stock-version-of-rest-assured","text":"Instead of given() please use givenLocal() of RestAssuredBaseTest .","title":"Where It Differs From Stock Version Of rest-assured"},{"location":"developer-guide/writing-tests.html#do-i-need-to-extend-restassuredartifactclient-or-write-my-own-methods-in-unit-tests","text":"Basically, no . The only reason to extend that class is when you would like to reuse something between several unit tests (to avoid code duplication).","title":"Do I Need To Extend RestAssuredArtifactClient, Or Write My Own Methods In Unit Tests?"},{"location":"developer-guide/writing-tests.html#references","text":"Please review this excellent article. It contains a lot of cool examples: unit-testing-spring-mvc-controllers-with-rest-assured If you still have any questions please review original usage wiki page by rest-assured .","title":"References"},{"location":"developer-guide/writing-tests.html#spring-test-tips","text":"","title":"Spring Test tips"},{"location":"developer-guide/writing-tests.html#spring-test-context-caching","text":"Spring provides a support for Test Context caching (see here ). Using single Test Context per maven module is preferable. Expand, adjust existing test context rather than create new one.","title":"Spring Test Context caching"},{"location":"developer-guide/writing-tests.html#postconstruct-and-predestroy-pitfalls","text":"@PostConstruct method on any application component configured in the ApplicationContext is getting called while Spring actually creates new Test Context @PostConstruct within an actual test class will be executed before any @BeforeEach method of the underlying test @PreDestroy method on any application component configured in the ApplicationContext is getting called when all tests are finished (because of the Spring Test Context caching feature), when JVM exits @PreDestroy within an actual test class will never be executed","title":"@PostConstruct and @PreDestroy Pitfalls"},{"location":"developer-guide/writing-tests.html#how-do-the-tests-run-in-jenkins","text":"For details on how the build and tests are executed in Jenkins, you can check the project's Jenkinsfile file. Also, all Strongbox sub-projects that are running in Jenkins will have such a file, so it could be used as a reference of how things are built and tested.","title":"How Do The Tests Run In Jenkins?"},{"location":"developer-guide/writing-tests.html#see-also","text":"Spring: Integration Testing Reference","title":"See Also"},{"location":"developer-guide/writing-web-form-tests.html","text":"Writing web form tests \u00b6 Basic rules \u00b6 The main goal of testing web form model classes is to check all possible validation combinations in the associated form. The classes from strongbox-web-forms module are tested inside the strongbox-web-core module, following the same package naming as its original module. A web form model class is testable only if it has any validation annotation (both library and custom annotations). The list of validation annotations to be used can be found at Java EE Javadoc . Web form model class \u00b6 A web form model class is an entity that represents the fields in a form. In most occasions it will be needed to validate some or all the form fields, whose validation(s) will depend on the field type and its purpose. An example of a class like this would be: package org.carlspring.strongbox.forms ; import javax.validation.constraints.NotEmpty ; public class PrivilegeForm { @NotEmpty ( message = \"A name must be specified.\" ) private String name ; private String description ; public PrivilegeForm () { } public PrivilegeForm ( String name , String description ) { this . name = name ; this . description = description ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public String getDescription () { return description ; } public void setDescription ( String description ) { this . description = description ; } } This class represents a form in which a user privilege will be managed. In this case, the name field is annotated with @NotEmpty validation and an error message. This means that the annotated element must not be null nor empty, otherwise the error message indicated will be prompted. Building the test for the web form model class \u00b6 Annotate the class with @IntegrationTest and @ExtendWith(SpringExtension.class) to state that it is an integration test which uses JUnit 5 framework. The class must be a sub-class of RestAssuredBaseTest class to inherit all rest-assured initialization stuff. In order to be initialized before each test method, it is needed to override the init method and annotate it with @BeforeEach . The validator which will test the field must be injected into the class. The system behaviour for this kind of tests are based in Given-When-Then style. The given part describes the state of the world before you begin the behavior you're specifying in this scenario. You can think of it as the pre-conditions to the test. The when section is that behavior that you're specifying. Finally the then section describes the changes you expect due to the specified behavior. The part of form validation is pretty auto-explanable. These validations are saved into a set of constraint violations, and then it is checked if this set is empty or not. If it is not empty, it means that the web form model class has errors, and the error messages are checked. package org.carlspring.strongbox.forms ; import org.carlspring.strongbox.config.IntegrationTest ; import org.carlspring.strongbox.rest.common.RestAssuredBaseTest ; import org.carlspring.strongbox.users.domain.Privileges ; import javax.inject.Inject ; import javax.validation.ConstraintViolation ; import javax.validation.Validator ; import java.util.Set ; import org.apache.commons.lang3.StringUtils ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.api.extension.ExtendWith ; import org.springframework.test.context.junit.jupiter.SpringExtension ; import static org.assertj.core.api.Java6Assertions.assertThat ; import static org.junit.jupiter.api.Assertions.* ; @IntegrationTest @ExtendWith ( SpringExtension . class ) public class PrivilegeFormTestIT extends RestAssuredBaseTest { @Inject private Validator validator ; @Override @BeforeEach public void init () throws Exception { super . init (); } @Test void testPrivilegeFormValid () { // given PrivilegeForm privilegeForm = new PrivilegeForm (); String privilegeName = Privileges . AUTHENTICATED_USER . name (); privilegeForm . setName ( privilegeName ); // when Set < ConstraintViolation < PrivilegeForm >> violations = validator . validate ( privilegeForm ); // then assertTrue ( violations . isEmpty (), \"Violations are not empty!\" ); } @Test void testPrivilegeFormInvalidEmptyName () { // given PrivilegeForm privilegeForm = new PrivilegeForm (); String privilegeName = StringUtils . EMPTY ; privilegeForm . setName ( privilegeName ); // when Set < ConstraintViolation < PrivilegeForm >> violations = validator . validate ( privilegeForm ); // then assertFalse ( violations . isEmpty (), \"Violations are empty!\" ); assertEquals ( violations . size (), 1 ); assertThat ( violations ). extracting ( \"message\" ). containsAnyOf ( \"A name must be specified.\" ); } }","title":"Web Form Tests"},{"location":"developer-guide/writing-web-form-tests.html#writing-web-form-tests","text":"","title":"Writing web form tests"},{"location":"developer-guide/writing-web-form-tests.html#basic-rules","text":"The main goal of testing web form model classes is to check all possible validation combinations in the associated form. The classes from strongbox-web-forms module are tested inside the strongbox-web-core module, following the same package naming as its original module. A web form model class is testable only if it has any validation annotation (both library and custom annotations). The list of validation annotations to be used can be found at Java EE Javadoc .","title":"Basic rules"},{"location":"developer-guide/writing-web-form-tests.html#web-form-model-class","text":"A web form model class is an entity that represents the fields in a form. In most occasions it will be needed to validate some or all the form fields, whose validation(s) will depend on the field type and its purpose. An example of a class like this would be: package org.carlspring.strongbox.forms ; import javax.validation.constraints.NotEmpty ; public class PrivilegeForm { @NotEmpty ( message = \"A name must be specified.\" ) private String name ; private String description ; public PrivilegeForm () { } public PrivilegeForm ( String name , String description ) { this . name = name ; this . description = description ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public String getDescription () { return description ; } public void setDescription ( String description ) { this . description = description ; } } This class represents a form in which a user privilege will be managed. In this case, the name field is annotated with @NotEmpty validation and an error message. This means that the annotated element must not be null nor empty, otherwise the error message indicated will be prompted.","title":"Web form model class"},{"location":"developer-guide/writing-web-form-tests.html#building-the-test-for-the-web-form-model-class","text":"Annotate the class with @IntegrationTest and @ExtendWith(SpringExtension.class) to state that it is an integration test which uses JUnit 5 framework. The class must be a sub-class of RestAssuredBaseTest class to inherit all rest-assured initialization stuff. In order to be initialized before each test method, it is needed to override the init method and annotate it with @BeforeEach . The validator which will test the field must be injected into the class. The system behaviour for this kind of tests are based in Given-When-Then style. The given part describes the state of the world before you begin the behavior you're specifying in this scenario. You can think of it as the pre-conditions to the test. The when section is that behavior that you're specifying. Finally the then section describes the changes you expect due to the specified behavior. The part of form validation is pretty auto-explanable. These validations are saved into a set of constraint violations, and then it is checked if this set is empty or not. If it is not empty, it means that the web form model class has errors, and the error messages are checked. package org.carlspring.strongbox.forms ; import org.carlspring.strongbox.config.IntegrationTest ; import org.carlspring.strongbox.rest.common.RestAssuredBaseTest ; import org.carlspring.strongbox.users.domain.Privileges ; import javax.inject.Inject ; import javax.validation.ConstraintViolation ; import javax.validation.Validator ; import java.util.Set ; import org.apache.commons.lang3.StringUtils ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.api.extension.ExtendWith ; import org.springframework.test.context.junit.jupiter.SpringExtension ; import static org.assertj.core.api.Java6Assertions.assertThat ; import static org.junit.jupiter.api.Assertions.* ; @IntegrationTest @ExtendWith ( SpringExtension . class ) public class PrivilegeFormTestIT extends RestAssuredBaseTest { @Inject private Validator validator ; @Override @BeforeEach public void init () throws Exception { super . init (); } @Test void testPrivilegeFormValid () { // given PrivilegeForm privilegeForm = new PrivilegeForm (); String privilegeName = Privileges . AUTHENTICATED_USER . name (); privilegeForm . setName ( privilegeName ); // when Set < ConstraintViolation < PrivilegeForm >> violations = validator . validate ( privilegeForm ); // then assertTrue ( violations . isEmpty (), \"Violations are not empty!\" ); } @Test void testPrivilegeFormInvalidEmptyName () { // given PrivilegeForm privilegeForm = new PrivilegeForm (); String privilegeName = StringUtils . EMPTY ; privilegeForm . setName ( privilegeName ); // when Set < ConstraintViolation < PrivilegeForm >> violations = validator . validate ( privilegeForm ); // then assertFalse ( violations . isEmpty (), \"Violations are empty!\" ); assertEquals ( violations . size (), 1 ); assertThat ( violations ). extracting ( \"message\" ). containsAnyOf ( \"A name must be specified.\" ); } }","title":"Building the test for the web form model class"},{"location":"developer-guide/writing-web-integration-tests.html","text":"Writing Web Integration Tests \u00b6 This article illustrates how to use our web integration test infrastructure and develop tests for it. Introduction \u00b6 The strongbox-web-integration-tests project contains various integration tests for the Strongbox project and the different repository layout formats supported by it. We use Maven to for the build, which in term starts a Strongbox instance and executes Groovy-based tests against it. The code used to start the Spring Boot application is either retrieved from our repository, or, if you've made local modifications, it uses them directly from your local Maven cache. This project is often referred to as s-w-i-t for brevity. The following build tools have Groovy-based integration tests: Gradle Maven (these tests are using the maven-invoker-plugin that starts Maven during the build and runs various build operations) NPM NuGet Raw PyPi ( pip , twine ) SBT Writing Web Integration Tests \u00b6 Let's take an example of PyPi layout provider and the pip tool to explain how to write web integration tests. Create a new module in strongbox-web-integration-tests for layout provider to be tested. Create a base test class like PypiWebIntegrationTest having common methods which should be used by all the tests. For each test case a new package should be created so that the test could be executed in isolation without affecting other tests. The package should have all the files and folders required by the tool used for test (In Python's case, these would be setup.cfg , setup.py for pip ). Below are the steps which should be followed for tests: Create a groovy based test class for the test cases. Import base test class. def baseScript = new GroovyScriptEngine ( \"$project.basedir/src/it\" ). with { loadScriptByName ( ' PypiWebIntegrationTest . groovy ' ) } Determine Operation system and decide command to be run based on OS. Execute the command and verify/assert the result. // Assert directory exists for package uploaded Path packageDirectoryPath = uploadPackageDirectoryPath . resolve ( \"dist\" ); boolean pathExists = Files . isDirectory ( packageDirectoryPath , LinkOption . NOFOLLOW_LINKS ); assert pathExists == true // upload python package using pip command runCommand ( uploadPackageDirectoryPath , packageUploadCommand ) def commandOutput // Install uploaded python package using pip command and assert success def uploadedPackageName = \"pip_upload_test\" commandOutput = runCommand ( uploadPackageDirectoryPath , pipInstallPackageCommand + \" \" + uploadedPackageName ) assert commandOutput . contains ( \"Successfully installed \" + uploadedPackageName . replace ( \"_\" , \"-\" ) + \"-1.0\" ) Running Tests \u00b6 The Web Integration tests can be run using both Maven and Docker. Typically, you would use Maven to run the tests from one sub-module, (unless you have all the possible tools that are required for executing the tests, for example, Gradle, NuGet, NPM already installed, which is usually not the case). This is why we recommend running the tests using Docker, as the Docker images are pre-configured with everything you will need to run the tests in the exact same way they would run on our CI server (Jenkins). Using Maven \u00b6 Each module has a pom.xml file. Go to the respective module (for example cd pypi ) and execute the mvn clean install command. This will launch the Strongbox application instance and will execute web integration tests against it. Using Docker \u00b6 To make development and testing easier, we've created Docker images for all of the tools we are testing against, so that you don't have to go through the process of installing them manually. For this to work, you need to have installed docker and docker-compose on your machine. Afterwards, just go to the respective sub-project (i.e. cd maven ) and execute docker-compose up . Each module has a docker-compose.yml file. You can run all the tests (for all modules) like this: find . -maxdepth 2 -type f -name \"docker-compose.y*ml\" -exec docker-compose -f {} up \\; Alternatively, you can go to respective tool\u2019s module that you're interested in and execute the following command: docker-compose up This will automatically build the code using Maven after spinning up a Docker container with a Strongbox application instance and will run the web integration tests against it and then switch it off when it's done. version : '3' services : strongbox-web-integration-tests-pypi : image : strongboxci/alpine:jdk8-mvn3.6-pip19.3 volumes : - $HOME/.m2/repository:/home/jenkins/.m2/repository - ../:/workspace working_dir : /workspace/pypi command : mvn clean install -U Windows Notes \u00b6 If you are using Windows, you need to install all of the tools below and make them available in your PATH . Nuget requires .Net Framework v4 and you need to set the NUGET_V3_EXEC environment variable to point to the executable c:/path/to/nuget.exe . Alternatively, you can use docker-compose up , if you have Docker and docker-compose installed. Linux Notes \u00b6 If you are using linux, you need to install all of the tools below and make them available in your PATH . To run Nuget tests here you will need mono to be installed. There were many problems with the compatibility of nuget.exe and mono versions, and the sutable combination is the following: Mono JIT compiler version 5.2.0.215 (tarball Mon Aug 14 15:46:23 UTC 2017) nuget.exe v3.4.4 NUGET_V3_EXEC need to be set with value mono \\path\\to\\nuget.exe Alternatively, you can use docker-compose up , if you have Docker and docker-compose installed. Tools \u00b6 We are using Maven 3.6.3 and JDK 1.8 to execute the tests for the respective tool. Gradle 5.6 Maven 3.6.3 NuGet 3.4.4 NPM (NodeJS 12) Pip 19.3 SBT 1.1.0","title":"Web Integration Tests"},{"location":"developer-guide/writing-web-integration-tests.html#writing-web-integration-tests","text":"This article illustrates how to use our web integration test infrastructure and develop tests for it.","title":"Writing Web Integration Tests"},{"location":"developer-guide/writing-web-integration-tests.html#introduction","text":"The strongbox-web-integration-tests project contains various integration tests for the Strongbox project and the different repository layout formats supported by it. We use Maven to for the build, which in term starts a Strongbox instance and executes Groovy-based tests against it. The code used to start the Spring Boot application is either retrieved from our repository, or, if you've made local modifications, it uses them directly from your local Maven cache. This project is often referred to as s-w-i-t for brevity. The following build tools have Groovy-based integration tests: Gradle Maven (these tests are using the maven-invoker-plugin that starts Maven during the build and runs various build operations) NPM NuGet Raw PyPi ( pip , twine ) SBT","title":"Introduction"},{"location":"developer-guide/writing-web-integration-tests.html#writing-web-integration-tests_1","text":"Let's take an example of PyPi layout provider and the pip tool to explain how to write web integration tests. Create a new module in strongbox-web-integration-tests for layout provider to be tested. Create a base test class like PypiWebIntegrationTest having common methods which should be used by all the tests. For each test case a new package should be created so that the test could be executed in isolation without affecting other tests. The package should have all the files and folders required by the tool used for test (In Python's case, these would be setup.cfg , setup.py for pip ). Below are the steps which should be followed for tests: Create a groovy based test class for the test cases. Import base test class. def baseScript = new GroovyScriptEngine ( \"$project.basedir/src/it\" ). with { loadScriptByName ( ' PypiWebIntegrationTest . groovy ' ) } Determine Operation system and decide command to be run based on OS. Execute the command and verify/assert the result. // Assert directory exists for package uploaded Path packageDirectoryPath = uploadPackageDirectoryPath . resolve ( \"dist\" ); boolean pathExists = Files . isDirectory ( packageDirectoryPath , LinkOption . NOFOLLOW_LINKS ); assert pathExists == true // upload python package using pip command runCommand ( uploadPackageDirectoryPath , packageUploadCommand ) def commandOutput // Install uploaded python package using pip command and assert success def uploadedPackageName = \"pip_upload_test\" commandOutput = runCommand ( uploadPackageDirectoryPath , pipInstallPackageCommand + \" \" + uploadedPackageName ) assert commandOutput . contains ( \"Successfully installed \" + uploadedPackageName . replace ( \"_\" , \"-\" ) + \"-1.0\" )","title":"Writing Web Integration Tests"},{"location":"developer-guide/writing-web-integration-tests.html#running-tests","text":"The Web Integration tests can be run using both Maven and Docker. Typically, you would use Maven to run the tests from one sub-module, (unless you have all the possible tools that are required for executing the tests, for example, Gradle, NuGet, NPM already installed, which is usually not the case). This is why we recommend running the tests using Docker, as the Docker images are pre-configured with everything you will need to run the tests in the exact same way they would run on our CI server (Jenkins).","title":"Running Tests"},{"location":"developer-guide/writing-web-integration-tests.html#using-maven","text":"Each module has a pom.xml file. Go to the respective module (for example cd pypi ) and execute the mvn clean install command. This will launch the Strongbox application instance and will execute web integration tests against it.","title":"Using Maven"},{"location":"developer-guide/writing-web-integration-tests.html#using-docker","text":"To make development and testing easier, we've created Docker images for all of the tools we are testing against, so that you don't have to go through the process of installing them manually. For this to work, you need to have installed docker and docker-compose on your machine. Afterwards, just go to the respective sub-project (i.e. cd maven ) and execute docker-compose up . Each module has a docker-compose.yml file. You can run all the tests (for all modules) like this: find . -maxdepth 2 -type f -name \"docker-compose.y*ml\" -exec docker-compose -f {} up \\; Alternatively, you can go to respective tool\u2019s module that you're interested in and execute the following command: docker-compose up This will automatically build the code using Maven after spinning up a Docker container with a Strongbox application instance and will run the web integration tests against it and then switch it off when it's done. version : '3' services : strongbox-web-integration-tests-pypi : image : strongboxci/alpine:jdk8-mvn3.6-pip19.3 volumes : - $HOME/.m2/repository:/home/jenkins/.m2/repository - ../:/workspace working_dir : /workspace/pypi command : mvn clean install -U","title":"Using Docker"},{"location":"developer-guide/writing-web-integration-tests.html#windows-notes","text":"If you are using Windows, you need to install all of the tools below and make them available in your PATH . Nuget requires .Net Framework v4 and you need to set the NUGET_V3_EXEC environment variable to point to the executable c:/path/to/nuget.exe . Alternatively, you can use docker-compose up , if you have Docker and docker-compose installed.","title":"Windows Notes"},{"location":"developer-guide/writing-web-integration-tests.html#linux-notes","text":"If you are using linux, you need to install all of the tools below and make them available in your PATH . To run Nuget tests here you will need mono to be installed. There were many problems with the compatibility of nuget.exe and mono versions, and the sutable combination is the following: Mono JIT compiler version 5.2.0.215 (tarball Mon Aug 14 15:46:23 UTC 2017) nuget.exe v3.4.4 NUGET_V3_EXEC need to be set with value mono \\path\\to\\nuget.exe Alternatively, you can use docker-compose up , if you have Docker and docker-compose installed.","title":"Linux Notes"},{"location":"developer-guide/writing-web-integration-tests.html#tools","text":"We are using Maven 3.6.3 and JDK 1.8 to execute the tests for the respective tool. Gradle 5.6 Maven 3.6.3 NuGet 3.4.4 NPM (NodeJS 12) Pip 19.3 SBT 1.1.0","title":"Tools"},{"location":"developer-guide/git/rebase-vs-merge.html","text":"Git rebase vs merge \u00b6 Conceptual Overview \u00b6 The first thing to understand about git rebase is that it solves the same problem as git merge. Both of these commands are designed to integrate changes from one branch into another branch\u2014they just do it in very different ways. Consider what happens when you start working on a new feature in a dedicated branch, then another team member updates the master branch with new commits. This results in a forked history, which should be familiar to anyone who has used Git as a collaboration tool. Now, let\u2019s say that the new commits in master are relevant to the feature that you\u2019re working on. To incorporate the new commits into your feature branch, you have two options: merging or rebasing . The Merge Option \u00b6 Please avoid using this option! Please avoid using this option. It creates unnecessary noise in your PRs and makes it extremely hard to follow your real changes. We have included this information because it will give you better understanding of why we prefer rebasing over merging . The easiest option is to merge the master branch into the feature branch using something like the following: git checkout feature git merge master Or, you can condense this to a one-liner: git merge feature master This creates a new \u201cmerge commit\u201d in the feature branch that ties together the histories of both branches, giving you a branch structure that looks like this: Merging is nice because it\u2019s a non-destructive operation. The existing branches are not changed in any way. This avoids all of the potential pitfalls of rebasing (discussed below). On the other hand, this also means that the feature branch will have an extraneous merge commit every time you need to incorporate upstream changes. If master is very active, this can pollute your feature branch\u2019s history quite a bit. While it\u2019s possible to mitigate this issue with advanced git log options, it can make it hard for other developers to understand the history of the project or branch you are working on. The Rebase Option \u00b6 We prefer this option over merging As an alternative to merging, you can rebase the feature branch onto master branch using the following commands: git checkout feature git rebase master This moves the entire feature branch to begin on the tip of the master branch, effectively incorporating all of the new commits in master . But, instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch. The major benefit of rebasing is that you get a much cleaner project history: First, it eliminates the unnecessary merge commits required by git merge Second, as you can see in the above diagram, rebasing also results in a perfectly linear project history \u2014 you can follow the tip of feature all the way to the beginning of the project without any forks This makes it easier to navigate your project with commands like git log , git bisect , and gitk . The Golden rule of Rebasing \u00b6 So, before you run git rebase , always ask yourself, \u201cIs anyone else looking at this branch?\u201d. If the answer is yes, take your hands off the keyboard and start thinking about a non-destructive way to make your changes. Otherwise, you\u2019re safe to re-write history as much as you like. Force-Pushing \u00b6 If you try to push the rebased feature branch back to a remote repository, Git will prevent you from doing so because it conflicts with the remote feature branch. But, you can force the push to go through by passing the --force flag, like so: # Be very careful with this command! git push --force origin feature However, before executing this command, please be sure nobody else is working on this branch. But how do I rebase? \u00b6 Before you start, it is a good idea to backup your current project. If this is your first time doing a rebase, you can screw things up and loose/damage the work you've already done. So better safe, than sorry. (If you are a pro - what are you even doing here? ) Syncing your fork first \u00b6 You need to keep your fork's master branch in sync with the upstream/master . This is also required for rebasing as you will be pointing your feature branch to the HEAD of the forked master branch. If your fork's master is of sync with the upstream/master and you rebase - it will likely create a mess. Steps: Make sure you are on the master branch ( git checkout master ) Add upstream remote which points to https://github.com/strongbox/strongbox 1 2 3 4 5 6 $ git remote add upstream git@github.com:strongbox/strongbox.git $ git remote -v origin git@github.com:your-username/strongbox.git (fetch) origin git@github.com:your-username/strongbox.git (push) upstream git@github.com:strongbox/strongbox.git (fetch) upstream git@github.com:strongbox/strongbox.git (push) Sync your fork 1 2 3 git fetch upstream git merge upstream/master git push origin master At this point, your fork should be in sync with the upstream. You can validate that by going to your fork in github. It should now be saying that master is even with strongbox:master . Rebasing \u00b6 Idea \u00b6 In most modern IDEs you will have an option to rebase from the IDE. That would be your best option as you will be able to more easily resolve any conflicts which might occur during the rebase. If you are using Intellij Idea, you need to be at your feature branch and then just Rebase current onto Selected (master) : What this will do is to rebase the SB-1202 feature branch onto the master . Should there be any conflicts, Idea will give you a pop-up window with a list of the conflicting files/changes Explanation for the options above: Accept yours - overwrites the file with your changes Accept theirs - overwrites the file with the remote changes (if the remote file was deleted, it will be deleted on your branch as well) Merge - gives you a window from which you can \"merge\" the changes as appropriate. You can also check Idea's manual for Resolving Conflicts Command line \u00b6 If you are command line lover, you can execute the commands manually: 1 2 git checkout feature-branch git rebase master However, when conflicts arise, it could be a bit challenging to fix them from your console. Finally \u00b6 Once you are done rebasing and you have ensured that the code builds as well as the tests are passing, then you will need to force push your branch (remember the Force Pushing section?) git push --force origin feature-branch I need help \u00b6 We've all been there. If you are having trouble with your rebase , you can ask for help in your community channel. License \u00b6 This page has borrowed some of the images and parts of the Atlassian Merging Vs Rebasing article which are licensed under CC BY 2.5 AU . Head to the Atlassian Merging Vs Rebasing article for a more thorough comparison of merging vs rebasing .","title":"Rebasing vs Merging"},{"location":"developer-guide/git/rebase-vs-merge.html#git-rebase-vs-merge","text":"","title":"Git rebase vs merge"},{"location":"developer-guide/git/rebase-vs-merge.html#conceptual-overview","text":"The first thing to understand about git rebase is that it solves the same problem as git merge. Both of these commands are designed to integrate changes from one branch into another branch\u2014they just do it in very different ways. Consider what happens when you start working on a new feature in a dedicated branch, then another team member updates the master branch with new commits. This results in a forked history, which should be familiar to anyone who has used Git as a collaboration tool. Now, let\u2019s say that the new commits in master are relevant to the feature that you\u2019re working on. To incorporate the new commits into your feature branch, you have two options: merging or rebasing .","title":"Conceptual Overview"},{"location":"developer-guide/git/rebase-vs-merge.html#the-merge-option","text":"Please avoid using this option! Please avoid using this option. It creates unnecessary noise in your PRs and makes it extremely hard to follow your real changes. We have included this information because it will give you better understanding of why we prefer rebasing over merging . The easiest option is to merge the master branch into the feature branch using something like the following: git checkout feature git merge master Or, you can condense this to a one-liner: git merge feature master This creates a new \u201cmerge commit\u201d in the feature branch that ties together the histories of both branches, giving you a branch structure that looks like this: Merging is nice because it\u2019s a non-destructive operation. The existing branches are not changed in any way. This avoids all of the potential pitfalls of rebasing (discussed below). On the other hand, this also means that the feature branch will have an extraneous merge commit every time you need to incorporate upstream changes. If master is very active, this can pollute your feature branch\u2019s history quite a bit. While it\u2019s possible to mitigate this issue with advanced git log options, it can make it hard for other developers to understand the history of the project or branch you are working on.","title":"The Merge Option"},{"location":"developer-guide/git/rebase-vs-merge.html#the-rebase-option","text":"We prefer this option over merging As an alternative to merging, you can rebase the feature branch onto master branch using the following commands: git checkout feature git rebase master This moves the entire feature branch to begin on the tip of the master branch, effectively incorporating all of the new commits in master . But, instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch. The major benefit of rebasing is that you get a much cleaner project history: First, it eliminates the unnecessary merge commits required by git merge Second, as you can see in the above diagram, rebasing also results in a perfectly linear project history \u2014 you can follow the tip of feature all the way to the beginning of the project without any forks This makes it easier to navigate your project with commands like git log , git bisect , and gitk .","title":"The Rebase Option"},{"location":"developer-guide/git/rebase-vs-merge.html#the-golden-rule-of-rebasing","text":"So, before you run git rebase , always ask yourself, \u201cIs anyone else looking at this branch?\u201d. If the answer is yes, take your hands off the keyboard and start thinking about a non-destructive way to make your changes. Otherwise, you\u2019re safe to re-write history as much as you like.","title":"The Golden rule of Rebasing"},{"location":"developer-guide/git/rebase-vs-merge.html#force-pushing","text":"If you try to push the rebased feature branch back to a remote repository, Git will prevent you from doing so because it conflicts with the remote feature branch. But, you can force the push to go through by passing the --force flag, like so: # Be very careful with this command! git push --force origin feature However, before executing this command, please be sure nobody else is working on this branch.","title":"Force-Pushing"},{"location":"developer-guide/git/rebase-vs-merge.html#but-how-do-i-rebase","text":"Before you start, it is a good idea to backup your current project. If this is your first time doing a rebase, you can screw things up and loose/damage the work you've already done. So better safe, than sorry. (If you are a pro - what are you even doing here? )","title":"But how do I rebase?"},{"location":"developer-guide/git/rebase-vs-merge.html#syncing-your-fork-first","text":"You need to keep your fork's master branch in sync with the upstream/master . This is also required for rebasing as you will be pointing your feature branch to the HEAD of the forked master branch. If your fork's master is of sync with the upstream/master and you rebase - it will likely create a mess. Steps: Make sure you are on the master branch ( git checkout master ) Add upstream remote which points to https://github.com/strongbox/strongbox 1 2 3 4 5 6 $ git remote add upstream git@github.com:strongbox/strongbox.git $ git remote -v origin git@github.com:your-username/strongbox.git (fetch) origin git@github.com:your-username/strongbox.git (push) upstream git@github.com:strongbox/strongbox.git (fetch) upstream git@github.com:strongbox/strongbox.git (push) Sync your fork 1 2 3 git fetch upstream git merge upstream/master git push origin master At this point, your fork should be in sync with the upstream. You can validate that by going to your fork in github. It should now be saying that master is even with strongbox:master .","title":"Syncing your fork first"},{"location":"developer-guide/git/rebase-vs-merge.html#rebasing","text":"","title":"Rebasing"},{"location":"developer-guide/git/rebase-vs-merge.html#idea","text":"In most modern IDEs you will have an option to rebase from the IDE. That would be your best option as you will be able to more easily resolve any conflicts which might occur during the rebase. If you are using Intellij Idea, you need to be at your feature branch and then just Rebase current onto Selected (master) : What this will do is to rebase the SB-1202 feature branch onto the master . Should there be any conflicts, Idea will give you a pop-up window with a list of the conflicting files/changes Explanation for the options above: Accept yours - overwrites the file with your changes Accept theirs - overwrites the file with the remote changes (if the remote file was deleted, it will be deleted on your branch as well) Merge - gives you a window from which you can \"merge\" the changes as appropriate. You can also check Idea's manual for Resolving Conflicts","title":"Idea"},{"location":"developer-guide/git/rebase-vs-merge.html#command-line","text":"If you are command line lover, you can execute the commands manually: 1 2 git checkout feature-branch git rebase master However, when conflicts arise, it could be a bit challenging to fix them from your console.","title":"Command line"},{"location":"developer-guide/git/rebase-vs-merge.html#finally","text":"Once you are done rebasing and you have ensured that the code builds as well as the tests are passing, then you will need to force push your branch (remember the Force Pushing section?) git push --force origin feature-branch","title":"Finally"},{"location":"developer-guide/git/rebase-vs-merge.html#i-need-help","text":"We've all been there. If you are having trouble with your rebase , you can ask for help in your community channel.","title":"I need help"},{"location":"developer-guide/git/rebase-vs-merge.html#license","text":"This page has borrowed some of the images and parts of the Atlassian Merging Vs Rebasing article which are licensed under CC BY 2.5 AU . Head to the Atlassian Merging Vs Rebasing article for a more thorough comparison of merging vs rebasing .","title":"License"},{"location":"developer-guide/ide-setup/eclipse.html","text":"Eclipse \u00b6 Before continuing, please make sure you've built the code using Building the code section. Choose Eclipse distribution \u00b6 The Eclipse IDE for Java Developers package is a sufficient base for strongbox project development. Install ANTLR4 IDE plugin \u00b6 Follow ANTLR4 Eclipse plugin installation guide Prerequisites and Installation sections from here Download and add as default distribution the antlr-4.x-complete.jar version which matches version.antlr variable from here in Window -> Preferences -> ANTLR 4 -> Tool Install Groovy-Eclipse M2E Integration \u00b6 Install from your Eclipse distro update site here . Necessary dependencies will be automatically selected. Set up Eclipse workspace \u00b6 Disable Welcome screen \u00b6 You should already have created an empty workspace - this is the default behavior when you first start Eclipse. Just make sure you untick the \"Always show Welcome at start up\" checkbox before closing the Welcome screen to see the usual perspective on startup. Import Maven project \u00b6 Choose File -> Import -> Maven -> Existing Maven Projects Point the Root Directory to the strongbox cloned repository. Click Finish button. Workaround m2e connectors \u00b6 If a popup Discover m2e connectors appears - click Resolve All Later and Finish . Issues with m2e connectors are known and we workaround this through Maven command line build . In Window -> Preferences -> Maven -> Errors/Warnings -> Plugin execution not covered by lifecycle configuration choose Ignore and hit Apply Click Import icon and browse From preference file to a local saved copy of this file Configure strongbox-storage-nuget-layout-provider project \u00b6 Expand the src/main directory and select antlr4 folder, then right click and pick Build path -> Use as Source Folder Configure strongbox-aql project \u00b6 Expand the src/main directory and select groovy and twig folders, then right click and pick Build path -> Use as Source Folder Right click the project and pick Properties Java Build Path -> Libraries -> Add Library -> Groovy Runtime Libraries . Note that if on right click you pick directly Build path adding the groovy libraries gives an error Project Natures -> Add -> Groovy Nature Trigger Maven update for strongbox-masterbuild \u00b6 Select strongbox-masterbuild project, Right click -> Maven -> Update Project","title":"Eclipse"},{"location":"developer-guide/ide-setup/eclipse.html#eclipse","text":"Before continuing, please make sure you've built the code using Building the code section.","title":"Eclipse"},{"location":"developer-guide/ide-setup/eclipse.html#choose-eclipse-distribution","text":"The Eclipse IDE for Java Developers package is a sufficient base for strongbox project development.","title":"Choose Eclipse distribution"},{"location":"developer-guide/ide-setup/eclipse.html#install-antlr4-ide-plugin","text":"Follow ANTLR4 Eclipse plugin installation guide Prerequisites and Installation sections from here Download and add as default distribution the antlr-4.x-complete.jar version which matches version.antlr variable from here in Window -> Preferences -> ANTLR 4 -> Tool","title":"Install ANTLR4 IDE plugin"},{"location":"developer-guide/ide-setup/eclipse.html#install-groovy-eclipse-m2e-integration","text":"Install from your Eclipse distro update site here . Necessary dependencies will be automatically selected.","title":"Install Groovy-Eclipse M2E Integration"},{"location":"developer-guide/ide-setup/eclipse.html#set-up-eclipse-workspace","text":"","title":"Set up Eclipse workspace"},{"location":"developer-guide/ide-setup/eclipse.html#disable-welcome-screen","text":"You should already have created an empty workspace - this is the default behavior when you first start Eclipse. Just make sure you untick the \"Always show Welcome at start up\" checkbox before closing the Welcome screen to see the usual perspective on startup.","title":"Disable Welcome screen"},{"location":"developer-guide/ide-setup/eclipse.html#import-maven-project","text":"Choose File -> Import -> Maven -> Existing Maven Projects Point the Root Directory to the strongbox cloned repository. Click Finish button.","title":"Import Maven project"},{"location":"developer-guide/ide-setup/eclipse.html#workaround-m2e-connectors","text":"If a popup Discover m2e connectors appears - click Resolve All Later and Finish . Issues with m2e connectors are known and we workaround this through Maven command line build . In Window -> Preferences -> Maven -> Errors/Warnings -> Plugin execution not covered by lifecycle configuration choose Ignore and hit Apply Click Import icon and browse From preference file to a local saved copy of this file","title":"Workaround m2e connectors"},{"location":"developer-guide/ide-setup/eclipse.html#configure-strongbox-storage-nuget-layout-provider-project","text":"Expand the src/main directory and select antlr4 folder, then right click and pick Build path -> Use as Source Folder","title":"Configure strongbox-storage-nuget-layout-provider project"},{"location":"developer-guide/ide-setup/eclipse.html#configure-strongbox-aql-project","text":"Expand the src/main directory and select groovy and twig folders, then right click and pick Build path -> Use as Source Folder Right click the project and pick Properties Java Build Path -> Libraries -> Add Library -> Groovy Runtime Libraries . Note that if on right click you pick directly Build path adding the groovy libraries gives an error Project Natures -> Add -> Groovy Nature","title":"Configure strongbox-aql project"},{"location":"developer-guide/ide-setup/eclipse.html#trigger-maven-update-for-strongbox-masterbuild","text":"Select strongbox-masterbuild project, Right click -> Maven -> Update Project","title":"Trigger Maven update for strongbox-masterbuild"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html","text":"Writing a layout provider \u00b6 Concept \u00b6 We've tried to devise our architecture in a generic way that's easy to extend and work with. The illustration below is a top level overview of how artifact management is implemented in Strongbox within Storages , Repositories and Layout Providers : There are three layers and each of them decorates the underlying layer with the logic it's responsible for. For example, the following layer implementations are possible: Repository Hosted Proxy Group Layout Maven NPM NuGet Raw Storage File system AWS S3 (not yet implemented) Google Cloud (not yet implemented) All of the layers are loosely coupled, so implementations don't depend on each other. With the Decorator Pattern concept you can have any layer implementation combinations you need: Hosted + Maven + File System , Group + Npm + AWS etc. Layout Implementation \u00b6 We can say that artifacts are just regular files, so our implementation is mainly based on the common JDK File I/O (Featuring NIO.2) entities. This is how it looks like: You will need to implement following entities: ConcreteLayoutFileSystemProvider ConcreteLayoutFileSystem LayoutProvider ArtifactCoordinates Artifact Coordinates \u00b6 Each layout implementation should be able to identify artifacts and the Artifact Coordinates serves this purpose. These are the minimal requirements for ArtifactCoordinates.java implementations: - Each ArtifactCoordinates implementation should have an id and version . - Each id and version pair must be unique per repository. - There should be a transitive function to get ArtifactCoordinates from Path and vice-versa. Notes Each layout implementation should be placed in separate module under the strongbox-storage/strongbox-storage-layout-providers module. There should be thorough unit tests that check the implementation There should be a layout-specific Artifact Generator implemented which will be used for test purpose Artifact Controller \u00b6 Once you have created your module and created an implementation of the ArtifactCoorsinates , you can start implementing the protocol specific API. Most of the build and artifact management tools are using HTTP to interact with their end-points and in Strongbox we use Spring MVC for this. The BaseArtifactController.java should be extended with protocol-specific API methods (download, upload etc.). Notes There should be REST Assured based unit tests to check that artifact downloads/uploads handled with HTTP 200 response code Layout specific I/O extension \u00b6 To make the layout implementation truly usable, there should be some layout specific I/O, such as Streams ( InputStream , OutputStream ) and File System related entities ( FileSystemProvider , FileSystem , LayoutProvider ). Below is the set of base classes which need to be extended: LayoutFileSystem LayoutFileSystemProvider AbstractLayoutProvider Almost all components in Strongbox are managed by Spring's IoC container, the same goes for the for layout-related components and there should be the following factories to put everything into context: LayoutFileSystemProviderFactory LayoutFileSystemFactory Putting It All Together \u00b6 Strongbox has plugable layout providers, so once you have impelemted all the extension points, it should work out of the box. Below you can see how the general flow goes, based on the artifact download example: See Also \u00b6 Artifact Coordinates Artifact Coordinate Validators Storages Repositories Layout Providers Maven 2 Layout Provider NPM Layout Provider NuGet Layout Provider Raw Layout Provider","title":"Writing a layout provider"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#writing-a-layout-provider","text":"","title":"Writing a layout provider"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#concept","text":"We've tried to devise our architecture in a generic way that's easy to extend and work with. The illustration below is a top level overview of how artifact management is implemented in Strongbox within Storages , Repositories and Layout Providers : There are three layers and each of them decorates the underlying layer with the logic it's responsible for. For example, the following layer implementations are possible: Repository Hosted Proxy Group Layout Maven NPM NuGet Raw Storage File system AWS S3 (not yet implemented) Google Cloud (not yet implemented) All of the layers are loosely coupled, so implementations don't depend on each other. With the Decorator Pattern concept you can have any layer implementation combinations you need: Hosted + Maven + File System , Group + Npm + AWS etc.","title":"Concept"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#layout-implementation","text":"We can say that artifacts are just regular files, so our implementation is mainly based on the common JDK File I/O (Featuring NIO.2) entities. This is how it looks like: You will need to implement following entities: ConcreteLayoutFileSystemProvider ConcreteLayoutFileSystem LayoutProvider ArtifactCoordinates","title":"Layout Implementation"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#artifact-coordinates","text":"Each layout implementation should be able to identify artifacts and the Artifact Coordinates serves this purpose. These are the minimal requirements for ArtifactCoordinates.java implementations: - Each ArtifactCoordinates implementation should have an id and version . - Each id and version pair must be unique per repository. - There should be a transitive function to get ArtifactCoordinates from Path and vice-versa. Notes Each layout implementation should be placed in separate module under the strongbox-storage/strongbox-storage-layout-providers module. There should be thorough unit tests that check the implementation There should be a layout-specific Artifact Generator implemented which will be used for test purpose","title":"Artifact Coordinates"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#artifact-controller","text":"Once you have created your module and created an implementation of the ArtifactCoorsinates , you can start implementing the protocol specific API. Most of the build and artifact management tools are using HTTP to interact with their end-points and in Strongbox we use Spring MVC for this. The BaseArtifactController.java should be extended with protocol-specific API methods (download, upload etc.). Notes There should be REST Assured based unit tests to check that artifact downloads/uploads handled with HTTP 200 response code","title":"Artifact Controller"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#layout-specific-io-extension","text":"To make the layout implementation truly usable, there should be some layout specific I/O, such as Streams ( InputStream , OutputStream ) and File System related entities ( FileSystemProvider , FileSystem , LayoutProvider ). Below is the set of base classes which need to be extended: LayoutFileSystem LayoutFileSystemProvider AbstractLayoutProvider Almost all components in Strongbox are managed by Spring's IoC container, the same goes for the for layout-related components and there should be the following factories to put everything into context: LayoutFileSystemProviderFactory LayoutFileSystemFactory","title":"Layout specific I/O extension"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#putting-it-all-together","text":"Strongbox has plugable layout providers, so once you have impelemted all the extension points, it should work out of the box. Below you can see how the general flow goes, based on the artifact download example:","title":"Putting It All Together"},{"location":"developer-guide/layout-providers/how-to-implement-your-own-repository-format.html#see-also","text":"Artifact Coordinates Artifact Coordinate Validators Storages Repositories Layout Providers Maven 2 Layout Provider NPM Layout Provider NuGet Layout Provider Raw Layout Provider","title":"See Also"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html","text":"Maven Layout Provider \u00b6 Introduction \u00b6 Our support for Maven is handled via the Maven 2 Layout provider. The code is located under the strongbox-storage-maven-layout-provider module. We support Maven versions 2.x and higher. We do not support Maven versions 1.x, nor have virtual repositories that can do this conversion. What does \"Maven 2\" actually refer to? \u00b6 This layout provider supports Maven versions 2.x and higher. Collectively, these versions are referred to as \"Maven 2.0\", so that there could be a distinction between the early days Maven -- 1.x, which reached an end of life in June 2007 and was re-written from scratch and replaced by Maven 2.x. One of the main difference between Maven 1.x and 2.x is that Maven dropped the Ant-style (Jelly) declaration of tasks to be executed in favour of proper Maven plugins written in Java. Our implementation of the Maven 2 layout provider does not support Maven 1.x versions, since they have long reached an end-of-life. Artifact Coordinates \u00b6 This is the list of artifact coordinates supported by the provider: Coordinate Description Type groupId The group (package name) of the package Mandatory artifactId The name of the package Mandatory version The version of the package Mandatory extension The extension of the package Optional; defaults to jar classifier The classifier of the package Optional User Agent \u00b6 The accepted User-Agent headers supported must look like User-Agent=Maven/* . Custom Features \u00b6 This layout provider also indexes the artifacts using the Lucene-based Maven Indexer as explained below. Maven 2 Search Providers \u00b6 The Maven 2 layout provider uses the OrientDB (default) . Classes of Interest \u00b6 The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Coordinate Description MavenArtifactCoordinates This is an implementation of ArtifactCoordinates for Maven. Maven2LayoutProvider This is the actual implementation of the Maven 2 layout provider. MavenRepositoryFeatures This defines the custom layout provider features for Maven 2 (like the Maven Indexer ). MavenRepositoryManagementStrategy This class is used to handle the initialization of Maven 2 repositories. ArtifactIndexesServiceImpl This service class is used to manage Maven Indexer -related tasks. MavenIndexerSearchProvider This is an implementation of the Maven Indexer . ArtifactMetadataServiceImpl This service is used to manage Maven Metadata . MavenArtifactController This is the Maven 2-specific implementation of the BaseArtifactController . See Also \u00b6 Maven Indexer Maven Metadata Writing a layout provider \"Hello, Strongbox!\" Example Using Maven","title":"Maven Layout Provider"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#maven-layout-provider","text":"","title":"Maven Layout Provider"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#introduction","text":"Our support for Maven is handled via the Maven 2 Layout provider. The code is located under the strongbox-storage-maven-layout-provider module. We support Maven versions 2.x and higher. We do not support Maven versions 1.x, nor have virtual repositories that can do this conversion.","title":"Introduction"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#what-does-maven-2-actually-refer-to","text":"This layout provider supports Maven versions 2.x and higher. Collectively, these versions are referred to as \"Maven 2.0\", so that there could be a distinction between the early days Maven -- 1.x, which reached an end of life in June 2007 and was re-written from scratch and replaced by Maven 2.x. One of the main difference between Maven 1.x and 2.x is that Maven dropped the Ant-style (Jelly) declaration of tasks to be executed in favour of proper Maven plugins written in Java. Our implementation of the Maven 2 layout provider does not support Maven 1.x versions, since they have long reached an end-of-life.","title":"What does \"Maven 2\" actually refer to?"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#artifact-coordinates","text":"This is the list of artifact coordinates supported by the provider: Coordinate Description Type groupId The group (package name) of the package Mandatory artifactId The name of the package Mandatory version The version of the package Mandatory extension The extension of the package Optional; defaults to jar classifier The classifier of the package Optional","title":"Artifact Coordinates"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#user-agent","text":"The accepted User-Agent headers supported must look like User-Agent=Maven/* .","title":"User Agent"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#custom-features","text":"This layout provider also indexes the artifacts using the Lucene-based Maven Indexer as explained below.","title":"Custom Features"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#maven-2-search-providers","text":"The Maven 2 layout provider uses the OrientDB (default) .","title":"Maven 2 Search Providers"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#classes-of-interest","text":"The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Coordinate Description MavenArtifactCoordinates This is an implementation of ArtifactCoordinates for Maven. Maven2LayoutProvider This is the actual implementation of the Maven 2 layout provider. MavenRepositoryFeatures This defines the custom layout provider features for Maven 2 (like the Maven Indexer ). MavenRepositoryManagementStrategy This class is used to handle the initialization of Maven 2 repositories. ArtifactIndexesServiceImpl This service class is used to manage Maven Indexer -related tasks. MavenIndexerSearchProvider This is an implementation of the Maven Indexer . ArtifactMetadataServiceImpl This service is used to manage Maven Metadata . MavenArtifactController This is the Maven 2-specific implementation of the BaseArtifactController .","title":"Classes of Interest"},{"location":"developer-guide/layout-providers/maven-2-layout-provider.html#see-also","text":"Maven Indexer Maven Metadata Writing a layout provider \"Hello, Strongbox!\" Example Using Maven","title":"See Also"},{"location":"developer-guide/layout-providers/npm-layout-provider.html","text":"NPM Layout Provider \u00b6 Introduction \u00b6 The NPM layout provider allows storing artifacts using the NPM format. The code is located under the strongbox-storage-npm-layout-provider module. Artifact Coordinates \u00b6 This is the list of artifact coordinates supported by the provider: Coordinate Description Type scope The scope of the package Optional name The name of the package Mandatory version The version of the package Mandatory User Agent \u00b6 The accepted User-Agent headers supported must look like User-Agent=npm/* . Supported Commands \u00b6 Following CLI commands supported: npm [adduser|login] npm publish npm install npm view npm search npm unpublish Classes of Interest \u00b6 The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Coordinate Description NpmArtifactCoordinates This is an implementation of ArtifactCoordinates for the NPM layout. Basically, there are no coordinates. NpmLayoutProvider This is the actual implementation of the NPM layout provider. NpmRepositoryFeatures This defines the custom layout provider features for the NPM layout provider. NpmRepositoryManagementStrategy This class is used to handle the initialization of NPM repositories. NpmArtifactController This is the NPM-specific implementation of the BaseArtifactController . See Also \u00b6 Writing a layout provider NPM Metadata","title":"NPM Layout Provider"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#npm-layout-provider","text":"","title":"NPM Layout Provider"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#introduction","text":"The NPM layout provider allows storing artifacts using the NPM format. The code is located under the strongbox-storage-npm-layout-provider module.","title":"Introduction"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#artifact-coordinates","text":"This is the list of artifact coordinates supported by the provider: Coordinate Description Type scope The scope of the package Optional name The name of the package Mandatory version The version of the package Mandatory","title":"Artifact Coordinates"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#user-agent","text":"The accepted User-Agent headers supported must look like User-Agent=npm/* .","title":"User Agent"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#supported-commands","text":"Following CLI commands supported: npm [adduser|login] npm publish npm install npm view npm search npm unpublish","title":"Supported Commands"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#classes-of-interest","text":"The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Coordinate Description NpmArtifactCoordinates This is an implementation of ArtifactCoordinates for the NPM layout. Basically, there are no coordinates. NpmLayoutProvider This is the actual implementation of the NPM layout provider. NpmRepositoryFeatures This defines the custom layout provider features for the NPM layout provider. NpmRepositoryManagementStrategy This class is used to handle the initialization of NPM repositories. NpmArtifactController This is the NPM-specific implementation of the BaseArtifactController .","title":"Classes of Interest"},{"location":"developer-guide/layout-providers/npm-layout-provider.html#see-also","text":"Writing a layout provider NPM Metadata","title":"See Also"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html","text":"NuGet Layout Provider \u00b6 Introduction \u00b6 Our support for NuGet is handled via the Nuget Layout provider. We currently only support NuGet protocol version 2.0. The code for the NuGet layout provider is located under the strongbox-storage-nuget-layout-provider module. Artifact Coordinates \u00b6 This is the list of artifact coordinates supported by the provider: Coordinate Description Type id The name of the package Mandatory version The version of the package Mandatory extension The extension of the package Mandatory User Agent \u00b6 The accepted User-Agent headers supported must look like User-Agent=NuGet/* . Custom Features \u00b6 This layout provider has feeds. NuGet 2 Search Provider \u00b6 The NuGet layout provider supports uses the OrientDB (default) . Supported Commands \u00b6 Following CLI commands supported: nuget publish nuget delete nuget install nuget list Classes of Interest \u00b6 The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Class Description NugetArtifactCoordinates This is an implementation of ArtifactCoordinates for NuGet. NugetLayoutProvider This is the actual implementation of the NuGet layout provider. NugetRepositoryFeatures This defines the custom layout provider features for NuGet (like, for example, feeds). NugetRepositoryManagementStrategy This class is used to handle the initialization of NuGet repositories. NugetArtifactController This is the NuGet-specific implementation of the BaseArtifactController . See Also \u00b6 Writing a layout provider \"Hello, Strongbox!\" Example Using NuGet and Mono \"Hello, Strongbox!\" Example Using NuGet and Visual Studio","title":"NuGet Layout Provider"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#nuget-layout-provider","text":"","title":"NuGet Layout Provider"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#introduction","text":"Our support for NuGet is handled via the Nuget Layout provider. We currently only support NuGet protocol version 2.0. The code for the NuGet layout provider is located under the strongbox-storage-nuget-layout-provider module.","title":"Introduction"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#artifact-coordinates","text":"This is the list of artifact coordinates supported by the provider: Coordinate Description Type id The name of the package Mandatory version The version of the package Mandatory extension The extension of the package Mandatory","title":"Artifact Coordinates"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#user-agent","text":"The accepted User-Agent headers supported must look like User-Agent=NuGet/* .","title":"User Agent"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#custom-features","text":"This layout provider has feeds.","title":"Custom Features"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#nuget-2-search-provider","text":"The NuGet layout provider supports uses the OrientDB (default) .","title":"NuGet 2 Search Provider"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#supported-commands","text":"Following CLI commands supported: nuget publish nuget delete nuget install nuget list","title":"Supported Commands"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#classes-of-interest","text":"The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Class Description NugetArtifactCoordinates This is an implementation of ArtifactCoordinates for NuGet. NugetLayoutProvider This is the actual implementation of the NuGet layout provider. NugetRepositoryFeatures This defines the custom layout provider features for NuGet (like, for example, feeds). NugetRepositoryManagementStrategy This class is used to handle the initialization of NuGet repositories. NugetArtifactController This is the NuGet-specific implementation of the BaseArtifactController .","title":"Classes of Interest"},{"location":"developer-guide/layout-providers/nuget-layout-provider.html#see-also","text":"Writing a layout provider \"Hello, Strongbox!\" Example Using NuGet and Mono \"Hello, Strongbox!\" Example Using NuGet and Visual Studio","title":"See Also"},{"location":"developer-guide/layout-providers/raw-layout-provider.html","text":"Raw Layout Provider \u00b6 Introduction \u00b6 The Raw layout provider allows storing artifacts that have no particular strict format. The code for the Raw layout provider is located under the strongbox-storage-raw-layout-provider module. Warning This feature is currently highly experimental, under active development and it's implementation may change without warning. If you would like to try it out and find issues, please report them on the issue tracker. Artifact Coordinates \u00b6 This is the list of artifact coordinates supported by the provider: Coordinate Description Type path The path of the package Mandatory User Agent \u00b6 The accepted User-Agent headers supported must look like User-Agent=Raw/* . Classes of Interest \u00b6 The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Coordinate Description NullArtifactCoordinates This is an implementation of ArtifactCoordinates for the Raw layout. Basically, there are no coordinates. RawLayoutProvider This is the actual implementation of the Raw layout provider. RawRepositoryFeatures This defines the custom layout provider features for the Raw layout provider. RawRepositoryManagementStrategy This class is used to handle the initialization of Raw repositories. RawArtifactController This is the Raw-specific implementation of the BaseArtifactController . See Also \u00b6 Writing a layout provider","title":"Raw Layout Provider"},{"location":"developer-guide/layout-providers/raw-layout-provider.html#raw-layout-provider","text":"","title":"Raw Layout Provider"},{"location":"developer-guide/layout-providers/raw-layout-provider.html#introduction","text":"The Raw layout provider allows storing artifacts that have no particular strict format. The code for the Raw layout provider is located under the strongbox-storage-raw-layout-provider module. Warning This feature is currently highly experimental, under active development and it's implementation may change without warning. If you would like to try it out and find issues, please report them on the issue tracker.","title":"Introduction"},{"location":"developer-guide/layout-providers/raw-layout-provider.html#artifact-coordinates","text":"This is the list of artifact coordinates supported by the provider: Coordinate Description Type path The path of the package Mandatory","title":"Artifact Coordinates"},{"location":"developer-guide/layout-providers/raw-layout-provider.html#user-agent","text":"The accepted User-Agent headers supported must look like User-Agent=Raw/* .","title":"User Agent"},{"location":"developer-guide/layout-providers/raw-layout-provider.html#classes-of-interest","text":"The following are some of the most important classes you will need to be familiar with in order to work on this layout provider: Coordinate Description NullArtifactCoordinates This is an implementation of ArtifactCoordinates for the Raw layout. Basically, there are no coordinates. RawLayoutProvider This is the actual implementation of the Raw layout provider. RawRepositoryFeatures This defines the custom layout provider features for the Raw layout provider. RawRepositoryManagementStrategy This class is used to handle the initialization of Raw repositories. RawArtifactController This is the Raw-specific implementation of the BaseArtifactController .","title":"Classes of Interest"},{"location":"developer-guide/layout-providers/raw-layout-provider.html#see-also","text":"Writing a layout provider","title":"See Also"},{"location":"developer-guide/metadata/maven-metadata.html","text":"Maven Metadata \u00b6 What is stored in the Maven metadata? \u00b6 The maven-metadata.xml file is a place where Maven stores basic information about artifacts. It can contain useful data such as, for example: Which timestamped artifact file represents the current SNAPSHOT artifact What the latest deployed version of an artifact is What the most recent released version of an artifact is What plugins can be found under a groupId What other artifacts (apart from the main one) have been deployed to the repository (along with their extensions) What types of metadata are there and where are they stored? \u00b6 artifactId level maven-metadata.xml (located under, for example: org/carlspring/strongbox/metadata-example/maven-metadata.xml ). This is used for storing the top-level versions of artifacts. For example, if an artifact has versions 1.0 , 1.1 , 1.2 , this maven-metadata.xml will only contain version information about them. Example maven-metadata.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <metadata> <groupId> org.carlspring.strongbox </groupId> <artifactId> metadata-example </artifactId> <versioning> <latest> 1.2 </latest> <release> 1.2 </release> <versions> <version> 1.0 </version> <version> 1.1 </version> <version> 1.2 </version> </versions> <lastUpdated> 20150509185437 </lastUpdated> </versioning> </metadata> Artifact version -level maven-metadata.xml (located under, for example: org/carlspring/strongbox/strongbox-metadata/2.0-SNAPSHOT/maven-metadata.xml ). This is used only for timestamped SNAPSHOT versioned artifacts. The purpose of this file is to contain a list of the existing timestamped artifacts, while at the same time specifying which one of them is the latest deployed one that should be used as the actual SNAPSHOT artifact to be resolved by Maven. The following is a brief example which illustrates the case where two timestamped SNAPSHOT artifacts have been deployed. Each deployment of an artifact increments the <buildNumber/> and updates the <timestamp/> fields. Example maven-metadata.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <metadata> <groupId> org.carlspring.strongbox </groupId> <artifactId> strongbox-metadata </artifactId> <version> 2.0-SNAPSHOT </version> <versioning> <snapshot> <timestamp> 20150508.221712 </timestamp> <buildNumber> 2 </buildNumber> </snapshot> <lastUpdated> 20150508221310 </lastUpdated> <snapshotVersions> <snapshotVersion> <classifier> javadoc </classifier> <extension> jar </extension> <value> 2.0-20150508.220658-1 </value> <updated> 20150508220658 </updated> </snapshotVersion> <snapshotVersion> <extension> jar </extension> <value> 2.0-20150508.220658-1 </value> <updated> 20150508220658 </updated> </snapshotVersion> <snapshotVersion> <extension> pom </extension> <value> 2.0-20150508.220658-1 </value> <updated> 20150508220658 </updated> </snapshotVersion> <snapshotVersion> <classifier> javadoc </classifier> <extension> jar </extension> <value> 2.0-20150508.221205-2 </value> <updated> 20150508221205 </updated> </snapshotVersion> <snapshotVersion> <extension> jar </extension> <value> 2.0-20150508.221205-2 </value> <updated> 20150508221205 </updated> </snapshotVersion> <snapshotVersion> <extension> pom </extension> <value> 2.0-20150508.221205-2 </value> <updated> 20150508221205 </updated> </snapshotVersion> </snapshotVersions> </versioning> </metadata> groupId -level plugin information for plugins (located under, for example: org/carlspring/maven/maven-metadata.xml ). This is a top-level maven-metadata.xml file containing a list of the available plugins under this groupId . This type of maven-metadata.xml file contains only <plugins/> and provides no version information. Example maven-metadata.xml <metadata> <plugins> <plugin> <name> Maven Derby Plugin </name> <prefix> derby </prefix> <artifactId> derby-maven-plugin </artifactId> </plugin> <plugin> <name> LittleProxy Maven Plugin </name> <prefix> little-proxy </prefix> <artifactId> little-proxy-maven-plugin </artifactId> </plugin> <plugin> <name> Maven Artifact Relocation Plugin </name> <prefix> relocation </prefix> <artifactId> relocation-maven-plugin </artifactId> </plugin> </plugins> </metadata> Additional cases \u00b6 When generating metadata, the following maven-metadata.xml files need to be produced for each of these cases: For artifacts with a released version (for example, 1.2.3 , 1.2.4 , etc), under the path to the artifact's root directory (for example, org/carlspring/strongbox/metadata ), there needs to be a maven-metadata.xml containing the list of released versions. For artifacts with a SNAPSHOT version (for example, 1.2.3-SNAPSHOT , 1.2.4-SNAPSHOT , etc), under the path to the artifact's root directory (for example, org/carlspring/strongbox/metadata ), there will need to be a maven-metadata.xml containing the list of SNAPSHOT versions. In addition to that, in each of the version directories, a separate maven-metadata.xml needs to exist, which, (as explained above), will contain a mapping of which timestamped artifacts have been deployed and which one of them represents the latest SNAPSHOT . For Maven plugins, under the plugin's groupId path there needs to be a maven-metadata.xml which lists all the plugins under this groupId . In addition, depending on whether this is a release or SNAPSHOT version, the same rules for artifacts apply, as explained above. What is the latest field used for? \u00b6 The <latest/> field is used to point to the most-recently deployed (release, or SNAPSHOT ) artifact. Please note, that this is not always necessarily the highest available version. For example, if you have several active branches under version control from which you're deploying versions of the artifact (for example 1.2 and 2.0 branches from which you respectively release artifacts with versions 1.2.1 , 1.2.2 , etc. and 2.0.1 , 2.0.2 ), you may have the case where an artifact from the 1.2 branch been deployed while at the same time there is also a 2.0.3 version as well. Depending on the repository type, the <latest/> field may also be pointing to SNAPSHOT artifacts as well. What is the release field used for? \u00b6 The <release/> field is used to point to the most-recently deployed release artifact. Please note, that this is not always necessarily the highest available version. For example, if you have several active branches under version control from which you're releasing and deploying versions of the artifact (for example 1.2 and 2.0 branches from which you respectively release artifacts with versions 1.2.1 , 1.2.2 , etc. and, respectively, 2.0.1 , 2.0.2 ), you may have the case where an artifact from the 1.2 branch has been deployed while at the same time there is also a 2.0.3 version as well. What's the difference between maven-metadata.xml and maven-metadata-xyz.xml ? \u00b6 In remote repositories, the metadata generated by Maven (and/or managed by the respective artifact repository manager) is stored in a maven-metadata.xml file. In local repositories, Maven stores the collected metadata from the remote server into a maven-metadata-${repositoryServerId}.xml file where ${repositoryServerId} is the server id stored in your Maven settings.xml (for example <server><id>development-snapshots</id></server> ). What produces the maven-metadata.xml files and who manages it? \u00b6 When you deploy an artifact to a remote repository, Maven will check if there is an existing maven-metadata.xml (of the respectively required type(s)) on the remote host. If the file(s) exist, Maven will use that data, merge the necessary changes into a new copy and then overwrite the data on the remote. If there is no existing maven-metadata.xml in the remote repository, Maven will generate a new one and deploy it. Sometimes the data in the repository can become corrupt and this is when the repository manager needs to be told to rebuild it (or, alternatively, a scheduled task on the repository manager can take care of this to pre-emptively fix it). What are the official resources on Maven metadata? \u00b6 Maven Metadata: Introduction Maven Metadata: Reference Maven Metadata: Javadocs Maven 3.x Compatibility Notes (contains various useful comments on behavioral changes in Maven 3.x, compared to 2.x). See Also \u00b6 How does Maven plugin prefix resolution work? Why is it resolving \u201cfindbugs\u201d but not \u201cjetty\u201d? StackOverflow: [maven-metadata]","title":"Maven Metadata"},{"location":"developer-guide/metadata/maven-metadata.html#maven-metadata","text":"","title":"Maven Metadata"},{"location":"developer-guide/metadata/maven-metadata.html#what-is-stored-in-the-maven-metadata","text":"The maven-metadata.xml file is a place where Maven stores basic information about artifacts. It can contain useful data such as, for example: Which timestamped artifact file represents the current SNAPSHOT artifact What the latest deployed version of an artifact is What the most recent released version of an artifact is What plugins can be found under a groupId What other artifacts (apart from the main one) have been deployed to the repository (along with their extensions)","title":"What is stored in the Maven metadata?"},{"location":"developer-guide/metadata/maven-metadata.html#what-types-of-metadata-are-there-and-where-are-they-stored","text":"artifactId level maven-metadata.xml (located under, for example: org/carlspring/strongbox/metadata-example/maven-metadata.xml ). This is used for storing the top-level versions of artifacts. For example, if an artifact has versions 1.0 , 1.1 , 1.2 , this maven-metadata.xml will only contain version information about them. Example maven-metadata.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <metadata> <groupId> org.carlspring.strongbox </groupId> <artifactId> metadata-example </artifactId> <versioning> <latest> 1.2 </latest> <release> 1.2 </release> <versions> <version> 1.0 </version> <version> 1.1 </version> <version> 1.2 </version> </versions> <lastUpdated> 20150509185437 </lastUpdated> </versioning> </metadata> Artifact version -level maven-metadata.xml (located under, for example: org/carlspring/strongbox/strongbox-metadata/2.0-SNAPSHOT/maven-metadata.xml ). This is used only for timestamped SNAPSHOT versioned artifacts. The purpose of this file is to contain a list of the existing timestamped artifacts, while at the same time specifying which one of them is the latest deployed one that should be used as the actual SNAPSHOT artifact to be resolved by Maven. The following is a brief example which illustrates the case where two timestamped SNAPSHOT artifacts have been deployed. Each deployment of an artifact increments the <buildNumber/> and updates the <timestamp/> fields. Example maven-metadata.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <metadata> <groupId> org.carlspring.strongbox </groupId> <artifactId> strongbox-metadata </artifactId> <version> 2.0-SNAPSHOT </version> <versioning> <snapshot> <timestamp> 20150508.221712 </timestamp> <buildNumber> 2 </buildNumber> </snapshot> <lastUpdated> 20150508221310 </lastUpdated> <snapshotVersions> <snapshotVersion> <classifier> javadoc </classifier> <extension> jar </extension> <value> 2.0-20150508.220658-1 </value> <updated> 20150508220658 </updated> </snapshotVersion> <snapshotVersion> <extension> jar </extension> <value> 2.0-20150508.220658-1 </value> <updated> 20150508220658 </updated> </snapshotVersion> <snapshotVersion> <extension> pom </extension> <value> 2.0-20150508.220658-1 </value> <updated> 20150508220658 </updated> </snapshotVersion> <snapshotVersion> <classifier> javadoc </classifier> <extension> jar </extension> <value> 2.0-20150508.221205-2 </value> <updated> 20150508221205 </updated> </snapshotVersion> <snapshotVersion> <extension> jar </extension> <value> 2.0-20150508.221205-2 </value> <updated> 20150508221205 </updated> </snapshotVersion> <snapshotVersion> <extension> pom </extension> <value> 2.0-20150508.221205-2 </value> <updated> 20150508221205 </updated> </snapshotVersion> </snapshotVersions> </versioning> </metadata> groupId -level plugin information for plugins (located under, for example: org/carlspring/maven/maven-metadata.xml ). This is a top-level maven-metadata.xml file containing a list of the available plugins under this groupId . This type of maven-metadata.xml file contains only <plugins/> and provides no version information. Example maven-metadata.xml <metadata> <plugins> <plugin> <name> Maven Derby Plugin </name> <prefix> derby </prefix> <artifactId> derby-maven-plugin </artifactId> </plugin> <plugin> <name> LittleProxy Maven Plugin </name> <prefix> little-proxy </prefix> <artifactId> little-proxy-maven-plugin </artifactId> </plugin> <plugin> <name> Maven Artifact Relocation Plugin </name> <prefix> relocation </prefix> <artifactId> relocation-maven-plugin </artifactId> </plugin> </plugins> </metadata>","title":"What types of metadata are there and where are they stored?"},{"location":"developer-guide/metadata/maven-metadata.html#additional-cases","text":"When generating metadata, the following maven-metadata.xml files need to be produced for each of these cases: For artifacts with a released version (for example, 1.2.3 , 1.2.4 , etc), under the path to the artifact's root directory (for example, org/carlspring/strongbox/metadata ), there needs to be a maven-metadata.xml containing the list of released versions. For artifacts with a SNAPSHOT version (for example, 1.2.3-SNAPSHOT , 1.2.4-SNAPSHOT , etc), under the path to the artifact's root directory (for example, org/carlspring/strongbox/metadata ), there will need to be a maven-metadata.xml containing the list of SNAPSHOT versions. In addition to that, in each of the version directories, a separate maven-metadata.xml needs to exist, which, (as explained above), will contain a mapping of which timestamped artifacts have been deployed and which one of them represents the latest SNAPSHOT . For Maven plugins, under the plugin's groupId path there needs to be a maven-metadata.xml which lists all the plugins under this groupId . In addition, depending on whether this is a release or SNAPSHOT version, the same rules for artifacts apply, as explained above.","title":"Additional cases"},{"location":"developer-guide/metadata/maven-metadata.html#what-is-the-latest-field-used-for","text":"The <latest/> field is used to point to the most-recently deployed (release, or SNAPSHOT ) artifact. Please note, that this is not always necessarily the highest available version. For example, if you have several active branches under version control from which you're deploying versions of the artifact (for example 1.2 and 2.0 branches from which you respectively release artifacts with versions 1.2.1 , 1.2.2 , etc. and 2.0.1 , 2.0.2 ), you may have the case where an artifact from the 1.2 branch been deployed while at the same time there is also a 2.0.3 version as well. Depending on the repository type, the <latest/> field may also be pointing to SNAPSHOT artifacts as well.","title":"What is the latest field used for?"},{"location":"developer-guide/metadata/maven-metadata.html#what-is-the-release-field-used-for","text":"The <release/> field is used to point to the most-recently deployed release artifact. Please note, that this is not always necessarily the highest available version. For example, if you have several active branches under version control from which you're releasing and deploying versions of the artifact (for example 1.2 and 2.0 branches from which you respectively release artifacts with versions 1.2.1 , 1.2.2 , etc. and, respectively, 2.0.1 , 2.0.2 ), you may have the case where an artifact from the 1.2 branch has been deployed while at the same time there is also a 2.0.3 version as well.","title":"What is the release field used for?"},{"location":"developer-guide/metadata/maven-metadata.html#whats-the-difference-between-maven-metadataxml-and-maven-metadata-xyzxml","text":"In remote repositories, the metadata generated by Maven (and/or managed by the respective artifact repository manager) is stored in a maven-metadata.xml file. In local repositories, Maven stores the collected metadata from the remote server into a maven-metadata-${repositoryServerId}.xml file where ${repositoryServerId} is the server id stored in your Maven settings.xml (for example <server><id>development-snapshots</id></server> ).","title":"What's the difference between maven-metadata.xml and maven-metadata-xyz.xml?"},{"location":"developer-guide/metadata/maven-metadata.html#what-produces-the-maven-metadataxml-files-and-who-manages-it","text":"When you deploy an artifact to a remote repository, Maven will check if there is an existing maven-metadata.xml (of the respectively required type(s)) on the remote host. If the file(s) exist, Maven will use that data, merge the necessary changes into a new copy and then overwrite the data on the remote. If there is no existing maven-metadata.xml in the remote repository, Maven will generate a new one and deploy it. Sometimes the data in the repository can become corrupt and this is when the repository manager needs to be told to rebuild it (or, alternatively, a scheduled task on the repository manager can take care of this to pre-emptively fix it).","title":"What produces the maven-metadata.xml files and who manages it?"},{"location":"developer-guide/metadata/maven-metadata.html#what-are-the-official-resources-on-maven-metadata","text":"Maven Metadata: Introduction Maven Metadata: Reference Maven Metadata: Javadocs Maven 3.x Compatibility Notes (contains various useful comments on behavioral changes in Maven 3.x, compared to 2.x).","title":"What are the official resources on Maven metadata?"},{"location":"developer-guide/metadata/maven-metadata.html#see-also","text":"How does Maven plugin prefix resolution work? Why is it resolving \u201cfindbugs\u201d but not \u201cjetty\u201d? StackOverflow: [maven-metadata]","title":"See Also"},{"location":"developer-guide/metadata/npm-metadata.html","text":"NPM Metadata \u00b6 The code for the NPM Metadata implementation can be found in the strongbox-npm-metadata module. package.json \u00b6 Every npm package is packed as a tgz archive which contains package.json inside. It defines all the necessary information about the package like: who developed this package, which packages it depends on, license, etc. Registry API \u00b6 There are different metadata levels which can be fetched using the NPM REST API . Package \u00b6 Package level metadata contains all package versions, last version can be found there under dist-tags section. Example: GET http://localhost:48080/storage/repository/@strongbox/hello-strongbox-npm Version \u00b6 Package version level defines concrete package version. It looks much like package.json , but also it contains some additional sections like dist , to determine package integrity, and others. Example: GET http://localhost:48080/storage/repository/@strongbox/hello-strongbox-npm/1.0.0 Changes \u00b6 This is a feed which is like a continuous registry of changes and it's also called the Replicate API . Strongbox uses this feed to get proxy repositories synced with the remote registry. Example: GET https://replicate.npmjs.com/_changes Every change has a sequenced ID, so it's possible to get changes made starting from some point: https://replicate.npmjs.com/_changes?since=1000000&include_docs=true It can also be filtered like below: POST https://replicate.npmjs.com/_changes?filter=_doc_ids&include_docs=true Body { \"doc_ids\": [ \"@strongbox/hello-strongbox-npm\" ] }","title":"NPM Metadata"},{"location":"developer-guide/metadata/npm-metadata.html#npm-metadata","text":"The code for the NPM Metadata implementation can be found in the strongbox-npm-metadata module.","title":"NPM Metadata"},{"location":"developer-guide/metadata/npm-metadata.html#packagejson","text":"Every npm package is packed as a tgz archive which contains package.json inside. It defines all the necessary information about the package like: who developed this package, which packages it depends on, license, etc.","title":"package.json"},{"location":"developer-guide/metadata/npm-metadata.html#registry-api","text":"There are different metadata levels which can be fetched using the NPM REST API .","title":"Registry API"},{"location":"developer-guide/metadata/npm-metadata.html#package","text":"Package level metadata contains all package versions, last version can be found there under dist-tags section. Example: GET http://localhost:48080/storage/repository/@strongbox/hello-strongbox-npm","title":"Package"},{"location":"developer-guide/metadata/npm-metadata.html#version","text":"Package version level defines concrete package version. It looks much like package.json , but also it contains some additional sections like dist , to determine package integrity, and others. Example: GET http://localhost:48080/storage/repository/@strongbox/hello-strongbox-npm/1.0.0","title":"Version"},{"location":"developer-guide/metadata/npm-metadata.html#changes","text":"This is a feed which is like a continuous registry of changes and it's also called the Replicate API . Strongbox uses this feed to get proxy repositories synced with the remote registry. Example: GET https://replicate.npmjs.com/_changes Every change has a sequenced ID, so it's possible to get changes made starting from some point: https://replicate.npmjs.com/_changes?since=1000000&include_docs=true It can also be filtered like below: POST https://replicate.npmjs.com/_changes?filter=_doc_ids&include_docs=true Body { \"doc_ids\": [ \"@strongbox/hello-strongbox-npm\" ] }","title":"Changes"},{"location":"hackfests/index.html","text":"Hackfest Guidelines \u00b6 We understand that Opensource projects can't be successful and prosper, unless there is a community of developers actively contributing to the future of the project. This is why we've been working hard on getting together subject matter experts (SME-s), enthusiasts and setting up a friendly and welcoming environment to work in. Our project is open to contributions of all kinds. We would like to invite you to join in and help out with whatever topics you think you might be able contribute to. We have been participating in #Hacktoberfest (since 2017) and the annual Grace Hopper Celebration Open Source Day (since 2020) and we believe we have a good understanding of how work for such events should be organized and moderated. We also have mentors on our chat that are always willing to lend a hand. Hackfest Organizers \u00b6 If you're planning on organizing a hackfest and are looking for interesting projects to contribute to, then look no further! Please, get in touch with us via our chat channel, or contact us for details on what topics we could use help with. We will do our best to accommodate the level of your participants and provide tasks that they should be able to handle. (Please, check below for the requirements for participating). Participants \u00b6 We would like to welcome participants from all backgrounds, but would like to ask you to check our requirements below. There we have tasks of various types (coding, reviewing, testing, documentation, etc) and we usually have enough simple tasks to accommodate new-joiners. Our advice is to pick simpler tasks in the beginning, even if you're a seasoned developer, so that you can get an understanding of what our process is (from development, coding convention and testing to code reviews and acceptance criteria). Requirements For Participating \u00b6 While we understand that we all have to start from somewhere, we expect that contributors: Will have sufficient knowledge of coding in Java in order to work independently. Will have at least a basic understanding of Git. Will have at least a basic understanding of Maven. Will have at least a basic understanding of testing principles. We can offer guidance and advice throughout the process of your development, but we can't offer too much hand-holding, as we have limited time and resources. In addition to the above, you will need: At least 16 GB RAM Intel i7 (or an equivalent), or higher with at least 4 cores At least 20 GB free space Linux, MacOS, or Windows 10 An IDE (we use predominantly IntelliJ Idea, which you can get for free, but if you're experience with other IDE-s, this is up to you, however, it's unlike we'll be able to help you with configuration issues for these) Getting Set Up \u00b6 Please, have a look at our Developer's Guide. We try to keep our articles straight and to the point, so that you can get up to speed with minimal efforts. Please, don't just skim vaguely through the articles below (and miss out half of the important things that are already explained in the pages). We've taken the time and effort to make this as simple, as possible for both you as a contributor and us, as maintainers. Please, have a good read through the following articles: Code of Conduct Building The Code Coding Convention Writing Tests Finding Issues To Help With \u00b6 We can always use an extra hand with our issues which is why we try to keep the issues well-documented and clearly labelled. Please, consider starting off with issues with the following labels: Our Contributor's License Agreement (ICLA) \u00b6 In order to contribute to our project, you need to accept that your work will be shared with the community under the Apache 2.0 License and you will also need to sign our ICLA and send it back to us as explained in the Contributing page. Please, make sure any work you contribute to our project is your own, or is contributed on behalf an organization that you represent, or have the author's written permission.","title":"Hackfest Guidelines"},{"location":"hackfests/index.html#hackfest-guidelines","text":"We understand that Opensource projects can't be successful and prosper, unless there is a community of developers actively contributing to the future of the project. This is why we've been working hard on getting together subject matter experts (SME-s), enthusiasts and setting up a friendly and welcoming environment to work in. Our project is open to contributions of all kinds. We would like to invite you to join in and help out with whatever topics you think you might be able contribute to. We have been participating in #Hacktoberfest (since 2017) and the annual Grace Hopper Celebration Open Source Day (since 2020) and we believe we have a good understanding of how work for such events should be organized and moderated. We also have mentors on our chat that are always willing to lend a hand.","title":"Hackfest Guidelines"},{"location":"hackfests/index.html#hackfest-organizers","text":"If you're planning on organizing a hackfest and are looking for interesting projects to contribute to, then look no further! Please, get in touch with us via our chat channel, or contact us for details on what topics we could use help with. We will do our best to accommodate the level of your participants and provide tasks that they should be able to handle. (Please, check below for the requirements for participating).","title":"Hackfest Organizers"},{"location":"hackfests/index.html#participants","text":"We would like to welcome participants from all backgrounds, but would like to ask you to check our requirements below. There we have tasks of various types (coding, reviewing, testing, documentation, etc) and we usually have enough simple tasks to accommodate new-joiners. Our advice is to pick simpler tasks in the beginning, even if you're a seasoned developer, so that you can get an understanding of what our process is (from development, coding convention and testing to code reviews and acceptance criteria).","title":"Participants"},{"location":"hackfests/index.html#requirements-for-participating","text":"While we understand that we all have to start from somewhere, we expect that contributors: Will have sufficient knowledge of coding in Java in order to work independently. Will have at least a basic understanding of Git. Will have at least a basic understanding of Maven. Will have at least a basic understanding of testing principles. We can offer guidance and advice throughout the process of your development, but we can't offer too much hand-holding, as we have limited time and resources. In addition to the above, you will need: At least 16 GB RAM Intel i7 (or an equivalent), or higher with at least 4 cores At least 20 GB free space Linux, MacOS, or Windows 10 An IDE (we use predominantly IntelliJ Idea, which you can get for free, but if you're experience with other IDE-s, this is up to you, however, it's unlike we'll be able to help you with configuration issues for these)","title":"Requirements For Participating"},{"location":"hackfests/index.html#getting-set-up","text":"Please, have a look at our Developer's Guide. We try to keep our articles straight and to the point, so that you can get up to speed with minimal efforts. Please, don't just skim vaguely through the articles below (and miss out half of the important things that are already explained in the pages). We've taken the time and effort to make this as simple, as possible for both you as a contributor and us, as maintainers. Please, have a good read through the following articles: Code of Conduct Building The Code Coding Convention Writing Tests","title":"Getting Set Up"},{"location":"hackfests/index.html#finding-issues-to-help-with","text":"We can always use an extra hand with our issues which is why we try to keep the issues well-documented and clearly labelled. Please, consider starting off with issues with the following labels:","title":"Finding Issues To Help With"},{"location":"hackfests/index.html#our-contributors-license-agreement-icla","text":"In order to contribute to our project, you need to accept that your work will be shared with the community under the Apache 2.0 License and you will also need to sign our ICLA and send it back to us as explained in the Contributing page. Please, make sure any work you contribute to our project is your own, or is contributed on behalf an organization that you represent, or have the author's written permission.","title":"Our Contributor's License Agreement (ICLA)"},{"location":"hackfests/grace-hopper-celebration/index.html","text":"Grace Hopper Celebration Opensource Day \u00b6 In continuation of our involvement in previous hackfests , such as #Hacktoberfest , we have been invited to participate in the Grace Hopper Celebration 2020 Opensource Day . We are thrilled to be taking part in such a fantastic event that promotes diversity and inclusion and tries to get more women involved in the software industry! Who Was Grace Hopper? \u00b6 Grace Hopper was an American computer scientist and United States Navy rear admiral. She was one of the first programmers of the Harvard Mark I computer and a pioneer in computer programming. She invented one of the first linkers and popularized the idea of machine-independent programming languages, which led to the development of COBOL, an early high-level programming language still in use today. Grace Hopper Celebration \u00b6 To honor Grace Hopper\u2019s legacy and inspire future generations of women in tech, Dr. Anita Borg and Dr. Telle Whitney founded Grace Hopper Celebration (GHC) in 1994. The AnitaB.org flagship event brings the research and career interests of women in computing to the forefront, and highlights the contributions of women to the tech world. The Celebration results in collaborative proposals, networking, and mentoring for our attendees. GHC presenters are leaders in their respective fields who recognize the importance of diversity in tech. The Celebration also offers professional development through a variety of activities. Today, GHC is the world\u2019s largest gathering of women technologists, where women from around the world learn, network, and celebrate their achievements. AnitaB.org co-presents GHC with the Association of Computing Machinery (ACM). What is AnitaB.org? \u00b6 AnitaB.org is a nonprofit social enterprise inciting a movement to achieve intersectional equity in the global technical workforce by 2025. AnitaB.org/365 programs empower women and under-tapped communities in technical fields, guide the organizations that employ them, and support the academic institutions training the next generation. Founded in 1997 by our namesake, computer science visionary Anita Borg , and her co-founder and fellow computer scientist, Telle Whitney, AnitaB.org is driving a future where the people who imagine and build technology will mirror the people and societies for whom they build it. More \u00b6 AnitaB.org Grace Hopper Celebration Day Grace Hopper","title":"About Grace Hopper Celebration"},{"location":"hackfests/grace-hopper-celebration/index.html#grace-hopper-celebration-opensource-day","text":"In continuation of our involvement in previous hackfests , such as #Hacktoberfest , we have been invited to participate in the Grace Hopper Celebration 2020 Opensource Day . We are thrilled to be taking part in such a fantastic event that promotes diversity and inclusion and tries to get more women involved in the software industry!","title":"Grace Hopper Celebration Opensource Day"},{"location":"hackfests/grace-hopper-celebration/index.html#who-was-grace-hopper","text":"Grace Hopper was an American computer scientist and United States Navy rear admiral. She was one of the first programmers of the Harvard Mark I computer and a pioneer in computer programming. She invented one of the first linkers and popularized the idea of machine-independent programming languages, which led to the development of COBOL, an early high-level programming language still in use today.","title":"Who Was Grace Hopper?"},{"location":"hackfests/grace-hopper-celebration/index.html#grace-hopper-celebration","text":"To honor Grace Hopper\u2019s legacy and inspire future generations of women in tech, Dr. Anita Borg and Dr. Telle Whitney founded Grace Hopper Celebration (GHC) in 1994. The AnitaB.org flagship event brings the research and career interests of women in computing to the forefront, and highlights the contributions of women to the tech world. The Celebration results in collaborative proposals, networking, and mentoring for our attendees. GHC presenters are leaders in their respective fields who recognize the importance of diversity in tech. The Celebration also offers professional development through a variety of activities. Today, GHC is the world\u2019s largest gathering of women technologists, where women from around the world learn, network, and celebrate their achievements. AnitaB.org co-presents GHC with the Association of Computing Machinery (ACM).","title":"Grace Hopper Celebration"},{"location":"hackfests/grace-hopper-celebration/index.html#what-is-anitaborg","text":"AnitaB.org is a nonprofit social enterprise inciting a movement to achieve intersectional equity in the global technical workforce by 2025. AnitaB.org/365 programs empower women and under-tapped communities in technical fields, guide the organizations that employ them, and support the academic institutions training the next generation. Founded in 1997 by our namesake, computer science visionary Anita Borg , and her co-founder and fellow computer scientist, Telle Whitney, AnitaB.org is driving a future where the people who imagine and build technology will mirror the people and societies for whom they build it.","title":"What is AnitaB.org?"},{"location":"hackfests/grace-hopper-celebration/index.html#more","text":"AnitaB.org Grace Hopper Celebration Day Grace Hopper","title":"More"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html","text":"Grace Hopper Celebration Open Source Day (2020) \u00b6 About The Event \u00b6 The Grace Hopper Celebration: Opensource Day (2020) will be a one-day virtual event taking place on the 1 st of October. For more details, check here . Pre-requisites \u00b6 As a first step, please, make sure you have had a proper read through our page on Hackfests , as it provides all the information you will need. Plan \u00b6 We will host a 30 minute presentation of the project starting at 9:55 a.m. PT over Zoom. We will keep the Zoom conference line open between 9:55-18:00 PT. We will not use the Zoom chat for chatting, and will use the chat for this, as this will preserve the history. For more details, check here . Chat \u00b6 Please, note that the chat (on Slack) for the Grace Hopper Celebration Opensource Day will be hosted on AnitaB.org's infrastructure and this will not be the same as our own chat channel . You will need to be a registered participant of the event in order to join this chat. Please, note that the Slack chat channel will remain open for about 2 weeks after the event and will then be suspended. Help \u00b6 To help you stay on course, our partners at the Grace Hopper event have elected the following mentors that should be able to answer your basic technical needs: Prachi Sharma Priyanka Tiwari Sreeja Das Vaishnavi Mukundhan In addition to this we will have two of our founding members (marked as representatives): Martin Todorov ( carlspring ) Steve Todorov ( steve-todorov ) You can also take advice from our many contributors on our official channel. Here are some of them: Pablo Tirado ( ptirado ) Anki Tomar ( ankit ) Presentation \u00b6 We will give a brief presentation on: What Open Source is What Strongbox, what we have implemented so far and what we could use your help with You can find the presentation of the event here . Topics \u00b6 This section outlines the areas that we could you help with. Please, pick one that interests you, or one that you're experienced in. Dependency Upgrades \u00b6 We need to upgrade the dependencies in our master branch. A lot of these have become outdated due to our focus on the work for our #1649: Migrate Strongbox From OrientDB to JanusGraph task (done on the issues/1659 branch). The upgrades are done via the strongbox-parent project and are tested via the strongbox project. You will need to follow the steps outlines in the Upgrading Dependencies guide. A list of these tasks can be found here . Build plugins upgrade \u00b6 Plugins should be generally safer to upgrade, but there can sometimes be surprises, so please, check the section above for the Dependency Upgrades tasks. A list of these tasks can be found here . Look for ones with \"plugin\" in the title. Integration tests tool upgrade \u00b6 For our strongbox-web-integration-tests we have built our own Docker images and we need help with upgrading some of the tools we use in these images. Obviously, the upgrade will involve making sure that things are still working. Testing out our layout provider support with different versions of the tools under different operating systems \u00b6 We have currently implemented layout providers support for the Maven, NPM, Nuget and Raw and need more people to test these in different environments with the respective tools for them and to provide us feedback. Please, feel free to raise issues in our issue tracker, if you find and bugs. Stabilizing and testing the issues/1649 branch \u00b6 We need more people to test out our work on the issues/1649 branch and report any bugs that might be discovered. We'd also like to get some help with the sub-tasks of #1649: Migrate Strongbox From OrientDB to JanusGraph . JDK11 support \u00b6 We are working on introducing support for JDK11. The work for this is currently only for the issues/1649 branch, but we would like to apply the same changes to the master branch as well. For more details, you can check #1111: Test our build with JDK 11 and fix any issues with it . LDAP support \u00b6 We would like some help with further improving our support for LDAP. Here's a list of our tasks for our tasks for this.","title":"Grace Hopper Opensource Day (2020)"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#grace-hopper-celebration-open-source-day-2020","text":"","title":"Grace Hopper Celebration Open Source Day (2020)"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#about-the-event","text":"The Grace Hopper Celebration: Opensource Day (2020) will be a one-day virtual event taking place on the 1 st of October. For more details, check here .","title":"About The Event"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#pre-requisites","text":"As a first step, please, make sure you have had a proper read through our page on Hackfests , as it provides all the information you will need.","title":"Pre-requisites"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#plan","text":"We will host a 30 minute presentation of the project starting at 9:55 a.m. PT over Zoom. We will keep the Zoom conference line open between 9:55-18:00 PT. We will not use the Zoom chat for chatting, and will use the chat for this, as this will preserve the history. For more details, check here .","title":"Plan"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#chat","text":"Please, note that the chat (on Slack) for the Grace Hopper Celebration Opensource Day will be hosted on AnitaB.org's infrastructure and this will not be the same as our own chat channel . You will need to be a registered participant of the event in order to join this chat. Please, note that the Slack chat channel will remain open for about 2 weeks after the event and will then be suspended.","title":"Chat"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#help","text":"To help you stay on course, our partners at the Grace Hopper event have elected the following mentors that should be able to answer your basic technical needs: Prachi Sharma Priyanka Tiwari Sreeja Das Vaishnavi Mukundhan In addition to this we will have two of our founding members (marked as representatives): Martin Todorov ( carlspring ) Steve Todorov ( steve-todorov ) You can also take advice from our many contributors on our official channel. Here are some of them: Pablo Tirado ( ptirado ) Anki Tomar ( ankit )","title":"Help"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#presentation","text":"We will give a brief presentation on: What Open Source is What Strongbox, what we have implemented so far and what we could use your help with You can find the presentation of the event here .","title":"Presentation"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#topics","text":"This section outlines the areas that we could you help with. Please, pick one that interests you, or one that you're experienced in.","title":"Topics"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#dependency-upgrades","text":"We need to upgrade the dependencies in our master branch. A lot of these have become outdated due to our focus on the work for our #1649: Migrate Strongbox From OrientDB to JanusGraph task (done on the issues/1659 branch). The upgrades are done via the strongbox-parent project and are tested via the strongbox project. You will need to follow the steps outlines in the Upgrading Dependencies guide. A list of these tasks can be found here .","title":"Dependency Upgrades"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#build-plugins-upgrade","text":"Plugins should be generally safer to upgrade, but there can sometimes be surprises, so please, check the section above for the Dependency Upgrades tasks. A list of these tasks can be found here . Look for ones with \"plugin\" in the title.","title":"Build plugins upgrade"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#integration-tests-tool-upgrade","text":"For our strongbox-web-integration-tests we have built our own Docker images and we need help with upgrading some of the tools we use in these images. Obviously, the upgrade will involve making sure that things are still working.","title":"Integration tests tool upgrade"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#testing-out-our-layout-provider-support-with-different-versions-of-the-tools-under-different-operating-systems","text":"We have currently implemented layout providers support for the Maven, NPM, Nuget and Raw and need more people to test these in different environments with the respective tools for them and to provide us feedback. Please, feel free to raise issues in our issue tracker, if you find and bugs.","title":"Testing out our layout provider support with different versions of the tools under different operating systems"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#stabilizing-and-testing-the-issues1649-branch","text":"We need more people to test out our work on the issues/1649 branch and report any bugs that might be discovered. We'd also like to get some help with the sub-tasks of #1649: Migrate Strongbox From OrientDB to JanusGraph .","title":"Stabilizing and testing the issues/1649 branch"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#jdk11-support","text":"We are working on introducing support for JDK11. The work for this is currently only for the issues/1649 branch, but we would like to apply the same changes to the master branch as well. For more details, you can check #1111: Test our build with JDK 11 and fix any issues with it .","title":"JDK11 support"},{"location":"hackfests/grace-hopper-celebration/ghc-osd-2020.html#ldap-support","text":"We would like some help with further improving our support for LDAP. Here's a list of our tasks for our tasks for this.","title":"LDAP support"},{"location":"hackfests/hacktoberfest/index.html","text":"Hacktoberfest \u00b6 #Hacktoberfest is a global annual hackathon event that spans through the entire month of October. It celebrates Open Source Software and encourages companies and developers to contribute to Open Source projects. The main goal of the event is to raise the awareness for the Open Source community, but also to get both a wider adoption and an increase in the contributions and contributors to such projects. #Hacktoberfest is open to developers all levels of experience. #Hacktoberfest is sponsored by DigitalOcean , Github and Twilio . We are pleased to let you know that we have been participating in #Hacktoberfest since 2017! We are open to new contributors and would like to welcome you to our project! Rules of Participation \u00b6 You can find out all about the rules of participating here . You can also have a look at the Hacktoberfest Etiquette For Contributors . You can find more about our own rules in our Code of Conduct . How To Help \u00b6 Please, have a look at our Hackfest Guidelines , Developer's Guide , and, more specifically, the Getting Started and Building The Code articles. Once you are all set up, please have a look at our Coding Convention to see what our code style looks like and what rules we'd like you to follow. You can find issues you can help with in our issue tracker labelled as:","title":"Hacktoberfest"},{"location":"hackfests/hacktoberfest/index.html#hacktoberfest","text":"#Hacktoberfest is a global annual hackathon event that spans through the entire month of October. It celebrates Open Source Software and encourages companies and developers to contribute to Open Source projects. The main goal of the event is to raise the awareness for the Open Source community, but also to get both a wider adoption and an increase in the contributions and contributors to such projects. #Hacktoberfest is open to developers all levels of experience. #Hacktoberfest is sponsored by DigitalOcean , Github and Twilio . We are pleased to let you know that we have been participating in #Hacktoberfest since 2017! We are open to new contributors and would like to welcome you to our project!","title":"Hacktoberfest"},{"location":"hackfests/hacktoberfest/index.html#rules-of-participation","text":"You can find out all about the rules of participating here . You can also have a look at the Hacktoberfest Etiquette For Contributors . You can find more about our own rules in our Code of Conduct .","title":"Rules of Participation"},{"location":"hackfests/hacktoberfest/index.html#how-to-help","text":"Please, have a look at our Hackfest Guidelines , Developer's Guide , and, more specifically, the Getting Started and Building The Code articles. Once you are all set up, please have a look at our Coding Convention to see what our code style looks like and what rules we'd like you to follow. You can find issues you can help with in our issue tracker labelled as:","title":"How To Help"},{"location":"knowledge-base/artifact-coordinates.html","text":"Artifact Coordinates \u00b6 Introduction \u00b6 Artifact coordinates are an abstraction which allows you to identify an artifact (regardless of the type of artifact -- Maven, Ant, Nuget, RPM, etc). Coordinates could, for example be things like: groupId artifactId version type classifier The above is an example for Maven, however, the idea of coordinates, is to provide a more generic way to identify artifacts. Information For Developers \u00b6 As the different repository formats have different coordinate systems, there needs to be a separate implementation of the ArtifactCoordinates per repository layout, (best achieved by extending the AbstractArtifactCoordinates ). Mandatory Coordinates \u00b6 As a bare minimum, each implementation needs to provide the following two mandatory fields: id version The id would be the name/id of the artifact, whereas, the version would describe the version. Built-in Implementations \u00b6 Strongbox comes with the following built-in implementations: MavenArtifactCoordinates NpmArtifactCoordinates NugetArtifactCoordinates RawArtifactCoordinates (used by the Raw Layout Provider )","title":"Artifact Coordinates"},{"location":"knowledge-base/artifact-coordinates.html#artifact-coordinates","text":"","title":"Artifact Coordinates"},{"location":"knowledge-base/artifact-coordinates.html#introduction","text":"Artifact coordinates are an abstraction which allows you to identify an artifact (regardless of the type of artifact -- Maven, Ant, Nuget, RPM, etc). Coordinates could, for example be things like: groupId artifactId version type classifier The above is an example for Maven, however, the idea of coordinates, is to provide a more generic way to identify artifacts.","title":"Introduction"},{"location":"knowledge-base/artifact-coordinates.html#information-for-developers","text":"As the different repository formats have different coordinate systems, there needs to be a separate implementation of the ArtifactCoordinates per repository layout, (best achieved by extending the AbstractArtifactCoordinates ).","title":"Information For Developers"},{"location":"knowledge-base/artifact-coordinates.html#mandatory-coordinates","text":"As a bare minimum, each implementation needs to provide the following two mandatory fields: id version The id would be the name/id of the artifact, whereas, the version would describe the version.","title":"Mandatory Coordinates"},{"location":"knowledge-base/artifact-coordinates.html#built-in-implementations","text":"Strongbox comes with the following built-in implementations: MavenArtifactCoordinates NpmArtifactCoordinates NugetArtifactCoordinates RawArtifactCoordinates (used by the Raw Layout Provider )","title":"Built-in Implementations"},{"location":"knowledge-base/layout-providers.html","text":"Layout Providers \u00b6 Introduction \u00b6 The different layout formats (like Maven, NuGet, NPM and so on) are implemented as what we call layout providers . Layout providers are responsible for handling things like: Deployment of artifacts Resolving of artifacts Management of artifacts Implementation of commands and features, specific only to the respective layout provider See also \u00b6 Writing a layout provider Built-in providers","title":"Layout Providers"},{"location":"knowledge-base/layout-providers.html#layout-providers","text":"","title":"Layout Providers"},{"location":"knowledge-base/layout-providers.html#introduction","text":"The different layout formats (like Maven, NuGet, NPM and so on) are implemented as what we call layout providers . Layout providers are responsible for handling things like: Deployment of artifacts Resolving of artifacts Management of artifacts Implementation of commands and features, specific only to the respective layout provider","title":"Introduction"},{"location":"knowledge-base/layout-providers.html#see-also","text":"Writing a layout provider Built-in providers","title":"See also"},{"location":"knowledge-base/repositories.html","text":"Repositories \u00b6 General \u00b6 Similarly to sources and version control, artifact repositories are a place to store the compiled code. This reduces build times, as storing binaries in a central place removes the need to constantly recompile them. Version control, on the other hand is not an appropriate place to store binaries, as it causes source repositories to grow quite quickly and thus makes them gradually slower. Types \u00b6 Hosted Hosted repositories are a place where you can deploy your artifacts. Proxy Proxy repositories serve artifacts which are resolved from remote repositories and cached for local resolution. These repositories are a cache for proxied external repositories and the cache may have an expiration. It's therefore important to keep in mind that these caches can be wiped at any time. When a proxy repository is initially created, it's empty. Due to this, before an initial cache is built, these repositories can be a bit slow at the beginning. However, over a reasonably short amount time they become a lot faster, as the artifacts which are already cached are served from the local file system, instead of being re-requested over the network. It is not possible to deploy artifacts to these repositories. Group A repository group is a special kind of repository which aggregates a list of repositories and serves it's contents under the same URL. It is not possible to deploy artifacts to these repositories, they only serve them artifacts available via the repositories they are set up to serve. Group repositories can contain other nested group repositories. Group repositories allow you to: Define the ordering of the repositories they serve Define artifact routing rules Virtual Note: Virtual repositories are not yet implemented. Virtual repositories provide a bridge between different layout formats. Layouts \u00b6 Layouts is what different types of repositories are called (i.e. Maven layout repository, NPM layout repository, etc) Maven 2.x / 3.x Maven 2.x/3.x repositories are fully supported. We support hosted, proxy and group repositories. You can check here and here for an example quick start project. (TODO: fix link) NPM The NPM repository layout is currently under active development. It currently sufficiently functions in hosted, proxy and group repositories. Please, feel free to report issues on our issue tracker. Patches are always welcome! Nuget We support Nuget (protocol v2) for hosted, proxy and group repositories. You can check here for an example quick start project. Raw For the cases where repositories with an undefined structure are required, the Raw repositories could be used. We support hosted, proxy and group repositories. Policies \u00b6 Repository policies define the type of artifact versions which will be handled by the respective repository. Snapshot Repositories of this kind will only allow artifacts with snapshot versions ( 1.1-SNAPSHOT , 1.2-SNAPSHOT , etc) to be deployed. Release Repositories of this kind will only allow artifacts with fixed/released versions ( 1.1 , 1.2 , etc) to be deployed. Mixed Repositories of this kind will allow artifacts of both snapshot and release versions. This is usually used for group repositories, as they might contain both snapshot and release repositories. The repositoryId \u00b6 Each repository is identified by its Id and the storage that it belongs to. The repository's Id should be unique per storage and it may contain: All letters from the English_alphabet (upper and lowercase) All numerical digits 3 special characters: - (dash), _ (underscore) and . (dot) See Also \u00b6 Artifact Routing Rules Maven: Introduction to Repositories","title":"Repositories"},{"location":"knowledge-base/repositories.html#repositories","text":"","title":"Repositories"},{"location":"knowledge-base/repositories.html#general","text":"Similarly to sources and version control, artifact repositories are a place to store the compiled code. This reduces build times, as storing binaries in a central place removes the need to constantly recompile them. Version control, on the other hand is not an appropriate place to store binaries, as it causes source repositories to grow quite quickly and thus makes them gradually slower.","title":"General"},{"location":"knowledge-base/repositories.html#types","text":"Hosted Hosted repositories are a place where you can deploy your artifacts. Proxy Proxy repositories serve artifacts which are resolved from remote repositories and cached for local resolution. These repositories are a cache for proxied external repositories and the cache may have an expiration. It's therefore important to keep in mind that these caches can be wiped at any time. When a proxy repository is initially created, it's empty. Due to this, before an initial cache is built, these repositories can be a bit slow at the beginning. However, over a reasonably short amount time they become a lot faster, as the artifacts which are already cached are served from the local file system, instead of being re-requested over the network. It is not possible to deploy artifacts to these repositories. Group A repository group is a special kind of repository which aggregates a list of repositories and serves it's contents under the same URL. It is not possible to deploy artifacts to these repositories, they only serve them artifacts available via the repositories they are set up to serve. Group repositories can contain other nested group repositories. Group repositories allow you to: Define the ordering of the repositories they serve Define artifact routing rules Virtual Note: Virtual repositories are not yet implemented. Virtual repositories provide a bridge between different layout formats.","title":"Types"},{"location":"knowledge-base/repositories.html#layouts","text":"Layouts is what different types of repositories are called (i.e. Maven layout repository, NPM layout repository, etc) Maven 2.x / 3.x Maven 2.x/3.x repositories are fully supported. We support hosted, proxy and group repositories. You can check here and here for an example quick start project. (TODO: fix link) NPM The NPM repository layout is currently under active development. It currently sufficiently functions in hosted, proxy and group repositories. Please, feel free to report issues on our issue tracker. Patches are always welcome! Nuget We support Nuget (protocol v2) for hosted, proxy and group repositories. You can check here for an example quick start project. Raw For the cases where repositories with an undefined structure are required, the Raw repositories could be used. We support hosted, proxy and group repositories.","title":"Layouts"},{"location":"knowledge-base/repositories.html#policies","text":"Repository policies define the type of artifact versions which will be handled by the respective repository. Snapshot Repositories of this kind will only allow artifacts with snapshot versions ( 1.1-SNAPSHOT , 1.2-SNAPSHOT , etc) to be deployed. Release Repositories of this kind will only allow artifacts with fixed/released versions ( 1.1 , 1.2 , etc) to be deployed. Mixed Repositories of this kind will allow artifacts of both snapshot and release versions. This is usually used for group repositories, as they might contain both snapshot and release repositories.","title":"Policies"},{"location":"knowledge-base/repositories.html#the-repositoryid","text":"Each repository is identified by its Id and the storage that it belongs to. The repository's Id should be unique per storage and it may contain: All letters from the English_alphabet (upper and lowercase) All numerical digits 3 special characters: - (dash), _ (underscore) and . (dot)","title":"The repositoryId"},{"location":"knowledge-base/repositories.html#see-also","text":"Artifact Routing Rules Maven: Introduction to Repositories","title":"See Also"},{"location":"knowledge-base/storages.html","text":"Storages \u00b6 What are storages? \u00b6 Storages are an abstraction that groups repositories on a logical level. For example, assume you would like to have repositories which are per environment, team, product, or client and that you would like to keep these repositories detached from the rest of your repositories so that you can maintain more clarity on the state of your repositories and dependencies. You can group them under their own storages. For example, let's assume you have product and you would like to be able to know which repositories you are using for it exactly. You can create a separate storage for this product and define these repositories under it. You can also create a global storage that contains only remote repositories which you will be proxying. For each product, organization or client, you can then create separate storages which refer to the respective repositories in the global storage. Why use storages? \u00b6 The main benefits of using storages are: A logical separation of repositories based on their type A layer of strictness in terms of repository and artifact separation A clearer view on the state of the repositories and dependencies The storageId \u00b6 Each storage is identified by its unique Id. The storageId may contain: All letters from English_alphabet (upper and lowercase) All numerical digits 3 special characters: - (dash), _ (underscore) and . (dot)","title":"Storages"},{"location":"knowledge-base/storages.html#storages","text":"","title":"Storages"},{"location":"knowledge-base/storages.html#what-are-storages","text":"Storages are an abstraction that groups repositories on a logical level. For example, assume you would like to have repositories which are per environment, team, product, or client and that you would like to keep these repositories detached from the rest of your repositories so that you can maintain more clarity on the state of your repositories and dependencies. You can group them under their own storages. For example, let's assume you have product and you would like to be able to know which repositories you are using for it exactly. You can create a separate storage for this product and define these repositories under it. You can also create a global storage that contains only remote repositories which you will be proxying. For each product, organization or client, you can then create separate storages which refer to the respective repositories in the global storage.","title":"What are storages?"},{"location":"knowledge-base/storages.html#why-use-storages","text":"The main benefits of using storages are: A logical separation of repositories based on their type A layer of strictness in terms of repository and artifact separation A clearer view on the state of the repositories and dependencies","title":"Why use storages?"},{"location":"knowledge-base/storages.html#the-storageid","text":"Each storage is identified by its unique Id. The storageId may contain: All letters from English_alphabet (upper and lowercase) All numerical digits 3 special characters: - (dash), _ (underscore) and . (dot)","title":"The storageId"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html","text":"Maven Artifact Coordinate Validators \u00b6 The following are a list of Maven-specific artifact coordinate validators. Maven Release Version Validator \u00b6 This validator checks if the repository accepts release versions and whether the artifact version is a release. Configuration Key maven-release-version-validator Class org.carlspring.strongbox.storage.validation.version.MavenReleaseVersionValidator Enabled by default true Maven Snapshot Version Validator \u00b6 This validator checks if the repository accepts snapshot versions and whether the artifact version is a snapshot. Configuration Key maven-snapshot-version-validator Class org.carlspring.strongbox.storage.validation.version.MavenSnapshotVersionValidator Enabled by default true Maven groupId Lowercase Validator \u00b6 This validator checks, if the groupId of the Maven artifact is lowercase. Configuration Key maven-groupid-lowercase-validator Class org.carlspring.strongbox.storage.validation.groupid.MavenGroupIdLowercaseValidator Enabled by default false Maven artifactId Lowercase Validator \u00b6 This validator checks, if the groupId of the Maven artifact is lowercase. Configuration Key maven-artifactid-lowercase-validator Class org.carlspring.strongbox.storage.validation.artifactid.MavenArtifactIdLowercaseValidator Enabled by default false Semantic Versioning Validator \u00b6 This coordinate validator enforces semantic versioning. Configuration Key semantic-version-validator Class org.carlspring.strongbox.storage.validation.artifact.version.SemanticVersioningValidator Enabled by default false","title":"Maven"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html#maven-artifact-coordinate-validators","text":"The following are a list of Maven-specific artifact coordinate validators.","title":"Maven Artifact Coordinate Validators"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html#maven-release-version-validator","text":"This validator checks if the repository accepts release versions and whether the artifact version is a release. Configuration Key maven-release-version-validator Class org.carlspring.strongbox.storage.validation.version.MavenReleaseVersionValidator Enabled by default true","title":"Maven Release Version Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html#maven-snapshot-version-validator","text":"This validator checks if the repository accepts snapshot versions and whether the artifact version is a snapshot. Configuration Key maven-snapshot-version-validator Class org.carlspring.strongbox.storage.validation.version.MavenSnapshotVersionValidator Enabled by default true","title":"Maven Snapshot Version Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html#maven-groupid-lowercase-validator","text":"This validator checks, if the groupId of the Maven artifact is lowercase. Configuration Key maven-groupid-lowercase-validator Class org.carlspring.strongbox.storage.validation.groupid.MavenGroupIdLowercaseValidator Enabled by default false","title":"Maven groupId Lowercase Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html#maven-artifactid-lowercase-validator","text":"This validator checks, if the groupId of the Maven artifact is lowercase. Configuration Key maven-artifactid-lowercase-validator Class org.carlspring.strongbox.storage.validation.artifactid.MavenArtifactIdLowercaseValidator Enabled by default false","title":"Maven artifactId Lowercase Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators-maven.html#semantic-versioning-validator","text":"This coordinate validator enforces semantic versioning. Configuration Key semantic-version-validator Class org.carlspring.strongbox.storage.validation.artifact.version.SemanticVersioningValidator Enabled by default false","title":"Semantic Versioning Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html","text":"Artifact Coordinate Validators \u00b6 Introduction \u00b6 Artifact coordinate validators provide a way to verify that coordinate values match certain rules during deployment. These can be configured in the strongbox.xml file. Each layout provider has a set of default artifact coordinate validators that it uses, if non are specified. Generic Artifact Coordinate Validators \u00b6 GenericReleaseVersionValidator \u00b6 This is a generic validator that checks, if the artifact being deployed is using a release version and whether the target repository is also one with a release policy. Configuration Key generic-release-version-validator Class org.carlspring.strongbox.storage.validation.artifact.version.GenericReleaseVersionValidator Enabled by default false Generic Snapshot Version Validator \u00b6 This is a generic validator that checks, if the artifact being deployed is using a snapshot version and whether the target repository is also one with a snapshot policy. Configuration Key generic-snapshot-version-validator Class org.carlspring.strongbox.storage.validation.artifact.version.GenericSnapshotVersionValidator Enabled by default false Re-deployment Validator \u00b6 This validator checks if the repository allows the re-deployment of artifacts. Configuration Key redeployment-validator Class org.carlspring.strongbox.storage.validation.deployment.RedeploymentValidator Enabled by default true Configuration \u00b6 TODO: Default Artifact Version Coordinate Validators \u00b6 TODO:","title":"Generic"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#artifact-coordinate-validators","text":"","title":"Artifact Coordinate Validators"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#introduction","text":"Artifact coordinate validators provide a way to verify that coordinate values match certain rules during deployment. These can be configured in the strongbox.xml file. Each layout provider has a set of default artifact coordinate validators that it uses, if non are specified.","title":"Introduction"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#generic-artifact-coordinate-validators","text":"","title":"Generic Artifact Coordinate Validators"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#genericreleaseversionvalidator","text":"This is a generic validator that checks, if the artifact being deployed is using a release version and whether the target repository is also one with a release policy. Configuration Key generic-release-version-validator Class org.carlspring.strongbox.storage.validation.artifact.version.GenericReleaseVersionValidator Enabled by default false","title":"GenericReleaseVersionValidator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#generic-snapshot-version-validator","text":"This is a generic validator that checks, if the artifact being deployed is using a snapshot version and whether the target repository is also one with a snapshot policy. Configuration Key generic-snapshot-version-validator Class org.carlspring.strongbox.storage.validation.artifact.version.GenericSnapshotVersionValidator Enabled by default false","title":"Generic Snapshot Version Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#re-deployment-validator","text":"This validator checks if the repository allows the re-deployment of artifacts. Configuration Key redeployment-validator Class org.carlspring.strongbox.storage.validation.deployment.RedeploymentValidator Enabled by default true","title":"Re-deployment Validator"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#configuration","text":"TODO:","title":"Configuration"},{"location":"knowledge-base/artifact-coordinate-validators/artifact-coordinate-validators.html#default-artifact-version-coordinate-validators","text":"TODO:","title":"Default Artifact Version Coordinate Validators"},{"location":"user-guide/application-properties.html","text":"Application Properties \u00b6 The following is a list of configuration properties, which can be used to customize your installation. Each of these properties can be set either by exporting a variable or passing it as a property via -D . Tip Environment variables are in the format STRONGBOX_SOME_PROPERTY=value , however properties are in lower case and each _ is replaced with . so that it becomes -Dstrongbox.some.property=value Generic properties \u00b6 STRONGBOX_HOME \u00b6 The path in which strongbox-distribution is located. Type Default String . STRONGBOX_PORT \u00b6 The port on which Strongbox will be running. Type Default Integer 48080 STRONGBOX_VAULT \u00b6 The path in which the strongbox-vault will be kept. This includes the database and repository storage(s). Type Default String ${STRONGBOX_HOME}/../strongbox-vault STRONGBOX_CONFIG_FILE \u00b6 The path to the strongbox.yaml file. Type Default String ${STRONGBOX_HOME}/etc/conf/strongbox.yaml STRONGBOX_JVM_XMX \u00b6 Specify the maximum size of the memory allocation pool. Type Default String 512m Indexing properties \u00b6 STRONGBOX_DOWNLOAD_INDEXES \u00b6 Whether, or not to download the Maven indexes for remote repositories. Type Default Boolean true STRONGBOX_DOWNLOAD_INDEXES_${storageId}_* \u00b6 Whether, or not to download the Maven indexes for all remote repositories in the $storageId Type Default Boolean true STRONGBOX_DOWNLOAD_INDEXES_${storageId}_${repositoryId} \u00b6 Whether, or not to download the Maven indexes for a remote repository in a storage. If this is explicitly defined and strongbox.download.indexes and/or strongbox.download.indexes.${storageId}.* is defined, then the value specified by this option will override the others. Type Default Boolean true Logging properties \u00b6 These properties are used for configuring the logging - should logs be printed to the console, logged to a file or both? STRONGBOX_DEBUG \u00b6 When set to true , Strongbox will output debugging information. Type Default Boolean false when using strongbox-distribution ; true when running via mvn spring-boot:run STRONGBOX_LOG_CONSOLE_ENABLED \u00b6 When set to true , Strongbox will output the logs to the console Type Default Boolean false when using strongbox-distribution ; true when running via mvn spring-boot:run STRONGBOX_LOG_FILE_ENABLED \u00b6 When set to true , Strongbox will save the logs into log files under ./strongbox-vault/logs . STRONGBOX_LOG_FILE_SIZE_SINGLE \u00b6 The maximum file size of one log file. Type Default String 128M STRONGBOX_LOG_FILE_SIZE_TOTAL \u00b6 The maximum size of all log files. Type Default String 1GB STRONGBOX_LOG_FILE_HISTORY \u00b6 The maximum number of log files to keep. Type Default Integer 31 OrientDB properties \u00b6 STRONGBOX_ORIENTDB_HOST \u00b6 The host of OrientDB server. Type Default String 127.0.0.1 STRONGBOX_ORIENTDB_PORT \u00b6 The port of OrientDB server. Type Default Integer 2424 STRONGBOX_ORIENTDB_DATABASE \u00b6 The name of the OrientDB database. Type Default String strongbox STRONGBOX_ORIENTDB_USERNAME \u00b6 The username to use when connecting to OrientDB. Type Default String admin STRONGBOX_ORIENTDB_PASSWORD \u00b6 The password to use when connecting to OrientDB. Type Default String admin STRONGBOX_ORIENTDB_PROFILE \u00b6 OrientDB mode ( orientdb_EMBEDDED , orientdb_MEMORY or orientdb_REMOTE ) Type Default String orientdb_EMBEDDED OrientDB Studio \u00b6 STRONGBOX_ORIENTDB_STUDIO_ENABLED \u00b6 Enable OrientDB Web Studio Type Default Boolean false STRONGBOX_ORIENTDB_STUDIO_IP_ADDRESS \u00b6 IP address, which OrientDB Web Studio will be listening Type Default String 127.0.0.1 STRONGBOX_ORIENTDB_STUDIO_PORT \u00b6 Port, on which OrientDB Web Studio will be listening Type Default Integer 2480","title":"Application properties"},{"location":"user-guide/application-properties.html#application-properties","text":"The following is a list of configuration properties, which can be used to customize your installation. Each of these properties can be set either by exporting a variable or passing it as a property via -D . Tip Environment variables are in the format STRONGBOX_SOME_PROPERTY=value , however properties are in lower case and each _ is replaced with . so that it becomes -Dstrongbox.some.property=value","title":"Application Properties"},{"location":"user-guide/application-properties.html#generic-properties","text":"","title":"Generic properties"},{"location":"user-guide/application-properties.html#strongbox_home","text":"The path in which strongbox-distribution is located. Type Default String .","title":"STRONGBOX_HOME"},{"location":"user-guide/application-properties.html#strongbox_port","text":"The port on which Strongbox will be running. Type Default Integer 48080","title":"STRONGBOX_PORT"},{"location":"user-guide/application-properties.html#strongbox_vault","text":"The path in which the strongbox-vault will be kept. This includes the database and repository storage(s). Type Default String ${STRONGBOX_HOME}/../strongbox-vault","title":"STRONGBOX_VAULT"},{"location":"user-guide/application-properties.html#strongbox_config_file","text":"The path to the strongbox.yaml file. Type Default String ${STRONGBOX_HOME}/etc/conf/strongbox.yaml","title":"STRONGBOX_CONFIG_FILE"},{"location":"user-guide/application-properties.html#strongbox_jvm_xmx","text":"Specify the maximum size of the memory allocation pool. Type Default String 512m","title":"STRONGBOX_JVM_XMX"},{"location":"user-guide/application-properties.html#indexing-properties","text":"","title":"Indexing properties"},{"location":"user-guide/application-properties.html#strongbox_download_indexes","text":"Whether, or not to download the Maven indexes for remote repositories. Type Default Boolean true","title":"STRONGBOX_DOWNLOAD_INDEXES"},{"location":"user-guide/application-properties.html#strongbox_download_indexes_storageid_","text":"Whether, or not to download the Maven indexes for all remote repositories in the $storageId Type Default Boolean true","title":"STRONGBOX_DOWNLOAD_INDEXES_${storageId}_*"},{"location":"user-guide/application-properties.html#strongbox_download_indexes_storageid_repositoryid","text":"Whether, or not to download the Maven indexes for a remote repository in a storage. If this is explicitly defined and strongbox.download.indexes and/or strongbox.download.indexes.${storageId}.* is defined, then the value specified by this option will override the others. Type Default Boolean true","title":"STRONGBOX_DOWNLOAD_INDEXES_${storageId}_${repositoryId}"},{"location":"user-guide/application-properties.html#logging-properties","text":"These properties are used for configuring the logging - should logs be printed to the console, logged to a file or both?","title":"Logging properties"},{"location":"user-guide/application-properties.html#strongbox_debug","text":"When set to true , Strongbox will output debugging information. Type Default Boolean false when using strongbox-distribution ; true when running via mvn spring-boot:run","title":"STRONGBOX_DEBUG"},{"location":"user-guide/application-properties.html#strongbox_log_console_enabled","text":"When set to true , Strongbox will output the logs to the console Type Default Boolean false when using strongbox-distribution ; true when running via mvn spring-boot:run","title":"STRONGBOX_LOG_CONSOLE_ENABLED"},{"location":"user-guide/application-properties.html#strongbox_log_file_enabled","text":"When set to true , Strongbox will save the logs into log files under ./strongbox-vault/logs .","title":"STRONGBOX_LOG_FILE_ENABLED"},{"location":"user-guide/application-properties.html#strongbox_log_file_size_single","text":"The maximum file size of one log file. Type Default String 128M","title":"STRONGBOX_LOG_FILE_SIZE_SINGLE"},{"location":"user-guide/application-properties.html#strongbox_log_file_size_total","text":"The maximum size of all log files. Type Default String 1GB","title":"STRONGBOX_LOG_FILE_SIZE_TOTAL"},{"location":"user-guide/application-properties.html#strongbox_log_file_history","text":"The maximum number of log files to keep. Type Default Integer 31","title":"STRONGBOX_LOG_FILE_HISTORY"},{"location":"user-guide/application-properties.html#orientdb-properties","text":"","title":"OrientDB properties"},{"location":"user-guide/application-properties.html#strongbox_orientdb_host","text":"The host of OrientDB server. Type Default String 127.0.0.1","title":"STRONGBOX_ORIENTDB_HOST"},{"location":"user-guide/application-properties.html#strongbox_orientdb_port","text":"The port of OrientDB server. Type Default Integer 2424","title":"STRONGBOX_ORIENTDB_PORT"},{"location":"user-guide/application-properties.html#strongbox_orientdb_database","text":"The name of the OrientDB database. Type Default String strongbox","title":"STRONGBOX_ORIENTDB_DATABASE"},{"location":"user-guide/application-properties.html#strongbox_orientdb_username","text":"The username to use when connecting to OrientDB. Type Default String admin","title":"STRONGBOX_ORIENTDB_USERNAME"},{"location":"user-guide/application-properties.html#strongbox_orientdb_password","text":"The password to use when connecting to OrientDB. Type Default String admin","title":"STRONGBOX_ORIENTDB_PASSWORD"},{"location":"user-guide/application-properties.html#strongbox_orientdb_profile","text":"OrientDB mode ( orientdb_EMBEDDED , orientdb_MEMORY or orientdb_REMOTE ) Type Default String orientdb_EMBEDDED","title":"STRONGBOX_ORIENTDB_PROFILE"},{"location":"user-guide/application-properties.html#orientdb-studio","text":"","title":"OrientDB Studio"},{"location":"user-guide/application-properties.html#strongbox_orientdb_studio_enabled","text":"Enable OrientDB Web Studio Type Default Boolean false","title":"STRONGBOX_ORIENTDB_STUDIO_ENABLED"},{"location":"user-guide/application-properties.html#strongbox_orientdb_studio_ip_address","text":"IP address, which OrientDB Web Studio will be listening Type Default String 127.0.0.1","title":"STRONGBOX_ORIENTDB_STUDIO_IP_ADDRESS"},{"location":"user-guide/application-properties.html#strongbox_orientdb_studio_port","text":"Port, on which OrientDB Web Studio will be listening Type Default Integer 2480","title":"STRONGBOX_ORIENTDB_STUDIO_PORT"},{"location":"user-guide/artifact-query-language.html","text":"Artifact Query Language (AQL) \u00b6 Introduction \u00b6 The Artifact Query Language (or AQL for short) is a carefully crafted language which is used to construct search queries and find the artifacts you want in an easy and consistent manner. AQL Syntax \u00b6 Search queries are constructed using tokens , where each token is a pair of <key>:<value> . Keys \u00b6 The full list of possible keys will vary depending on the enabled layout providers, but the following common list needs to work the same across all layouts: Key Description storage Search for artifacts in a specific storage id repository Search for artifacts in a specific repository id layout Search for artifacts in a specific repository layout version Search an artifact by version tag Search for artifacts with available tag name from Search for uploaded artifacts starting date (unicode format, results include the date) to Search for uploaded artifacts before date (unicode format, results include the date) age Constant: day , month , year , etc. asc Order results ascending desc Order results descending Note Each layout provider will expose additional keys for the fields of it's implementation of the ArtifactCoordinates . Head to our built-in layout providers section to see the coordinates for Maven , NPM and NuGet . Values \u00b6 Values can be strings: Quoted with single quotes ' when the value is more than one word (for example: storage: storage0 , layout: 'Maven 2' ) Separated with comma , for multiple values; you can consider this the same as IN operator in SQL (for example: repository: releases, snapshots , layout: 'Maven 2', NuGet ) Wildcards are supported * (for example: group: org.carlspring.* ) Values can be dates in Unicode format: 2018-03-21 13:00:00 , 2018-03-21 (for example: updated: 2018-03-21 , updated: '2018-03-21 13:00' ) Values can be keywords/constants: day , month , year , etc. (for example: age: >= 30d ) Query expression \u00b6 Queries are composed using Tokens to create an expression: storage:storage0 repository:releases Expression parts can be surrounded by round brackets for more advanced queries. The following examples are equal: storage:storage0 repository:releases (storage:storage0)(repository:releases) ((storage:storage0) (repository:releases)) Expression parts can be joined by logical operators: AND is implied by default and means logical conjunction (equivalent synonymous: & , && ) OR means logical disjunction (equivalent synonymous: | , || ) The following examples are equal: storage:storage0 repository:releases (storage:storage0)(repository:releases) (storage:storage0) AND (repository:releases) storage:storage0 && repository:releases Expression parts can be prefixed with + and - for inclusion or negation . + is implied by default and means no negation (by and large does not mean anything, you can use it simply for clarity) - means logical negation The following examples are equal: storage:storage0 repository:releases NOT groupId: 'org.carlspring' storage:storage0 AND +repository:releases AND NOT groupId: 'org.carlspring' +(storage:storage0)+(repository:releases)-(groupId: 'org.carlspring') How to use \u00b6 The easiest way to AQL is by using the search bar in the user interface. Once you start writing, you will see suggestions based on what you've typed. You could also directly search via the REST API Endpoint. Example curl request: curl http://localhost:48080/api/aql?query = storage:storage-common-proxies+repository:carlspring+groupId:com.google* Example response: { \"artifact\" : [ { \"artifactCoordinates\" : { \"groupId\" : \"com.google.android\" , \"artifactId\" : \"android\" , \"version\" : \"4.1.1.4\" , \"classifier\" : null , \"extension\" : \"jar\" }, \"storageId\" : \"storage-common-proxies\" , \"repositoryId\" : \"carlspring\" , \"url\" : \"http://localhost:48080/storages/storage-common-proxies/carlspring/com/google/android/android/4.1.1.4/android-4.1.1.4.jar\" , \"snippets\" : [ { \"name\" : \"Maven 2\" , \"code\" : \"<dependency>\\n <groupId>com.google.android</groupId>\\n <artifactId>android</artifactId>\\n <version>4.1.1.4</version>\\n <type>jar</type>\\n <scope>compile</scope>\\n</dependency>\\n\" }, { \"name\" : \"Gradle\" , \"code\" : \"compile \\\"com.google.android:android:4.1.1.4\\\"\\n\" }, { \"name\" : \"Ivy\" , \"code\" : \"<dependency org=\\\"com.google.android\\\" name=\\\"android\\\" rev=\\\"4.1.1.4\\\" />\\n\" }, { \"name\" : \"Leiningen\" , \"code\" : \"[com.google.android/android \\\"4.1.1.4\\\"]\\n\" }, { \"name\" : \"SBT\" , \"code\" : \"libraryDependencies += \\\"com.google.android\\\" % \\\"android\\\" % \\\"4.1.1.4\\\"\\n\" } ], \"path\" : \"com/google/android/android/4.1.1.4/android-4.1.1.4.jar\" } ] }","title":"AQL (search)"},{"location":"user-guide/artifact-query-language.html#artifact-query-language-aql","text":"","title":"Artifact Query Language (AQL)"},{"location":"user-guide/artifact-query-language.html#introduction","text":"The Artifact Query Language (or AQL for short) is a carefully crafted language which is used to construct search queries and find the artifacts you want in an easy and consistent manner.","title":"Introduction"},{"location":"user-guide/artifact-query-language.html#aql-syntax","text":"Search queries are constructed using tokens , where each token is a pair of <key>:<value> .","title":"AQL Syntax"},{"location":"user-guide/artifact-query-language.html#keys","text":"The full list of possible keys will vary depending on the enabled layout providers, but the following common list needs to work the same across all layouts: Key Description storage Search for artifacts in a specific storage id repository Search for artifacts in a specific repository id layout Search for artifacts in a specific repository layout version Search an artifact by version tag Search for artifacts with available tag name from Search for uploaded artifacts starting date (unicode format, results include the date) to Search for uploaded artifacts before date (unicode format, results include the date) age Constant: day , month , year , etc. asc Order results ascending desc Order results descending Note Each layout provider will expose additional keys for the fields of it's implementation of the ArtifactCoordinates . Head to our built-in layout providers section to see the coordinates for Maven , NPM and NuGet .","title":"Keys"},{"location":"user-guide/artifact-query-language.html#values","text":"Values can be strings: Quoted with single quotes ' when the value is more than one word (for example: storage: storage0 , layout: 'Maven 2' ) Separated with comma , for multiple values; you can consider this the same as IN operator in SQL (for example: repository: releases, snapshots , layout: 'Maven 2', NuGet ) Wildcards are supported * (for example: group: org.carlspring.* ) Values can be dates in Unicode format: 2018-03-21 13:00:00 , 2018-03-21 (for example: updated: 2018-03-21 , updated: '2018-03-21 13:00' ) Values can be keywords/constants: day , month , year , etc. (for example: age: >= 30d )","title":"Values"},{"location":"user-guide/artifact-query-language.html#query-expression","text":"Queries are composed using Tokens to create an expression: storage:storage0 repository:releases Expression parts can be surrounded by round brackets for more advanced queries. The following examples are equal: storage:storage0 repository:releases (storage:storage0)(repository:releases) ((storage:storage0) (repository:releases)) Expression parts can be joined by logical operators: AND is implied by default and means logical conjunction (equivalent synonymous: & , && ) OR means logical disjunction (equivalent synonymous: | , || ) The following examples are equal: storage:storage0 repository:releases (storage:storage0)(repository:releases) (storage:storage0) AND (repository:releases) storage:storage0 && repository:releases Expression parts can be prefixed with + and - for inclusion or negation . + is implied by default and means no negation (by and large does not mean anything, you can use it simply for clarity) - means logical negation The following examples are equal: storage:storage0 repository:releases NOT groupId: 'org.carlspring' storage:storage0 AND +repository:releases AND NOT groupId: 'org.carlspring' +(storage:storage0)+(repository:releases)-(groupId: 'org.carlspring')","title":"Query expression"},{"location":"user-guide/artifact-query-language.html#how-to-use","text":"The easiest way to AQL is by using the search bar in the user interface. Once you start writing, you will see suggestions based on what you've typed. You could also directly search via the REST API Endpoint. Example curl request: curl http://localhost:48080/api/aql?query = storage:storage-common-proxies+repository:carlspring+groupId:com.google* Example response: { \"artifact\" : [ { \"artifactCoordinates\" : { \"groupId\" : \"com.google.android\" , \"artifactId\" : \"android\" , \"version\" : \"4.1.1.4\" , \"classifier\" : null , \"extension\" : \"jar\" }, \"storageId\" : \"storage-common-proxies\" , \"repositoryId\" : \"carlspring\" , \"url\" : \"http://localhost:48080/storages/storage-common-proxies/carlspring/com/google/android/android/4.1.1.4/android-4.1.1.4.jar\" , \"snippets\" : [ { \"name\" : \"Maven 2\" , \"code\" : \"<dependency>\\n <groupId>com.google.android</groupId>\\n <artifactId>android</artifactId>\\n <version>4.1.1.4</version>\\n <type>jar</type>\\n <scope>compile</scope>\\n</dependency>\\n\" }, { \"name\" : \"Gradle\" , \"code\" : \"compile \\\"com.google.android:android:4.1.1.4\\\"\\n\" }, { \"name\" : \"Ivy\" , \"code\" : \"<dependency org=\\\"com.google.android\\\" name=\\\"android\\\" rev=\\\"4.1.1.4\\\" />\\n\" }, { \"name\" : \"Leiningen\" , \"code\" : \"[com.google.android/android \\\"4.1.1.4\\\"]\\n\" }, { \"name\" : \"SBT\" , \"code\" : \"libraryDependencies += \\\"com.google.android\\\" % \\\"android\\\" % \\\"4.1.1.4\\\"\\n\" } ], \"path\" : \"com/google/android/android/4.1.1.4/android-4.1.1.4.jar\" } ] }","title":"How to use"},{"location":"user-guide/artifact-routing-rules.html","text":"Artifact Routing Rules \u00b6 What are artifact routing rules? \u00b6 Requests made to a group repository will loop over the ordered repositories 1 list to resolve the artifact . The first repository which has the artifact will serve it to the client. Artifact Routing Rules allows you to fine-tune which of the ordered repositories 1 can accept or deny the URL pattern. This makes it possible to narrow down the list of repositories 1 which will be used to resolve the artifact. Types of routing rules \u00b6 Accepted \u00b6 Allowed routing rules are used to allow resolving the artifact/path from the accepted repositories 2 . By default all ordered repositories 1 will accept any url pattern. Therefore, this rule is only useful when it is used with a deny rule. Denied \u00b6 Denied routing rules are used to block resolving the artifact/path from the denied repositories 3 . Artifact Routing Rules precedence \u00b6 An accepted rule takes precedence over denied . Consider the following example: You have configured a pattern to deny the pattern .*/org/.* for all ordered repositories 1 in myGroupRepository You have configured a pattern to accept the pattern .*/org/carlspring/strongbox/.* via myRepository in myGroupRepository In this case, if myGroupRepository has myRepository in the ordered repositories 1 , then the request .*/org/carlspring/strongbox/.* will be allowed. So, if you want to exclude some artifact (or artifacts matching some pattern), then make sure any accepted rule does not match the same pattern. Artifact Routing Rules optionality \u00b6 Routing rules may be strict or elastic, in two ways. Flexibility of defining the group repository \u00b6 We can define the specific group repository (by identifying its storage-id and repository-id ) We can define the group repositories within declared storage-id (by leaving repository-id empty) We can define the group repositories having provided repository-id (by leaving storage-id empty) Flexibility of defining the underlying repositories \u00b6 We can define the specific underlying repository (by identifying its storage-id and repository-id ) We can define the underlying repositories within declared storage-id (by leaving repository-id empty) We can define the underlying repositories having provided repository-id (by leaving storage-id empty) The above approaches can be used together and separately. Examples \u00b6 Accepted Patterns \u00b6 The following example specifies that: Requests for artifacts matching ^(com|org)/corp/foo.* will be accepted by every repository with repository-id equal to third-party-releases under each group having repository-id equal to group-releases . Requests for artifacts matching ^(com|org)/carlspring/strongbox.* will be accepted by repository identified by storage-id equal to storage-common-proxies and repository-id equal to releases under each group of repositories. Example: <configuration> ... <routing-rules> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1942\" storage-id= \"\" repository-id= \"group-releases\" pattern= \"^(com|org)/corp/foo.*\" type= \"accept\" > <repositories> <repository storage-id= \"\" repository-id= \"third-party-releases\" /> </repositories> </routing-rule> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1943\" storage-id= \"\" repository-id= \"\" pattern= \"^(com|org)/carlspring/strongbox.*\" type= \"accept\" > <repositories> <repository storage-id= \"storage-common-proxies\" repository-id= \"releases\" /> </repositories> </routing-rule> </routing-rules> </configuration> Denied Patterns \u00b6 The following example disable lookups for .*(com|org)/carlspring.* in the group repository identified by storage-id equal to storage-common-proxies and repository-id equal to group-common-proxies in the underlying repository identified by storage-id equal to storage-common-proxies and repository-id equal to jboss-public-releases . To put it more simply, if someone tries to access .*(com|org)/carlspring.* from group repository storage-id=\"storage-common-proxies\" repository-id=\"group-common-proxies\" then this group repository won't serve this request from repository storage-id=\"storage-common-proxies\" repository-id=\"jboss-public-releases\" , for sure. <configuration> ... <routing-rules> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1946\" storage-id= \"storage-common-proxies\" repository-id= \"group-common-proxies\" pattern= \".*(com|org)/carlspring.*\" type= \"deny\" > <repositories> <repository storage-id= \"storage-common-proxies\" repository-id= \"jboss-public-releases\" /> </repositories> </routing-rule> </routing-rules> </configuration> The following example disable lookups for .*(com|org)/carlspring.* in repository-id=\"jboss-public-releases\" for every group repository containing this repository. <configuration> ... <routing-rules> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1947\" storage-id= \"\" repository-id= \"\" pattern= \".*(com|org)/carlspring.*\" type= \"deny\" > <repositories> <repository storage-id= \"\" repository-id= \"jboss-public-releases\" /> </repositories> </routing-rule> </routing-rules> </configuration> Ordered Repositories List - an ordered list of repositories which you configure when you add the group repository. \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Accepted Repositories - are an ordered list of Accepted repositories. If these repositories are in your Group Repository, then they will be used to resolve the artifact. \u21a9 Denied Repositories - are an ordered list of Denied repositories. If these repositories are in your Group Repository, then they will NOT be used to resolve the artifact. \u21a9","title":"Artifact Routing Rules"},{"location":"user-guide/artifact-routing-rules.html#artifact-routing-rules","text":"","title":"Artifact Routing Rules"},{"location":"user-guide/artifact-routing-rules.html#what-are-artifact-routing-rules","text":"Requests made to a group repository will loop over the ordered repositories 1 list to resolve the artifact . The first repository which has the artifact will serve it to the client. Artifact Routing Rules allows you to fine-tune which of the ordered repositories 1 can accept or deny the URL pattern. This makes it possible to narrow down the list of repositories 1 which will be used to resolve the artifact.","title":"What are artifact routing rules?"},{"location":"user-guide/artifact-routing-rules.html#types-of-routing-rules","text":"","title":"Types of routing rules"},{"location":"user-guide/artifact-routing-rules.html#accepted","text":"Allowed routing rules are used to allow resolving the artifact/path from the accepted repositories 2 . By default all ordered repositories 1 will accept any url pattern. Therefore, this rule is only useful when it is used with a deny rule.","title":"Accepted"},{"location":"user-guide/artifact-routing-rules.html#denied","text":"Denied routing rules are used to block resolving the artifact/path from the denied repositories 3 .","title":"Denied"},{"location":"user-guide/artifact-routing-rules.html#artifact-routing-rules-precedence","text":"An accepted rule takes precedence over denied . Consider the following example: You have configured a pattern to deny the pattern .*/org/.* for all ordered repositories 1 in myGroupRepository You have configured a pattern to accept the pattern .*/org/carlspring/strongbox/.* via myRepository in myGroupRepository In this case, if myGroupRepository has myRepository in the ordered repositories 1 , then the request .*/org/carlspring/strongbox/.* will be allowed. So, if you want to exclude some artifact (or artifacts matching some pattern), then make sure any accepted rule does not match the same pattern.","title":"Artifact Routing Rules precedence"},{"location":"user-guide/artifact-routing-rules.html#artifact-routing-rules-optionality","text":"Routing rules may be strict or elastic, in two ways.","title":"Artifact Routing Rules optionality"},{"location":"user-guide/artifact-routing-rules.html#flexibility-of-defining-the-group-repository","text":"We can define the specific group repository (by identifying its storage-id and repository-id ) We can define the group repositories within declared storage-id (by leaving repository-id empty) We can define the group repositories having provided repository-id (by leaving storage-id empty)","title":"Flexibility of defining the group repository"},{"location":"user-guide/artifact-routing-rules.html#flexibility-of-defining-the-underlying-repositories","text":"We can define the specific underlying repository (by identifying its storage-id and repository-id ) We can define the underlying repositories within declared storage-id (by leaving repository-id empty) We can define the underlying repositories having provided repository-id (by leaving storage-id empty) The above approaches can be used together and separately.","title":"Flexibility of defining the underlying repositories"},{"location":"user-guide/artifact-routing-rules.html#examples","text":"","title":"Examples"},{"location":"user-guide/artifact-routing-rules.html#accepted-patterns","text":"The following example specifies that: Requests for artifacts matching ^(com|org)/corp/foo.* will be accepted by every repository with repository-id equal to third-party-releases under each group having repository-id equal to group-releases . Requests for artifacts matching ^(com|org)/carlspring/strongbox.* will be accepted by repository identified by storage-id equal to storage-common-proxies and repository-id equal to releases under each group of repositories. Example: <configuration> ... <routing-rules> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1942\" storage-id= \"\" repository-id= \"group-releases\" pattern= \"^(com|org)/corp/foo.*\" type= \"accept\" > <repositories> <repository storage-id= \"\" repository-id= \"third-party-releases\" /> </repositories> </routing-rule> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1943\" storage-id= \"\" repository-id= \"\" pattern= \"^(com|org)/carlspring/strongbox.*\" type= \"accept\" > <repositories> <repository storage-id= \"storage-common-proxies\" repository-id= \"releases\" /> </repositories> </routing-rule> </routing-rules> </configuration>","title":"Accepted Patterns"},{"location":"user-guide/artifact-routing-rules.html#denied-patterns","text":"The following example disable lookups for .*(com|org)/carlspring.* in the group repository identified by storage-id equal to storage-common-proxies and repository-id equal to group-common-proxies in the underlying repository identified by storage-id equal to storage-common-proxies and repository-id equal to jboss-public-releases . To put it more simply, if someone tries to access .*(com|org)/carlspring.* from group repository storage-id=\"storage-common-proxies\" repository-id=\"group-common-proxies\" then this group repository won't serve this request from repository storage-id=\"storage-common-proxies\" repository-id=\"jboss-public-releases\" , for sure. <configuration> ... <routing-rules> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1946\" storage-id= \"storage-common-proxies\" repository-id= \"group-common-proxies\" pattern= \".*(com|org)/carlspring.*\" type= \"deny\" > <repositories> <repository storage-id= \"storage-common-proxies\" repository-id= \"jboss-public-releases\" /> </repositories> </routing-rule> </routing-rules> </configuration> The following example disable lookups for .*(com|org)/carlspring.* in repository-id=\"jboss-public-releases\" for every group repository containing this repository. <configuration> ... <routing-rules> <routing-rule uuid= \"0f84a9a7-b2ce-47ed-8a01-085e235a1947\" storage-id= \"\" repository-id= \"\" pattern= \".*(com|org)/carlspring.*\" type= \"deny\" > <repositories> <repository storage-id= \"\" repository-id= \"jboss-public-releases\" /> </repositories> </routing-rule> </routing-rules> </configuration> Ordered Repositories List - an ordered list of repositories which you configure when you add the group repository. \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Accepted Repositories - are an ordered list of Accepted repositories. If these repositories are in your Group Repository, then they will be used to resolve the artifact. \u21a9 Denied Repositories - are an ordered list of Denied repositories. If these repositories are in your Group Repository, then they will NOT be used to resolve the artifact. \u21a9","title":"Denied Patterns"},{"location":"user-guide/directory-structure.html","text":"Directory Structure \u00b6 Strongbox Distribution \u00b6 When you download and extract strongbox-distribution.tar.gz you will find the following directory structure: Directory structure \u00b6 strongbox-distribution/ etc/conf - all configuration files will be in this path. strongbox.xml (TODO: fix link) security-authentication.xml (TODO: fix link; update after SB-1285) security-authorization.xml (TODO: fix link; update after SB-1285) strongbox-security-users.xml (TODO: fix link; SB-1285) ssl/ keystores.jks localhost-client.cer truststore.jks logback.xml - default logback with info level settings. logback-debug.xml - debug level logback settings, use with caution as logs will be big. Strongbox Vault \u00b6 The vault is the work area of the server. This includes things like the cache, location of the OrientDB files, storages and temporary directory. You can find this directory right next to where strongbox-distribution is located (in other words - strongbox-distribution/../strongbox-vault ). Check the Application Properties section to see which property to override to change the default location. Directory structure \u00b6 strongbox-vault/ cache/ db/ storages / ${storageId}/ ${repositoryId}/ .index/ local/ remote/ .trash/ tmp/","title":"Directory structure"},{"location":"user-guide/directory-structure.html#directory-structure","text":"","title":"Directory Structure"},{"location":"user-guide/directory-structure.html#strongbox-distribution","text":"When you download and extract strongbox-distribution.tar.gz you will find the following directory structure:","title":"Strongbox Distribution"},{"location":"user-guide/directory-structure.html#directory-structure_1","text":"strongbox-distribution/ etc/conf - all configuration files will be in this path. strongbox.xml (TODO: fix link) security-authentication.xml (TODO: fix link; update after SB-1285) security-authorization.xml (TODO: fix link; update after SB-1285) strongbox-security-users.xml (TODO: fix link; SB-1285) ssl/ keystores.jks localhost-client.cer truststore.jks logback.xml - default logback with info level settings. logback-debug.xml - debug level logback settings, use with caution as logs will be big.","title":"Directory structure"},{"location":"user-guide/directory-structure.html#strongbox-vault","text":"The vault is the work area of the server. This includes things like the cache, location of the OrientDB files, storages and temporary directory. You can find this directory right next to where strongbox-distribution is located (in other words - strongbox-distribution/../strongbox-vault ). Check the Application Properties section to see which property to override to change the default location.","title":"Strongbox Vault"},{"location":"user-guide/directory-structure.html#directory-structure_2","text":"strongbox-vault/ cache/ db/ storages / ${storageId}/ ${repositoryId}/ .index/ local/ remote/ .trash/ tmp/","title":"Directory structure"},{"location":"user-guide/getting-started.html","text":"Getting started (User) \u00b6 Pre-requisites \u00b6 OpenJDK 1.8 Set the JAVA_HOME variable to point to your Java installation. Set the PATH variable to include $JAVA_HOME/bin . System Requirements \u00b6 In order to run Strongbox you need to have a machine with minimum: 6-8 GB RAM 2 cores Disk space would vary based on your caching needs Installation \u00b6 Download strongbox Linux (tar) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Open a terminal sudo su mkdir /opt/strongbox /opt/strongbox-vault groupadd strongbox useradd -d /opt/strongbox -g strongbox -r strongbox chown -R strongbox:strongbox /opt/strongbox /opt/strongbox-vault chmod -R 770 /opt/strongbox /opt/strongbox-vault su strongbox tar -zxf /path/to/strongbox-distribution*.tar.gz \\ -C /opt/strongbox \\ --strip-components=2 # If you just want to start Strongbox without installing the systemd service: /opt/strongbox/bin/strongbox console # If you want to install Strongbox as a service then download the # systemd service file. Make sure to change the `Environment` variables # in the service file where necessary. Depending on your distribution, # you could also move the environment variables into `EnvironmentFile` # and load that instead. sudo curl -o /etc/systemd/system/strongbox.service \\ https://strongbox.github.io/assets/resources/systemd/strongbox.service sudo systemctl deamon-reload sudo service strongbox start # this step is optional: only if you want to start Strongbox at boot! sudo systemctl enable strongbox Linux (RPM) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Open a terminal # First, make sure you have a JRE with version 1.8 # installed on your system. You can use your favorite package manager # to find one. sudo rpm -ivh /path/to/strongbox-distribution-*.rpm # If you just want to start Strongbox without installing the systemd service: su strongbox /opt/strongbox/bin/strongbox console # If you want to configure strongbox to start at system, boot: sudo systemctl enable strongbox.service sudo service strongbox start Linux (deb) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Open a terminal # First, make sure you have a JRE with version 1.8 # installed on your system. You can use your favorite package manager # to find one. # Install: sudo dpkg -i /path/to/strongbox-*.deb # If you just want to start Strongbox without installing the systemd service: su strongbox /opt/strongbox/bin/strongbox console # If you want to configure strongbox to start at system, boot: sudo systemctl enable strongbox sudo systemctl start strongbox # Remove the package: sudo dpkg -r strongbox # Purge configuration files, note this does not remove strongbox-vault: sudo dpkg -P strongbox Windows 1 2 3 4 5 6 7 8 9 10 # Unzip the distribution. # To start Strongbox, run cmd or PowerShell and execute: c:\\java\\strongbox> bin\\strongbox.bat console wrapper | Strongbox: Distribution started... # To install Strongbox as a service, run cmd or PowerShell and execute: c:\\java\\strongbox> bin\\strongbox.bat install wrapper | Strongbox: Distribution installed. c:\\java\\strongbox> bin\\strongbox.bat start MacOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Open a terminal sudo su sysadminctl -addUser strongbox mkdir -p /opt/strongbox /opt/strongbox-vault chown -R strongbox:staff /opt/strongbox /opt/strongbox-vault chmod -R 770 /opt/strongbox /opt/strongbox-vault su strongbox tar -zxf /path/to/strongbox-distribution*.tar.gz \\ -C /opt/strongbox \\ --strip-components=2 # If you just want to start Strongbox without installing the launchctl service: /opt/strongbox/bin/strongbox console # If you want to install Strongbox as a LaunchDaemon then download the # plist file. If you've customized the installation, edit the details # in the plist file where necessary. # (This file must be owned by root.) sudo curl -o /Library/LaunchDaemons/strongbox.plist \\ https://strongbox.github.io/assets/resources/launchctl/strongbox.plist # This will validate that launchd can load the file and start the service. sudo launchctl load /opt/strongbox/etc/strongbox.plist # Strongbox will now start on boot. Docker 1 2 3 4 5 Currently unavailable due to our heavy development. We are planning to start releasing to hub.docker.com very soon. Meanwhile, you could clone strongbox/strongbox use `docker-compose up` instead.","title":"Getting started"},{"location":"user-guide/getting-started.html#getting-started-user","text":"","title":"Getting started (User)"},{"location":"user-guide/getting-started.html#pre-requisites","text":"OpenJDK 1.8 Set the JAVA_HOME variable to point to your Java installation. Set the PATH variable to include $JAVA_HOME/bin .","title":"Pre-requisites"},{"location":"user-guide/getting-started.html#system-requirements","text":"In order to run Strongbox you need to have a machine with minimum: 6-8 GB RAM 2 cores Disk space would vary based on your caching needs","title":"System Requirements"},{"location":"user-guide/getting-started.html#installation","text":"Download strongbox Linux (tar) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Open a terminal sudo su mkdir /opt/strongbox /opt/strongbox-vault groupadd strongbox useradd -d /opt/strongbox -g strongbox -r strongbox chown -R strongbox:strongbox /opt/strongbox /opt/strongbox-vault chmod -R 770 /opt/strongbox /opt/strongbox-vault su strongbox tar -zxf /path/to/strongbox-distribution*.tar.gz \\ -C /opt/strongbox \\ --strip-components=2 # If you just want to start Strongbox without installing the systemd service: /opt/strongbox/bin/strongbox console # If you want to install Strongbox as a service then download the # systemd service file. Make sure to change the `Environment` variables # in the service file where necessary. Depending on your distribution, # you could also move the environment variables into `EnvironmentFile` # and load that instead. sudo curl -o /etc/systemd/system/strongbox.service \\ https://strongbox.github.io/assets/resources/systemd/strongbox.service sudo systemctl deamon-reload sudo service strongbox start # this step is optional: only if you want to start Strongbox at boot! sudo systemctl enable strongbox Linux (RPM) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Open a terminal # First, make sure you have a JRE with version 1.8 # installed on your system. You can use your favorite package manager # to find one. sudo rpm -ivh /path/to/strongbox-distribution-*.rpm # If you just want to start Strongbox without installing the systemd service: su strongbox /opt/strongbox/bin/strongbox console # If you want to configure strongbox to start at system, boot: sudo systemctl enable strongbox.service sudo service strongbox start Linux (deb) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Open a terminal # First, make sure you have a JRE with version 1.8 # installed on your system. You can use your favorite package manager # to find one. # Install: sudo dpkg -i /path/to/strongbox-*.deb # If you just want to start Strongbox without installing the systemd service: su strongbox /opt/strongbox/bin/strongbox console # If you want to configure strongbox to start at system, boot: sudo systemctl enable strongbox sudo systemctl start strongbox # Remove the package: sudo dpkg -r strongbox # Purge configuration files, note this does not remove strongbox-vault: sudo dpkg -P strongbox Windows 1 2 3 4 5 6 7 8 9 10 # Unzip the distribution. # To start Strongbox, run cmd or PowerShell and execute: c:\\java\\strongbox> bin\\strongbox.bat console wrapper | Strongbox: Distribution started... # To install Strongbox as a service, run cmd or PowerShell and execute: c:\\java\\strongbox> bin\\strongbox.bat install wrapper | Strongbox: Distribution installed. c:\\java\\strongbox> bin\\strongbox.bat start MacOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Open a terminal sudo su sysadminctl -addUser strongbox mkdir -p /opt/strongbox /opt/strongbox-vault chown -R strongbox:staff /opt/strongbox /opt/strongbox-vault chmod -R 770 /opt/strongbox /opt/strongbox-vault su strongbox tar -zxf /path/to/strongbox-distribution*.tar.gz \\ -C /opt/strongbox \\ --strip-components=2 # If you just want to start Strongbox without installing the launchctl service: /opt/strongbox/bin/strongbox console # If you want to install Strongbox as a LaunchDaemon then download the # plist file. If you've customized the installation, edit the details # in the plist file where necessary. # (This file must be owned by root.) sudo curl -o /Library/LaunchDaemons/strongbox.plist \\ https://strongbox.github.io/assets/resources/launchctl/strongbox.plist # This will validate that launchd can load the file and start the service. sudo launchctl load /opt/strongbox/etc/strongbox.plist # Strongbox will now start on boot. Docker 1 2 3 4 5 Currently unavailable due to our heavy development. We are planning to start releasing to hub.docker.com very soon. Meanwhile, you could clone strongbox/strongbox use `docker-compose up` instead.","title":"Installation"},{"location":"user-guide/rest-api.html","text":"Rest API Documentation \u00b6 To view the REST API's documentation, please start your Strongbox instance and go to http://localhost:48080/docs/rest/api.html","title":"REST API"},{"location":"user-guide/rest-api.html#rest-api-documentation","text":"To view the REST API's documentation, please start your Strongbox instance and go to http://localhost:48080/docs/rest/api.html","title":"Rest API Documentation"},{"location":"user-guide/upgrading.html","text":"Upgrading Strongbox \u00b6 We try to test everything as through as possible. However Strongbox is still under development and sometimes things could go wrong. This is why Danger YOU SHOULD ALWAYS CREATE A BACKUP OF YOUR STRONGBOX_VAULT and STRONGBOX_HOME DIRECTORIES BEFORE PROCEEDING WITH AN UPGRADE! Steps to upgrade \u00b6 Download the latest strongbox distribution version Stop any running instance of Strongbox Unzip strongbox-distribution.tar.gz in STRONGBOX_HOME (but be sure to backup your etc directory before that!) Start strongbox as normal If there are database changes - they will be applied automatically. DO NOT STOP Strongbox while the database is being upgraded - this could lead to a broken database! Hopefully everything is up and running. In case an issue occurred - please report it in our issue tracker.","title":"Upgrading"},{"location":"user-guide/upgrading.html#upgrading-strongbox","text":"We try to test everything as through as possible. However Strongbox is still under development and sometimes things could go wrong. This is why Danger YOU SHOULD ALWAYS CREATE A BACKUP OF YOUR STRONGBOX_VAULT and STRONGBOX_HOME DIRECTORIES BEFORE PROCEEDING WITH AN UPGRADE!","title":"Upgrading Strongbox"},{"location":"user-guide/upgrading.html#steps-to-upgrade","text":"Download the latest strongbox distribution version Stop any running instance of Strongbox Unzip strongbox-distribution.tar.gz in STRONGBOX_HOME (but be sure to backup your etc directory before that!) Start strongbox as normal If there are database changes - they will be applied automatically. DO NOT STOP Strongbox while the database is being upgraded - this could lead to a broken database! Hopefully everything is up and running. In case an issue occurred - please report it in our issue tracker.","title":"Steps to upgrade"},{"location":"user-guide/configuration-files/strongbox-authorization-yaml.html","text":"The strongbox-authorization.yaml File \u00b6 There are a number of built-in roles and privileges that are already pre-configured in the source code. In addition you can define your own roles and privileges either through the YAML configuration file or REST API. You can't use unsupported roles or privileges in the configuration file. In such cases you will get a runtime exception during application startup. All custom (user-defined) roles and privileges have to be properly defined in the strongbox-authorization.yaml configuration file. Example strongbox-authorization.yaml File \u00b6 Below is a simple scrap of the strongbox-authorization.yaml configuration file that configures user defined roles: authorizationConfiguration: roles: - name: ANONYMOUS_ROLE description: Common anonymous user role privileges: - ARTIFACTS_RESOLVE - SEARCH_ARTIFACTS - name: USER_ROLE description: Common user role privileges: - VIEW_USER - name: CUSTOM_ROLE description: Deployment role privileges: - Deploy Anonymous User Privileges \u00b6 There is a special treatment role called ANONYMOUS_ROLE that is not considered as a built-in role so it doesn't have a fixed set of permissions. Anonymous user's privileges are configurable and can be defined in the strongbox-authorization.yaml configuration file. authorizationConfiguration: roles: - name: ANONYMOUS_ROLE description: Common anonymous user role privileges: - ARTIFACTS_RESOLVE - SEARCH_ARTIFACTS ... This way every user not logged in will be awarded by the ARTIFACTS_RESOLVE and SEARCH_ARTIFACTS privileges. Information for Developers \u00b6 The following classes are related to various aspects of the authorization configuration: Class Name Description org.carlspring.strongbox.authorization.dto.AuthorizationConfigDto Represents authorization configuration in a deserialized form. org.carlspring.strongbox.authorization.AuthorizationConfigFileManager Class to serialize / deserialize the authorization configuration. The strongbox-authorization.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"The strongbox-authorization.yaml file"},{"location":"user-guide/configuration-files/strongbox-authorization-yaml.html#the-strongbox-authorizationyaml-file","text":"There are a number of built-in roles and privileges that are already pre-configured in the source code. In addition you can define your own roles and privileges either through the YAML configuration file or REST API. You can't use unsupported roles or privileges in the configuration file. In such cases you will get a runtime exception during application startup. All custom (user-defined) roles and privileges have to be properly defined in the strongbox-authorization.yaml configuration file.","title":"The strongbox-authorization.yaml File"},{"location":"user-guide/configuration-files/strongbox-authorization-yaml.html#example-strongbox-authorizationyaml-file","text":"Below is a simple scrap of the strongbox-authorization.yaml configuration file that configures user defined roles: authorizationConfiguration: roles: - name: ANONYMOUS_ROLE description: Common anonymous user role privileges: - ARTIFACTS_RESOLVE - SEARCH_ARTIFACTS - name: USER_ROLE description: Common user role privileges: - VIEW_USER - name: CUSTOM_ROLE description: Deployment role privileges: - Deploy","title":"Example strongbox-authorization.yaml File"},{"location":"user-guide/configuration-files/strongbox-authorization-yaml.html#anonymous-user-privileges","text":"There is a special treatment role called ANONYMOUS_ROLE that is not considered as a built-in role so it doesn't have a fixed set of permissions. Anonymous user's privileges are configurable and can be defined in the strongbox-authorization.yaml configuration file. authorizationConfiguration: roles: - name: ANONYMOUS_ROLE description: Common anonymous user role privileges: - ARTIFACTS_RESOLVE - SEARCH_ARTIFACTS ... This way every user not logged in will be awarded by the ARTIFACTS_RESOLVE and SEARCH_ARTIFACTS privileges.","title":"Anonymous User Privileges"},{"location":"user-guide/configuration-files/strongbox-authorization-yaml.html#information-for-developers","text":"The following classes are related to various aspects of the authorization configuration: Class Name Description org.carlspring.strongbox.authorization.dto.AuthorizationConfigDto Represents authorization configuration in a deserialized form. org.carlspring.strongbox.authorization.AuthorizationConfigFileManager Class to serialize / deserialize the authorization configuration. The strongbox-authorization.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"Information for Developers"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html","text":"The strongbox-cron-tasks.yaml File \u00b6 This resource file describes the configuration of the Strongbox cron jobs which are a flexible way to configure recurring tasks for strongbox distribution. The property controlling this file is strongbox.cron.tasks.yaml . The default location for this resource is etc/conf/strongbox-cron-tasks.yaml . This file is read by the system at the server startup time and it automatically schedules (and executes, if needed) tasks based on the provided configuration. All cron task configurations located in this file have to be strongbox supported cron task configurations. Currently, there is no way to provide your own implementation of the cron task. File Structure \u00b6 For an example, check here Every cron task configuration is an cronTaskConfigurations array element. Inner properties are: uuid : identifies the individual cron task configuration in the system name : cron task configuration name oneTimeExecution : specifies whether the declared cron task shouldn't be recurring; if true it will only be one time executed and removed and rescheduled from the system immediateExecution : specifies whether the declared cron task should be run immediately properties : specifies the list of properties for the given cron job cronExpression : mandatory property for each cron task configuration ( see doc ) jobClass : specifies the underlying cron task implementation (mandatory property for each cron task configuration) additional set of mandatory/optional properties individually allowed and described below per each individual cron task configuration Available Cron Task Configurations \u00b6 Repository Layout-Independent Cron Task Configuration \u00b6 Description Implementation Mandatory properties Optional properties Empty Trash org.carlspring.strongbox.cron.jobs.ClearRepositoryTrashCronJob storageId repositoryId Regenerate Checksums org.carlspring.strongbox.cron.jobs.RegenerateChecksumCronJob storageId repositoryId basePath forceRegeneration Cleanup Expired Artifacts From Proxy Repositories org.carlspring.strongbox.cron.jobs.CleanupExpiredArtifactsFromProxyRepositoriesCronJob lastAccessedTimeInDays minSizeInBytes Maven-Specific Cron Task Configuration \u00b6 Description Implementation Mandatory properties Optional properties Rebuild Maven Metadata org.carlspring.strongbox.cron.jobs.RebuildMavenMetadataCronJob storageId repositoryId basePath Rebuild Maven Indexes org.carlspring.strongbox.cron.jobs.RebuildMavenIndexesCronJob storageId repositoryId basePath Download Remote Indexes org.carlspring.strongbox.cron.jobs.DownloadRemoteMavenIndexCronJob storageId repositoryId Remove Timestamped Snapshot Artifacts org.carlspring.strongbox.cron.jobs.RemoveTimestampedMavenSnapshotCronJob storageId repositoryId basePath numberToKeep keepPeriod Nuget-Specific Cron Task Configuration \u00b6 Description Implementation Mandatory properties Optional properties Download Remote Feed org.carlspring.strongbox.cron.jobs.DownloadRemoteFeedCronJob storageId repositoryId Information For Developers \u00b6 The following classes are related to various aspects of the authorization configuration: Class Name Description org.carlspring.strongbox.cron.domain.CronTasksConfigurationDto Represents cron configuration in a deserialized form. org.carlspring.strongbox.cron.config.CronTasksConfigurationFileManager Class to serialize / deserialize the cron configuration. The strongbox-cron-tasks.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"The strongbox-cron-tasks.yaml file"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#the-strongbox-cron-tasksyaml-file","text":"This resource file describes the configuration of the Strongbox cron jobs which are a flexible way to configure recurring tasks for strongbox distribution. The property controlling this file is strongbox.cron.tasks.yaml . The default location for this resource is etc/conf/strongbox-cron-tasks.yaml . This file is read by the system at the server startup time and it automatically schedules (and executes, if needed) tasks based on the provided configuration. All cron task configurations located in this file have to be strongbox supported cron task configurations. Currently, there is no way to provide your own implementation of the cron task.","title":"The strongbox-cron-tasks.yaml File"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#file-structure","text":"For an example, check here Every cron task configuration is an cronTaskConfigurations array element. Inner properties are: uuid : identifies the individual cron task configuration in the system name : cron task configuration name oneTimeExecution : specifies whether the declared cron task shouldn't be recurring; if true it will only be one time executed and removed and rescheduled from the system immediateExecution : specifies whether the declared cron task should be run immediately properties : specifies the list of properties for the given cron job cronExpression : mandatory property for each cron task configuration ( see doc ) jobClass : specifies the underlying cron task implementation (mandatory property for each cron task configuration) additional set of mandatory/optional properties individually allowed and described below per each individual cron task configuration","title":"File Structure"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#available-cron-task-configurations","text":"","title":"Available Cron Task Configurations"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#repository-layout-independent-cron-task-configuration","text":"Description Implementation Mandatory properties Optional properties Empty Trash org.carlspring.strongbox.cron.jobs.ClearRepositoryTrashCronJob storageId repositoryId Regenerate Checksums org.carlspring.strongbox.cron.jobs.RegenerateChecksumCronJob storageId repositoryId basePath forceRegeneration Cleanup Expired Artifacts From Proxy Repositories org.carlspring.strongbox.cron.jobs.CleanupExpiredArtifactsFromProxyRepositoriesCronJob lastAccessedTimeInDays minSizeInBytes","title":"Repository Layout-Independent Cron Task Configuration"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#maven-specific-cron-task-configuration","text":"Description Implementation Mandatory properties Optional properties Rebuild Maven Metadata org.carlspring.strongbox.cron.jobs.RebuildMavenMetadataCronJob storageId repositoryId basePath Rebuild Maven Indexes org.carlspring.strongbox.cron.jobs.RebuildMavenIndexesCronJob storageId repositoryId basePath Download Remote Indexes org.carlspring.strongbox.cron.jobs.DownloadRemoteMavenIndexCronJob storageId repositoryId Remove Timestamped Snapshot Artifacts org.carlspring.strongbox.cron.jobs.RemoveTimestampedMavenSnapshotCronJob storageId repositoryId basePath numberToKeep keepPeriod","title":"Maven-Specific Cron Task Configuration"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#nuget-specific-cron-task-configuration","text":"Description Implementation Mandatory properties Optional properties Download Remote Feed org.carlspring.strongbox.cron.jobs.DownloadRemoteFeedCronJob storageId repositoryId","title":"Nuget-Specific Cron Task Configuration"},{"location":"user-guide/configuration-files/strongbox-cron-tasks-yaml.html#information-for-developers","text":"The following classes are related to various aspects of the authorization configuration: Class Name Description org.carlspring.strongbox.cron.domain.CronTasksConfigurationDto Represents cron configuration in a deserialized form. org.carlspring.strongbox.cron.config.CronTasksConfigurationFileManager Class to serialize / deserialize the cron configuration. The strongbox-cron-tasks.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"Information For Developers"},{"location":"user-guide/configuration-files/strongbox-security-users-yaml.html","text":"The strongbox-security-users.yaml File \u00b6 TODO @sbespalov Example strongbox-security-users.yaml File \u00b6 The configuration file consists of a set of user configurations and has the following structure: users: user: - username: admin password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - ADMIN securityTokenKey: admin-secret - username: maven password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - ADMIN securityTokenKey: maven-secret - username: user password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - ADMIN securityTokenKey: user-secret - username: deployer password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - UI_MANAGER securityTokenKey: deployer-secret accessModel: storages: - id: storage0 repositories: - id: releases repositoryPrivileges: - name: ARTIFACTS_DEPLOY - name: ARTIFACTS_RESOLVE - username: developer01 password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - UI_MANAGER securityTokenKey: developer01-secret accessModel: storages: - id: storage0 repositories: - id: releases repositoryPrivileges: - name: ARTIFACTS_RESOLVE pathPrivileges: - path: com/carlspring wildcard: true privileges: - name: ARTIFACTS_VIEW - path: org/carlspring wildcard: true privileges: - name: ARTIFACTS_DELETE - path: com/mycorp privileges: - name: ARTIFACTS_VIEW - name: ARTIFACTS_DEPLOY - name: ARTIFACTS_DELETE - name: ARTIFACTS_COPY The access-model element is optional. Configuring The User Access Model \u00b6 TODO @sbespalov Information for Developers \u00b6 The following classes are related to various aspects of the users configuration: Class Name Description org.carlspring.strongbox.users.dto.UsersDto Represents users configuration in a deserialized form. org.carlspring.strongbox.users.UsersFileManager Class to serialize / deserialize the users configuration. The strongbox-security-users.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"The strongbox-security-users.yaml file"},{"location":"user-guide/configuration-files/strongbox-security-users-yaml.html#the-strongbox-security-usersyaml-file","text":"TODO @sbespalov","title":"The strongbox-security-users.yaml File"},{"location":"user-guide/configuration-files/strongbox-security-users-yaml.html#example-strongbox-security-usersyaml-file","text":"The configuration file consists of a set of user configurations and has the following structure: users: user: - username: admin password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - ADMIN securityTokenKey: admin-secret - username: maven password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - ADMIN securityTokenKey: maven-secret - username: user password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - ADMIN securityTokenKey: user-secret - username: deployer password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - UI_MANAGER securityTokenKey: deployer-secret accessModel: storages: - id: storage0 repositories: - id: releases repositoryPrivileges: - name: ARTIFACTS_DEPLOY - name: ARTIFACTS_RESOLVE - username: developer01 password: $2a$10$WqtVx7Iio0cndyR1lEaKW.SWhUYmF/zHHG5hkAXvH5hUmklM7QfMO roles: - UI_MANAGER securityTokenKey: developer01-secret accessModel: storages: - id: storage0 repositories: - id: releases repositoryPrivileges: - name: ARTIFACTS_RESOLVE pathPrivileges: - path: com/carlspring wildcard: true privileges: - name: ARTIFACTS_VIEW - path: org/carlspring wildcard: true privileges: - name: ARTIFACTS_DELETE - path: com/mycorp privileges: - name: ARTIFACTS_VIEW - name: ARTIFACTS_DEPLOY - name: ARTIFACTS_DELETE - name: ARTIFACTS_COPY The access-model element is optional.","title":"Example strongbox-security-users.yaml File"},{"location":"user-guide/configuration-files/strongbox-security-users-yaml.html#configuring-the-user-access-model","text":"TODO @sbespalov","title":"Configuring The User Access Model"},{"location":"user-guide/configuration-files/strongbox-security-users-yaml.html#information-for-developers","text":"The following classes are related to various aspects of the users configuration: Class Name Description org.carlspring.strongbox.users.dto.UsersDto Represents users configuration in a deserialized form. org.carlspring.strongbox.users.UsersFileManager Class to serialize / deserialize the users configuration. The strongbox-security-users.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"Information for Developers"},{"location":"user-guide/configuration-files/strongbox-yaml.html","text":"The strongbox.yaml File \u00b6 This resource file describes the configuration of the server. The property controlling this file is strongbox.config.file . The default location for this resource is etc/conf/strongbox.yaml . The cases in which this file is required are: * During the server launch * For a configuration import from another server * For a configuration export of the server Example strongbox.yaml File \u00b6 The following is an example of a strongbox.yaml configuration file: configuration: instanceName: strongbox version: ${project.version} revision: ${strongbox.revision} baseUrl: http://localhost:48080/ port: 48080 sessionConfiguration: timeoutSeconds: 3600 remoteRepositoriesConfiguration: checkIntervalSeconds: 60 heartbeatThreadsNumber: 5 retryArtifactDownloadConfiguration: timeoutSeconds: 60 maxNumberOfAttempts: 5 minAttemptsIntervalSeconds: 5 corsConfiguration: allowedCredentials: true maxAge: 600 allowedOrigins: - \"*\" allowedMethods: - GET - PUT - POST - DELETE - OPTIONS allowedHeaders: - Accept - Accepts - Authorization - Access-Control-Allow-Headers - Access-Control-Request-Headers - Access-Control-Request-Method - DNT - Keep-Alive - User-Agent - X-Requested-With - If-Modified-Since - Cache-Control - Content-Type - Content-Range,Range storages: storage0: id: storage0 repositories: releases: id: releases policy: release dataStore: file-system layout: Maven 2 type: hosted allowsForceDeletion: true checksumHeadersEnabled: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum snapshots: id: snapshots policy: snapshot dataStore: file-system layout: Maven 2 type: hosted secured: true checksumHeadersEnabled: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-common-proxies: id: storage-common-proxies repositories: maven-central: id: maven-central policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.maven.apache.org/maven2/ downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum carlspring: id: carlspring policy: mixed dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.carlspring.org/content/groups/carlspring downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum apache-snapshots: id: apache-snapshots policy: snapshot dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repository.apache.org/snapshots/ downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum jboss-public-releases: id: jboss-public-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repository.jboss.org/nexus/content/groups/public-jboss/ downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum maven-oracle: id: maven-oracle policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://maven.oracle.com downloadRemoteIndexes: true autoBlocking: true checksumValidation: true allowsDirectoryBrowsing: false repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum group-common-proxies: id: group-common-proxies policy: release dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - carlspring - maven-central - apache-snapshots - jboss-public-releases repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum nuget.org: id: nuget.org policy: release dataStore: file-system layout: NuGet type: proxy remoteRepository: url: https://www.nuget.org/api/v2 repositoryConfiguration: type: NuGet remoteFeedPageSize: 1000 storage-springsource-proxies: id: storage-springsource-proxies repositories: springsource-snapshots: id: springsource-snapshots policy: snapshot dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repo.spring.io/snapshot downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum springsource-releases: id: springsource-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repo.spring.io/libs-release downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum springsource-milestones: id: springsource-milestones policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repo.spring.io/milestone downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum springsource-proxies: id: springsource-proxies policy: mixed dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - springsource-snapshots - springsource-releases - springsource-milestones repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-ivy-proxies: id: storage-ivy-proxies repositories: typesafe-releases: id: typesafe-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.typesafe.com/typesafe/releases downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum typesafe-ivy-releases: id: typesafe-ivy-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.typesafe.com/typesafe/ivy-releases downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum group-ivy-proxies: id: group-ivy-proxies policy: release dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - typesafe-releases - typesafe-ivy-releases repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-sbt-proxies: id: storage-sbt-proxies repositories: sbt-plugin-releases: id: sbt-plugin-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum group-sbt-proxies: id: group-sbt-proxies policy: release dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - sbt-plugin-releases - storage-ivy-proxies:group-ivy-proxies repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-third-party: id: storage-third-party repositories: third-party: id: third-party policy: release dataStore: file-system layout: Maven 2 type: hosted allowsForceDeletion: true checksumHeadersEnabled: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" nuget-third-party: id: nuget-third-party policy: release dataStore: file-system layout: NuGet type: hosted allowsForceDeletion: true checksumHeadersEnabled: true storage-npm: id: storage-npm repositories: npm-releases: id: npm-releases policy: release dataStore: file-system layout: npm type: hosted allowsForceDeletion: true checksumHeadersEnabled: true npmjs: id: npmjs policy: release dataStore: file-system layout: npm type: proxy remoteRepository: url: https://registry.npmjs.org/ customConfiguration: type: npm lastChangeId: 0 replicateUrl: https://replicate.npmjs.com/ storage-nuget: id: storage-nuget repositories: nuget-releases: id: nuget-releases policy: release dataStore: file-system layout: NuGet type: hosted allowsForceDeletion: true checksumHeadersEnabled: true storage-raw: id: storage-raw repositories: raw-releases: id: raw-releases policy: release dataStore: file-system layout: Raw type: hosted allowsForceDeletion: true checksumHeadersEnabled: true public: id: public repositories: maven-group: id: maven-group policy: mixed dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - storage0:releases - storage0:snapshots - storage-common-proxies:group-common-proxies - storage-springsource-proxies:springsource-proxies - storage-ivy-proxies:group-ivy-proxies - storage-sbt-proxies:group-sbt-proxies - storage-third-party:third-party repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum nuget-group: id: nuget-group policy: mixed dataStore: file-system layout: NuGet type: group secured: true groupRepositories: - storage-common-proxies:nuget.org - storage-third-party:nuget-third-party npm-group: id: npm-group policy: mixed dataStore: file-system layout: npm type: group secured: true groupRepositories: - storage-npm:npmjs routingRules: rules: - uuid: 0f84a9a7-b2ce-47ed-8a01-085e235a1946 storageId: storage-common-proxies repositoryId: group-common-proxies pattern: \".*(com|org)/carlspring.*\" type: deny repositories: - storageId: storage-common-proxies repositoryId: jboss-public-releases Information For Developers \u00b6 The following classes are related to various aspects of the configuration: Class Name Description org.carlspring.strongbox.configuration.MutableConfiguration Represents a configuration in a deserialized form. org.carlspring.strongbox.configuration.ConfigurationFileManager Class to serialize / deserialize the configuration. The strongbox.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory. See Also \u00b6 Artifact Routing Rules","title":"The strongbox.yaml file"},{"location":"user-guide/configuration-files/strongbox-yaml.html#the-strongboxyaml-file","text":"This resource file describes the configuration of the server. The property controlling this file is strongbox.config.file . The default location for this resource is etc/conf/strongbox.yaml . The cases in which this file is required are: * During the server launch * For a configuration import from another server * For a configuration export of the server","title":"The strongbox.yaml File"},{"location":"user-guide/configuration-files/strongbox-yaml.html#example-strongboxyaml-file","text":"The following is an example of a strongbox.yaml configuration file: configuration: instanceName: strongbox version: ${project.version} revision: ${strongbox.revision} baseUrl: http://localhost:48080/ port: 48080 sessionConfiguration: timeoutSeconds: 3600 remoteRepositoriesConfiguration: checkIntervalSeconds: 60 heartbeatThreadsNumber: 5 retryArtifactDownloadConfiguration: timeoutSeconds: 60 maxNumberOfAttempts: 5 minAttemptsIntervalSeconds: 5 corsConfiguration: allowedCredentials: true maxAge: 600 allowedOrigins: - \"*\" allowedMethods: - GET - PUT - POST - DELETE - OPTIONS allowedHeaders: - Accept - Accepts - Authorization - Access-Control-Allow-Headers - Access-Control-Request-Headers - Access-Control-Request-Method - DNT - Keep-Alive - User-Agent - X-Requested-With - If-Modified-Since - Cache-Control - Content-Type - Content-Range,Range storages: storage0: id: storage0 repositories: releases: id: releases policy: release dataStore: file-system layout: Maven 2 type: hosted allowsForceDeletion: true checksumHeadersEnabled: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum snapshots: id: snapshots policy: snapshot dataStore: file-system layout: Maven 2 type: hosted secured: true checksumHeadersEnabled: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-common-proxies: id: storage-common-proxies repositories: maven-central: id: maven-central policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.maven.apache.org/maven2/ downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum carlspring: id: carlspring policy: mixed dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.carlspring.org/content/groups/carlspring downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum apache-snapshots: id: apache-snapshots policy: snapshot dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repository.apache.org/snapshots/ downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum jboss-public-releases: id: jboss-public-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repository.jboss.org/nexus/content/groups/public-jboss/ downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum maven-oracle: id: maven-oracle policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://maven.oracle.com downloadRemoteIndexes: true autoBlocking: true checksumValidation: true allowsDirectoryBrowsing: false repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum group-common-proxies: id: group-common-proxies policy: release dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - carlspring - maven-central - apache-snapshots - jboss-public-releases repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum nuget.org: id: nuget.org policy: release dataStore: file-system layout: NuGet type: proxy remoteRepository: url: https://www.nuget.org/api/v2 repositoryConfiguration: type: NuGet remoteFeedPageSize: 1000 storage-springsource-proxies: id: storage-springsource-proxies repositories: springsource-snapshots: id: springsource-snapshots policy: snapshot dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repo.spring.io/snapshot downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum springsource-releases: id: springsource-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repo.spring.io/libs-release downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum springsource-milestones: id: springsource-milestones policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: http://repo.spring.io/milestone downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum springsource-proxies: id: springsource-proxies policy: mixed dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - springsource-snapshots - springsource-releases - springsource-milestones repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-ivy-proxies: id: storage-ivy-proxies repositories: typesafe-releases: id: typesafe-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.typesafe.com/typesafe/releases downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum typesafe-ivy-releases: id: typesafe-ivy-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.typesafe.com/typesafe/ivy-releases downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum group-ivy-proxies: id: group-ivy-proxies policy: release dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - typesafe-releases - typesafe-ivy-releases repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-sbt-proxies: id: storage-sbt-proxies repositories: sbt-plugin-releases: id: sbt-plugin-releases policy: release dataStore: file-system layout: Maven 2 type: proxy remoteRepository: url: https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases downloadRemoteIndexes: true autoBlocking: true checksumValidation: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum group-sbt-proxies: id: group-sbt-proxies policy: release dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - sbt-plugin-releases - storage-ivy-proxies:group-ivy-proxies repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum storage-third-party: id: storage-third-party repositories: third-party: id: third-party policy: release dataStore: file-system layout: Maven 2 type: hosted allowsForceDeletion: true checksumHeadersEnabled: true repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" nuget-third-party: id: nuget-third-party policy: release dataStore: file-system layout: NuGet type: hosted allowsForceDeletion: true checksumHeadersEnabled: true storage-npm: id: storage-npm repositories: npm-releases: id: npm-releases policy: release dataStore: file-system layout: npm type: hosted allowsForceDeletion: true checksumHeadersEnabled: true npmjs: id: npmjs policy: release dataStore: file-system layout: npm type: proxy remoteRepository: url: https://registry.npmjs.org/ customConfiguration: type: npm lastChangeId: 0 replicateUrl: https://replicate.npmjs.com/ storage-nuget: id: storage-nuget repositories: nuget-releases: id: nuget-releases policy: release dataStore: file-system layout: NuGet type: hosted allowsForceDeletion: true checksumHeadersEnabled: true storage-raw: id: storage-raw repositories: raw-releases: id: raw-releases policy: release dataStore: file-system layout: Raw type: hosted allowsForceDeletion: true checksumHeadersEnabled: true public: id: public repositories: maven-group: id: maven-group policy: mixed dataStore: file-system layout: Maven 2 type: group secured: true groupRepositories: - storage0:releases - storage0:snapshots - storage-common-proxies:group-common-proxies - storage-springsource-proxies:springsource-proxies - storage-ivy-proxies:group-ivy-proxies - storage-sbt-proxies:group-sbt-proxies - storage-third-party:third-party repositoryConfiguration: type: Maven 2 indexingEnabled: true cronExpression: \"0 0 2 * * ?\" metadataExpirationStrategy: checksum nuget-group: id: nuget-group policy: mixed dataStore: file-system layout: NuGet type: group secured: true groupRepositories: - storage-common-proxies:nuget.org - storage-third-party:nuget-third-party npm-group: id: npm-group policy: mixed dataStore: file-system layout: npm type: group secured: true groupRepositories: - storage-npm:npmjs routingRules: rules: - uuid: 0f84a9a7-b2ce-47ed-8a01-085e235a1946 storageId: storage-common-proxies repositoryId: group-common-proxies pattern: \".*(com|org)/carlspring.*\" type: deny repositories: - storageId: storage-common-proxies repositoryId: jboss-public-releases","title":"Example strongbox.yaml File"},{"location":"user-guide/configuration-files/strongbox-yaml.html#information-for-developers","text":"The following classes are related to various aspects of the configuration: Class Name Description org.carlspring.strongbox.configuration.MutableConfiguration Represents a configuration in a deserialized form. org.carlspring.strongbox.configuration.ConfigurationFileManager Class to serialize / deserialize the configuration. The strongbox.yaml , which is packaged in the distribution, is located under the strongbox-storage-api-resources 's src/main/resources/etc/conf directory.","title":"Information For Developers"},{"location":"user-guide/configuration-files/strongbox-yaml.html#see-also","text":"Artifact Routing Rules","title":"See Also"},{"location":"user-guide/tool-integration/ant-ivy-example.html","text":"Ant and Ivy \u00b6 This is an example of how to use the Strongbox artifact repository manager with Ant and Ivy. Pre-requisites \u00b6 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Ant version 1.9.14 or higher Ivy Example project \u00b6 The \"Hello, Strongbox!\" example project can be found here . Configuration \u00b6 Ensure you have configured the following environment variables in order to be able to use Ivy with Strongbox: Define an IVY_HOME variable pointing to the base directory of your Ivy installation. Set your PATH / CLASSPATH variable to include $IVY_HOME/ivy-${IVY_VERSION}.jar . The build.xml file \u00b6 This is the Ant build script which compiles the code, produces a jar artifact and publishes (deploys) it to the Strongbox artifact repository. The ivysettings.xml file \u00b6 This is where you define things like: - resolvers : The repositories from which to resolve artifacta - publications : Which artifacts to publish (deploy) to Strongbox The ivy.xml file \u00b6 This is where you define: * Your artifact's coordinates (via the <info/> tag) * Your dependencies (via the <dependencies/> tag) The credentials.properties file \u00b6 This file should be located under your ~/.ivy directory and not be part of the project under version control. It contains the credentials for the repository to which you will be deploying. How to deploy \u00b6 Execute the following command to build and deploy into Strongbox: ant build deploy Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-ant-ivy> ant publish-snapshot Buildfile: /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/build.xml clean: [delete] Deleting directory /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target init-ivy: resolve: [ivy:resolve] :: Apache Ivy 2.4.0 - 20141213170938 :: http://ant.apache.org/ivy/ :: [ivy:resolve] :: loading settings :: file = /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/ivysettings.xml [ivy:resolve] :: resolving dependencies :: org.carlspring.strongbox.examples#hello-strongbox-ant-ivy;working@localhost [ivy:resolve] confs: [default] [ivy:resolve] found junit#junit;4.11 in maven-central [ivy:resolve] found org.hamcrest#hamcrest-core;1.3 in maven-central [ivy:resolve] :: resolution report :: resolve 76ms :: artifacts dl 3ms --------------------------------------------------------------------- | | modules || artifacts | | conf | number| search|dwnlded|evicted|| number|dwnlded| --------------------------------------------------------------------- | default | 2 | 0 | 0 | 0 || 2 | 0 | --------------------------------------------------------------------- compile: [mkdir] Created dir: /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/classes [javac] /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/build.xml:26: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds [javac] Compiling 1 source file to /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/classes jar: [jar] Building jar: /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/hello-strongbox-ant-ivy.jar publish-snapshot: [ivy:deliver] :: delivering :: org.carlspring.strongbox.examples#hello-strongbox-ant-ivy;working@localhost :: 1.0-SNAPSHOT :: integration :: Wed May 18 23:16:32 BST 2016 [ivy:deliver] delivering ivy file to /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/ivy.xml [ivy:publish] :: publishing :: org.carlspring.strongbox.examples#hello-strongbox-ant-ivy [ivy:publish] published hello-strongbox-ant-ivy to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-ant-ivy/1.0-SNAPSHOT/hello-strongbox-ant-ivy-1.0-SNAPSHOT.jar [ivy:publish] published hello-strongbox-ant-ivy to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-ant-ivy/1.0-SNAPSHOT/hello-strongbox-ant-ivy-1.0-SNAPSHOT.pom [echo] Deployed version 1.0-SNAPSHOT. BUILD SUCCESSFUL Total time: 1 second See also \u00b6 A useful link regarding pom.xml file treatment. Ivy: makepom documentation.","title":"Ant + Ivy Example"},{"location":"user-guide/tool-integration/ant-ivy-example.html#ant-and-ivy","text":"This is an example of how to use the Strongbox artifact repository manager with Ant and Ivy.","title":"Ant and Ivy"},{"location":"user-guide/tool-integration/ant-ivy-example.html#pre-requisites","text":"Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Ant version 1.9.14 or higher Ivy","title":"Pre-requisites"},{"location":"user-guide/tool-integration/ant-ivy-example.html#example-project","text":"The \"Hello, Strongbox!\" example project can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/ant-ivy-example.html#configuration","text":"Ensure you have configured the following environment variables in order to be able to use Ivy with Strongbox: Define an IVY_HOME variable pointing to the base directory of your Ivy installation. Set your PATH / CLASSPATH variable to include $IVY_HOME/ivy-${IVY_VERSION}.jar .","title":"Configuration"},{"location":"user-guide/tool-integration/ant-ivy-example.html#the-buildxml-file","text":"This is the Ant build script which compiles the code, produces a jar artifact and publishes (deploys) it to the Strongbox artifact repository.","title":"The build.xml file"},{"location":"user-guide/tool-integration/ant-ivy-example.html#the-ivysettingsxml-file","text":"This is where you define things like: - resolvers : The repositories from which to resolve artifacta - publications : Which artifacts to publish (deploy) to Strongbox","title":"The ivysettings.xml file"},{"location":"user-guide/tool-integration/ant-ivy-example.html#the-ivyxml-file","text":"This is where you define: * Your artifact's coordinates (via the <info/> tag) * Your dependencies (via the <dependencies/> tag)","title":"The ivy.xml file"},{"location":"user-guide/tool-integration/ant-ivy-example.html#the-credentialsproperties-file","text":"This file should be located under your ~/.ivy directory and not be part of the project under version control. It contains the credentials for the repository to which you will be deploying.","title":"The credentials.properties file"},{"location":"user-guide/tool-integration/ant-ivy-example.html#how-to-deploy","text":"Execute the following command to build and deploy into Strongbox: ant build deploy Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-ant-ivy> ant publish-snapshot Buildfile: /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/build.xml clean: [delete] Deleting directory /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target init-ivy: resolve: [ivy:resolve] :: Apache Ivy 2.4.0 - 20141213170938 :: http://ant.apache.org/ivy/ :: [ivy:resolve] :: loading settings :: file = /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/ivysettings.xml [ivy:resolve] :: resolving dependencies :: org.carlspring.strongbox.examples#hello-strongbox-ant-ivy;working@localhost [ivy:resolve] confs: [default] [ivy:resolve] found junit#junit;4.11 in maven-central [ivy:resolve] found org.hamcrest#hamcrest-core;1.3 in maven-central [ivy:resolve] :: resolution report :: resolve 76ms :: artifacts dl 3ms --------------------------------------------------------------------- | | modules || artifacts | | conf | number| search|dwnlded|evicted|| number|dwnlded| --------------------------------------------------------------------- | default | 2 | 0 | 0 | 0 || 2 | 0 | --------------------------------------------------------------------- compile: [mkdir] Created dir: /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/classes [javac] /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/build.xml:26: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds [javac] Compiling 1 source file to /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/classes jar: [jar] Building jar: /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/hello-strongbox-ant-ivy.jar publish-snapshot: [ivy:deliver] :: delivering :: org.carlspring.strongbox.examples#hello-strongbox-ant-ivy;working@localhost :: 1.0-SNAPSHOT :: integration :: Wed May 18 23:16:32 BST 2016 [ivy:deliver] delivering ivy file to /home/carlspring/strongbox-examples/hello-strongbox-ant-ivy/target/ivy.xml [ivy:publish] :: publishing :: org.carlspring.strongbox.examples#hello-strongbox-ant-ivy [ivy:publish] published hello-strongbox-ant-ivy to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-ant-ivy/1.0-SNAPSHOT/hello-strongbox-ant-ivy-1.0-SNAPSHOT.jar [ivy:publish] published hello-strongbox-ant-ivy to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-ant-ivy/1.0-SNAPSHOT/hello-strongbox-ant-ivy-1.0-SNAPSHOT.pom [echo] Deployed version 1.0-SNAPSHOT. BUILD SUCCESSFUL Total time: 1 second","title":"How to deploy"},{"location":"user-guide/tool-integration/ant-ivy-example.html#see-also","text":"A useful link regarding pom.xml file treatment. Ivy: makepom documentation.","title":"See also"},{"location":"user-guide/tool-integration/gradle-example.html","text":"Gradle \u00b6 This is an example of how to use the Strongbox artifact repository manager with Gradle . Pre-requisites \u00b6 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Gradle version 2.11 or higher Example project \u00b6 The \"Hello, Strongbox!\" example project can be found [here][hello-strongbox-ant-ivy]. Configuring gradle \u00b6 The gradle.build file \u00b6 This is a build script written in Groovy. Artifact-related properties could be defined and customized in the following way: Add group property to specify logical prefix where other similar projects reside (like the groupId in a Maven pom.xml file) Add version to specify artifact's version Customize the repositories section to add any artifact repositories such as Maven Central (included by default) Customize the dependencies section to add any dependencies to your project; dependency management could be implemented using ext properties object and applying common settings from single separate gradle file, read more here Customize uploadArchives to specify artifact-to-repository uploading process, matches Maven distributionManagement section Read more on gradle scripting here . The settings.gradle file \u00b6 Use this file to specify project-specific settings of gradle build as well as the artifact's name under the rootProject.name property. The gradle.properties file \u00b6 This file should be created manually by every developer, or it's perfectly fine to have global settings located in .gradle/gradle.properties . For more details please visit Gradle Build environment page . Here are the properties for this example project: mavenUser=maven mavenPassword=password Credentials \u00b6 Via gradle.properties \u00b6 As illustrated in the section above, you should place your credentials in the gradle.properties in your project's root, or in the ~/.gradle directory (which will have a global impact). Add the following properties: mavenUser=maven mavenPassword=password The down side here is that you would need to have this file on the file system. Via command-line \u00b6 Specify the following Java args: -Dcredentials.username=maven -Dcredentials.password=password The benefit of doing it like this is that you don't need to have the credentials stored in a file on the file system. Most CI servers would allow you to pass in a secured value for credential properties. How to build from source code \u00b6 When you clone this example project sources, go into that directory and execute gradle clean upload . This will try to deploy artifacts to the Strongbox Repository. How to customize target artifact repository during upload \u00b6 Change the repositories.mavenDeployer.repository property and specify the URL and credentials of any repository you would like to upload to. Make sure you don't have SNAPSHOT in your version if you are uploading to the release repository. Example output >:hello-strongbox-gradle neo$ gradle clean upload Starting a new Gradle Daemon for this build (subsequent builds will be faster). :clean :compileJava :processResources UP-TO-DATE :classes :jar :javadoc :javadocJar :sourcesJar :uploadArchives Could not find metadata upload:hello-strongbox-gradle:1.0-SNAPSHOT/maven-metadata.xml in remote (http://localhost:48080/storages/storage0/snapshots/) Could not find metadata upload:hello-strongbox-gradle/maven-metadata.xml in remote (http://localhost:48080/storages/storage0/snapshots/) BUILD SUCCESSFUL Total time: 13.035 secs You might see a warning stating metadata.xml could not be found in remote. This is normal because this is the first time you are deploying the artifact and at this point there is no metadata.xml available. It will be available after you have deployed the artifact for the first time. When you deploy it a second time you will not see the warning since the metadata.xml is now available at the remote. Example output >:hello-strongbox-gradle neo$ gradle clean upload :clean :compileJava :processResources UP-TO-DATE :classes :jar :javadoc :javadocJar :sourcesJar :uploadArchives BUILD SUCCESSFUL Total time: 2.034 secs Troubleshooting \u00b6 If you see error about missing metadata.xml or something similar for the FIRST time when you upload an artifact - don't worry, because this simply said that you are new to this repository entry and there is no existing metadata for your artifact. It will be created. See Also \u00b6 Gradle: Tutorial Using Tasks Gradle: Artifact Management Gradle: Build Environment Spring: Building Java Projects with Gradle","title":"Gradle Example"},{"location":"user-guide/tool-integration/gradle-example.html#gradle","text":"This is an example of how to use the Strongbox artifact repository manager with Gradle .","title":"Gradle"},{"location":"user-guide/tool-integration/gradle-example.html#pre-requisites","text":"Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Gradle version 2.11 or higher","title":"Pre-requisites"},{"location":"user-guide/tool-integration/gradle-example.html#example-project","text":"The \"Hello, Strongbox!\" example project can be found [here][hello-strongbox-ant-ivy].","title":"Example project"},{"location":"user-guide/tool-integration/gradle-example.html#configuring-gradle","text":"","title":"Configuring gradle"},{"location":"user-guide/tool-integration/gradle-example.html#the-gradlebuild-file","text":"This is a build script written in Groovy. Artifact-related properties could be defined and customized in the following way: Add group property to specify logical prefix where other similar projects reside (like the groupId in a Maven pom.xml file) Add version to specify artifact's version Customize the repositories section to add any artifact repositories such as Maven Central (included by default) Customize the dependencies section to add any dependencies to your project; dependency management could be implemented using ext properties object and applying common settings from single separate gradle file, read more here Customize uploadArchives to specify artifact-to-repository uploading process, matches Maven distributionManagement section Read more on gradle scripting here .","title":"The gradle.build file"},{"location":"user-guide/tool-integration/gradle-example.html#the-settingsgradle-file","text":"Use this file to specify project-specific settings of gradle build as well as the artifact's name under the rootProject.name property.","title":"The settings.gradle file"},{"location":"user-guide/tool-integration/gradle-example.html#the-gradleproperties-file","text":"This file should be created manually by every developer, or it's perfectly fine to have global settings located in .gradle/gradle.properties . For more details please visit Gradle Build environment page . Here are the properties for this example project: mavenUser=maven mavenPassword=password","title":"The gradle.properties file"},{"location":"user-guide/tool-integration/gradle-example.html#credentials","text":"","title":"Credentials"},{"location":"user-guide/tool-integration/gradle-example.html#via-gradleproperties","text":"As illustrated in the section above, you should place your credentials in the gradle.properties in your project's root, or in the ~/.gradle directory (which will have a global impact). Add the following properties: mavenUser=maven mavenPassword=password The down side here is that you would need to have this file on the file system.","title":"Via gradle.properties"},{"location":"user-guide/tool-integration/gradle-example.html#via-command-line","text":"Specify the following Java args: -Dcredentials.username=maven -Dcredentials.password=password The benefit of doing it like this is that you don't need to have the credentials stored in a file on the file system. Most CI servers would allow you to pass in a secured value for credential properties.","title":"Via command-line"},{"location":"user-guide/tool-integration/gradle-example.html#how-to-build-from-source-code","text":"When you clone this example project sources, go into that directory and execute gradle clean upload . This will try to deploy artifacts to the Strongbox Repository.","title":"How to build from source code"},{"location":"user-guide/tool-integration/gradle-example.html#how-to-customize-target-artifact-repository-during-upload","text":"Change the repositories.mavenDeployer.repository property and specify the URL and credentials of any repository you would like to upload to. Make sure you don't have SNAPSHOT in your version if you are uploading to the release repository. Example output >:hello-strongbox-gradle neo$ gradle clean upload Starting a new Gradle Daemon for this build (subsequent builds will be faster). :clean :compileJava :processResources UP-TO-DATE :classes :jar :javadoc :javadocJar :sourcesJar :uploadArchives Could not find metadata upload:hello-strongbox-gradle:1.0-SNAPSHOT/maven-metadata.xml in remote (http://localhost:48080/storages/storage0/snapshots/) Could not find metadata upload:hello-strongbox-gradle/maven-metadata.xml in remote (http://localhost:48080/storages/storage0/snapshots/) BUILD SUCCESSFUL Total time: 13.035 secs You might see a warning stating metadata.xml could not be found in remote. This is normal because this is the first time you are deploying the artifact and at this point there is no metadata.xml available. It will be available after you have deployed the artifact for the first time. When you deploy it a second time you will not see the warning since the metadata.xml is now available at the remote. Example output >:hello-strongbox-gradle neo$ gradle clean upload :clean :compileJava :processResources UP-TO-DATE :classes :jar :javadoc :javadocJar :sourcesJar :uploadArchives BUILD SUCCESSFUL Total time: 2.034 secs","title":"How to customize target artifact repository during upload"},{"location":"user-guide/tool-integration/gradle-example.html#troubleshooting","text":"If you see error about missing metadata.xml or something similar for the FIRST time when you upload an artifact - don't worry, because this simply said that you are new to this repository entry and there is no existing metadata for your artifact. It will be created.","title":"Troubleshooting"},{"location":"user-guide/tool-integration/gradle-example.html#see-also","text":"Gradle: Tutorial Using Tasks Gradle: Artifact Management Gradle: Build Environment Spring: Building Java Projects with Gradle","title":"See Also"},{"location":"user-guide/tool-integration/maven-example.html","text":"Maven \u00b6 This is an example of how to use the Strongbox artifact repository manager with Maven. Pre-requisites \u00b6 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Maven version 3.x or higher Example project \u00b6 The \"Hello, Strongbox!\" example project can be found here . Configuration \u00b6 pom.xml \u00b6 The pom.xml file is used to define your project's dependencies, repositories to use for resolving and deploying artifacts, plugins to use, etc. Key things each project needs to have: groupId - logical prefix where other similar projects reside. artifactId - the artifact's name. version - the version of the artifact. packaging (optional, defaults to jar , if not specified) - the packaging type (jar, war, etc...) <repositories/> section - defines where to resolve dependencies from. <distributionManagement/> section - Defines where to deploy the artifact(s) produced by this build to. settings.xml \u00b6 This is Maven's configuration file used to define global settings, such as remote repositories, preferred mirrors, proxy settings, repository credentials, etc. It is normally located in a .m2 folder under your home directory - ~/.m2/settings.xml or C:\\Users\\youruser\\.m2\\settings.xml . You can also use -s /path/to/settings.xml to define a custom location (i.e. you might need to have multiple settings.xml files) It is important to note that the <repositories/> and <distributionManagement/> sections in your pom.xml file always have an <id/> . This <id/> needs to match the <id/> of a corresponding <server/> in your settings.xml file. Deploy \u00b6 Execute the following command to build and deploy into Strongbox: mvn clean deploy Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-maven> mvn clean deploy [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building hello-strongbox-maven 1.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello-strongbox-maven --- [INFO] Deleting /home/carlspring/strongbox-examples/hello-strongbox-maven/target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello-strongbox-maven --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /home/carlspring/strongbox-examples/hello-strongbox-maven/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello-strongbox-maven --- [INFO] Changes detected - recompiling the module! [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Compiling 1 source file to /home/carlspring/strongbox-examples/hello-strongbox-maven/target/classes [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hello-strongbox-maven --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /home/carlspring/strongbox-examples/hello-strongbox-maven/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ hello-strongbox-maven --- [INFO] No sources to compile [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hello-strongbox-maven --- [INFO] No tests to run. [INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hello-strongbox-maven --- [INFO] Building jar: /home/carlspring/strongbox-examples/hello-strongbox-maven/target/hello-strongbox-maven-1.0-SNAPSHOT.jar [INFO] [INFO] --- maven-install-plugin:2.4:install (default-install) @ hello-strongbox-maven --- [INFO] Installing /home/carlspring/strongbox-examples/hello-strongbox-maven/target/hello-strongbox-maven-1.0-SNAPSHOT.jar to /home/carlspring/.m2/repository/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-SNAPSHOT.jar [INFO] Installing /home/carlspring/strongbox-examples/hello-strongbox-maven/pom.xml to /home/carlspring/.m2/repository/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-SNAPSHOT.pom [INFO] [INFO] --- maven-deploy-plugin:2.7:deploy (default-deploy) @ hello-strongbox-maven --- Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.jar Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.jar (3 KB at 11.5 KB/sec) Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.pom Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.pom (2 KB at 41.6 KB/sec) Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/maven-metadata.xml (798 B at 21.1 KB/sec) Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/maven-metadata.xml (312 B at 8.7 KB/sec) [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.220 s [INFO] Finished at: 2016-04-30T04:17:13+01:00 [INFO] Final Memory: 21M/311M [INFO] ------------------------------------------------------------------------ See also \u00b6 Maven: POM Reference Maven: Settings Reference Maven: Credentials Encryption Guide","title":"Maven Example"},{"location":"user-guide/tool-integration/maven-example.html#maven","text":"This is an example of how to use the Strongbox artifact repository manager with Maven.","title":"Maven"},{"location":"user-guide/tool-integration/maven-example.html#pre-requisites","text":"Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Maven version 3.x or higher","title":"Pre-requisites"},{"location":"user-guide/tool-integration/maven-example.html#example-project","text":"The \"Hello, Strongbox!\" example project can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/maven-example.html#configuration","text":"","title":"Configuration"},{"location":"user-guide/tool-integration/maven-example.html#pomxml","text":"The pom.xml file is used to define your project's dependencies, repositories to use for resolving and deploying artifacts, plugins to use, etc. Key things each project needs to have: groupId - logical prefix where other similar projects reside. artifactId - the artifact's name. version - the version of the artifact. packaging (optional, defaults to jar , if not specified) - the packaging type (jar, war, etc...) <repositories/> section - defines where to resolve dependencies from. <distributionManagement/> section - Defines where to deploy the artifact(s) produced by this build to.","title":"pom.xml"},{"location":"user-guide/tool-integration/maven-example.html#settingsxml","text":"This is Maven's configuration file used to define global settings, such as remote repositories, preferred mirrors, proxy settings, repository credentials, etc. It is normally located in a .m2 folder under your home directory - ~/.m2/settings.xml or C:\\Users\\youruser\\.m2\\settings.xml . You can also use -s /path/to/settings.xml to define a custom location (i.e. you might need to have multiple settings.xml files) It is important to note that the <repositories/> and <distributionManagement/> sections in your pom.xml file always have an <id/> . This <id/> needs to match the <id/> of a corresponding <server/> in your settings.xml file.","title":"settings.xml"},{"location":"user-guide/tool-integration/maven-example.html#deploy","text":"Execute the following command to build and deploy into Strongbox: mvn clean deploy Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-maven> mvn clean deploy [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building hello-strongbox-maven 1.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello-strongbox-maven --- [INFO] Deleting /home/carlspring/strongbox-examples/hello-strongbox-maven/target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello-strongbox-maven --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /home/carlspring/strongbox-examples/hello-strongbox-maven/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello-strongbox-maven --- [INFO] Changes detected - recompiling the module! [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Compiling 1 source file to /home/carlspring/strongbox-examples/hello-strongbox-maven/target/classes [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hello-strongbox-maven --- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] skip non existing resourceDirectory /home/carlspring/strongbox-examples/hello-strongbox-maven/src/test/resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ hello-strongbox-maven --- [INFO] No sources to compile [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hello-strongbox-maven --- [INFO] No tests to run. [INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hello-strongbox-maven --- [INFO] Building jar: /home/carlspring/strongbox-examples/hello-strongbox-maven/target/hello-strongbox-maven-1.0-SNAPSHOT.jar [INFO] [INFO] --- maven-install-plugin:2.4:install (default-install) @ hello-strongbox-maven --- [INFO] Installing /home/carlspring/strongbox-examples/hello-strongbox-maven/target/hello-strongbox-maven-1.0-SNAPSHOT.jar to /home/carlspring/.m2/repository/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-SNAPSHOT.jar [INFO] Installing /home/carlspring/strongbox-examples/hello-strongbox-maven/pom.xml to /home/carlspring/.m2/repository/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-SNAPSHOT.pom [INFO] [INFO] --- maven-deploy-plugin:2.7:deploy (default-deploy) @ hello-strongbox-maven --- Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.jar Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.jar (3 KB at 11.5 KB/sec) Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.pom Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/hello-strongbox-maven-1.0-20160430.031713-1.pom (2 KB at 41.6 KB/sec) Downloading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/maven-metadata.xml Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/1.0-SNAPSHOT/maven-metadata.xml (798 B at 21.1 KB/sec) Uploading: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/maven-metadata.xml Uploaded: http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-maven/maven-metadata.xml (312 B at 8.7 KB/sec) [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.220 s [INFO] Finished at: 2016-04-30T04:17:13+01:00 [INFO] Final Memory: 21M/311M [INFO] ------------------------------------------------------------------------","title":"Deploy"},{"location":"user-guide/tool-integration/maven-example.html#see-also","text":"Maven: POM Reference Maven: Settings Reference Maven: Credentials Encryption Guide","title":"See also"},{"location":"user-guide/tool-integration/npm-example.html","text":"NPM \u00b6 This is an example of how to use the Strongbox artifact repository manager with NPM. Pre-requisites \u00b6 NodeJS version 12 or higher NPM Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Example project \u00b6 The \"Hello, World!\" sample application for this can be found here . Prepare project workspace \u00b6 First, you need to configure npm to use Strongbox as a private registry. This can be done in your project by creating a .npmrc file, which is local npm configuration applied to your project. The Strongbox NPM Example contains an npmrc.template file with a set of pre-defined configuration properties that can be used in your own project, or on your machine. Typically, all you'll need to do, is execute the following command, and create your .npmrc file: $ cp npmrc.template .npmrc After that the pre-defined configuration parameters can be changed, according to your needs and environment (Strongbox URL, username and password). Your .npmrc should look like this: $ cat .npmrc registry=http://localhost:48080/storages/storage-npm/npm-releases always-auth=true email=someuser@example.com _auth=YWRtaW46cGFzc3dvcmQ= ; `_auth` is a base64 encoded authentication token ; you can use it instead of: ; username=admin ; _password=password How to publish npm package into Strongbox registry \u00b6 Execute the following command within your project folder: $ npm publish The output should look like this: $ npm publish + @strongbox/hello-strongbox-npm@1.0.0 See also \u00b6 npm official site","title":"NPM Example"},{"location":"user-guide/tool-integration/npm-example.html#npm","text":"This is an example of how to use the Strongbox artifact repository manager with NPM.","title":"NPM"},{"location":"user-guide/tool-integration/npm-example.html#pre-requisites","text":"NodeJS version 12 or higher NPM Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x","title":"Pre-requisites"},{"location":"user-guide/tool-integration/npm-example.html#example-project","text":"The \"Hello, World!\" sample application for this can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/npm-example.html#prepare-project-workspace","text":"First, you need to configure npm to use Strongbox as a private registry. This can be done in your project by creating a .npmrc file, which is local npm configuration applied to your project. The Strongbox NPM Example contains an npmrc.template file with a set of pre-defined configuration properties that can be used in your own project, or on your machine. Typically, all you'll need to do, is execute the following command, and create your .npmrc file: $ cp npmrc.template .npmrc After that the pre-defined configuration parameters can be changed, according to your needs and environment (Strongbox URL, username and password). Your .npmrc should look like this: $ cat .npmrc registry=http://localhost:48080/storages/storage-npm/npm-releases always-auth=true email=someuser@example.com _auth=YWRtaW46cGFzc3dvcmQ= ; `_auth` is a base64 encoded authentication token ; you can use it instead of: ; username=admin ; _password=password","title":"Prepare project workspace"},{"location":"user-guide/tool-integration/npm-example.html#how-to-publish-npm-package-into-strongbox-registry","text":"Execute the following command within your project folder: $ npm publish The output should look like this: $ npm publish + @strongbox/hello-strongbox-npm@1.0.0","title":"How to publish npm package into Strongbox registry"},{"location":"user-guide/tool-integration/npm-example.html#see-also","text":"npm official site","title":"See also"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html","text":"Nuget and Chocolatey \u00b6 This is an example of how to use the Strongbox artifact repository manager with Chocolatey using Nuget. Pre-requisites \u00b6 Before you proceed please make sure you have installed and configured a Strongbox Distribution . Example project \u00b6 The \"Hello, Strongbox!\" example project can be found here . Installing choco \u00b6 Windows Chocolatey is available natively on Windows and can be installed following the official documentation Mono If you are running Linux/MacOS and would like to use mono , there is no pre-built binary. You will need to head to the chocolatey repository for instructions on how to build it. Linux / MacOS / Docker We have already built a linux docker image with pre-built and configured choco which we are also using in our integration tests. It is published at strongboxci/alpine and you can feel free to use it for development purposes. It is OK to ignore warnings about a system reboot being requested since the nothing here is affected by it. Configuring Choco \u00b6 Get API key \u00b6 The NuGet protocol assumes that users need to be authenticated with API Key to be able to deploy or delete your packages. Strongbox provides the REST API to get an API Key for specified user: Windows 1 2 FOR /F %i IN ('curl -u admin http://localhost:48080/api/users/admin/generate-security-token') DO set API_KEY=%i echo %API_KEY% Linux 1 2 API_KEY=`curl -u admin http://localhost:48080/api/users/admin/generate-security-token` echo $API_KEY Enter your Strongbox password. (Default is: admin/password ) The output when echo ing the %API_KEY% should not be empty and should look something like this: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdHJvbmdib3giLCJqdGkiOiJtU3N0TGVOMGpabzJNcmdleGdWSUVRIiwic3ViIjoiYWRtaW4iLCJzZWN1cml0eS10b2tlbi1rZXkiOiJhZG1pbi1zZWNyAMQifQ.SgpKb4yUidK8ATbGxDOfjGjHfEF22PIFyzlpk-Rpad0 Save API key in choco \u00b6 In this step, we will be setting the apikey which will be used to authenticate against the source in the future steps. Windows 1 2 3 # This needs to be run in an administrative command prompt or powershell! set REPO_URL=http://localhost:48080/storages/storage-nuget/nuget-releases choco apikey -k %API_KEY% -s \"%REPO_URL%\" Linux 1 2 REPO_URL=http://localhost:48080/storages/storage-nuget/nuget-releases choco apikey -k $API_KEY -s \"$REPO_URL\" The output should be like follows: Chocolatey v.10.15 Added ApiKey for http://localhost:48080/storages/storage-nuget/nuget-releases Add Strongbox repository to Chocolatey package sources \u00b6 To manage packages, you'll need to configure Chocolatey to access your storages by running the following command: Windows 1 2 # This needs to be run as administrative command prompt or powershell! choco source add -n=strongbox -s \"%REPO_URL%\" --priority=1 Linux 1 choco source add -n=strongbox -s \"$REPO_URL\" --priority=1 The output should be like follows: Chocolatey v0.10.15 Added strongbox - http://localhost:48080/storages/storage-nuget/nuget-releases (Priority 1) Important notes You cannot deploy to group repositories, as they are only for resolving artifacts. Also, please note that the nuget-public group includes the nuget.org repository itself You can only deploy to hosted repositories. The deploy URLs would begin with /storages/{storageId}/{repositoryId} (i.e. /storages/storage-nuget/nuget-releases , nuget-snapshot , etc) How to \u00b6 Create a package \u00b6 The command below will create a folder named hello-chocolatey with some files including a .nuspec and a folder called tools . Windows 1 2 cd C:\\some\\path choco new --name=hello-chocolatey --version=1.0.0 Linux 1 2 cd /some/path choco new --name=hello-chocolatey --version=1.0.0 Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Creating a new package specification at C:\\Users\\User\\Documents\\hello-chocolatey Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\hello-chocolatey.nuspec' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\chocolateyinstall.ps1' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\chocolateybeforemodify.ps1' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\chocolateyuninstall.ps1' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\LICENSE.txt' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\VERIFICATION.txt' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\ReadMe.md' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\_TODO.txt' Successfully generated hello-chocolatey package specification files at 'C:\\Users\\User\\Documents\\hello-chocolatey' Additional instructions \u00b6 Delete _TODO.txt and ReadMe.md in the hello-chocolatey directory. Delete chocolateybeforemodify.ps1 and chocolateyuninstall.ps1 in the tools sub-directory. The LICENSE.txt and VERIFICATION.txt can also be deleted, although this is not required. Edit chocolateyinstall.ps1 in the tools sub-directory with a text editor and replace the entire content with Write-Output 'Package would install here' . If you are running on a Linux file system, edit hello-chocolatey.nuspec and replace \"tools\\**\" with \"tools/**\" (backwards to forwards slash) in the file section. It should be the forth row from the bottom. You can also check against the example files located in the strongbox-examples repository. Make Chocolatey NuGet package \u00b6 Execute the following command in the same directory as hello-chocolatey.nuspec : Windows 1 2 cd C:\\some\\path\\hello-chocolatey choco pack Linux 1 2 cd /some/path/to/hello-chocolatey choco pack Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Attempting to build package from 'hello-chocolatey.nuspec'. Successfully created package 'C:\\Users\\User\\Documents\\hello-chocolatey\\hello-chocolatey.1.0.0.nupkg' Push NuGet package into Strongbox repository \u00b6 Execute the following command in the directory with hello-chocolatey.1.0.0.nupkg : Windows 1 2 cd C:\\some\\path\\hello-chocolatey choco push --source \"%REPO_URL%\" --force Linux 1 2 cd /some/path/to/hello-chocolatey choco push --source \"$REPO_URL\" --force Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Attempting to push hello-chocolatey.1.0.0.nupkg to http://localhost:48080/storages/storage-nuget/nuget-releases hello-chocolatey 1.0.0 was pushed successfully to http://localhost:48080/storages/storage-nuget/nuget-releases Search for packages in Strongbox repositories \u00b6 Execute the following command: Windows 1 choco search -s \"%REPO_URL%\" Linux 1 choco search -s \"$REPO_URL\" Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). hello-chocolatey 1.0.0 1 packages found. Delete a Chocolatey package from strongbox \u00b6 Chocolatey does not have a built in way to delete packages from the server. As a workaround, you can use nuget to delete packages, see hello-strongbox-nuget-visual-studio for more details. Install a package \u00b6 To install a choco package you should use the command below. Windows 1 2 # Execute the following command as a administrator! choco install hello-chocolatey -s \"%REPO_URL%\" Linux 1 choco install hello-chocolatey -s \"$REPO_URL\" Tip Adding -s \"{repo_url}\" is optional. However, choco will loop through all sources until it finds the package which might be time consuming so you might want to force choco using the right source. Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Installing the following packages: hello-chocolatey.1.0.0.nupkg By installing you accept licenses for the packages. hello-chocolatey v1.0.0 hello-chocolatey package files install completed. Performing other installation steps. Package would install here The install of hello-chocolatey was successful. Software install location not explicitly set, could be in package or default install location if installer. Chocolatey installed 1/1 packages. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log). Uninstall a package \u00b6 Windows 1 2 # Execute the following command as a administrator! choco uninstall hello-chocolatey Linux 1 choco uninstall hello-chocolatey Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Uninstalling the following packages: hello-chocolatey hello-chocolatey v1.0.0 Skipping auto uninstaller - No registry snapshot. hello-chocolatey has been successfully uninstalled. Chocolatey uninstalled 1/1 packages. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log). See also \u00b6 Chocolatey commands reference Chocolatey docs hello-strongbox-nuget-chocolatey","title":"Nuget + Chocolatey Example"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#nuget-and-chocolatey","text":"This is an example of how to use the Strongbox artifact repository manager with Chocolatey using Nuget.","title":"Nuget and Chocolatey"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#pre-requisites","text":"Before you proceed please make sure you have installed and configured a Strongbox Distribution .","title":"Pre-requisites"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#example-project","text":"The \"Hello, Strongbox!\" example project can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#installing-choco","text":"Windows Chocolatey is available natively on Windows and can be installed following the official documentation Mono If you are running Linux/MacOS and would like to use mono , there is no pre-built binary. You will need to head to the chocolatey repository for instructions on how to build it. Linux / MacOS / Docker We have already built a linux docker image with pre-built and configured choco which we are also using in our integration tests. It is published at strongboxci/alpine and you can feel free to use it for development purposes. It is OK to ignore warnings about a system reboot being requested since the nothing here is affected by it.","title":"Installing choco"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#configuring-choco","text":"","title":"Configuring Choco"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#get-api-key","text":"The NuGet protocol assumes that users need to be authenticated with API Key to be able to deploy or delete your packages. Strongbox provides the REST API to get an API Key for specified user: Windows 1 2 FOR /F %i IN ('curl -u admin http://localhost:48080/api/users/admin/generate-security-token') DO set API_KEY=%i echo %API_KEY% Linux 1 2 API_KEY=`curl -u admin http://localhost:48080/api/users/admin/generate-security-token` echo $API_KEY Enter your Strongbox password. (Default is: admin/password ) The output when echo ing the %API_KEY% should not be empty and should look something like this: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdHJvbmdib3giLCJqdGkiOiJtU3N0TGVOMGpabzJNcmdleGdWSUVRIiwic3ViIjoiYWRtaW4iLCJzZWN1cml0eS10b2tlbi1rZXkiOiJhZG1pbi1zZWNyAMQifQ.SgpKb4yUidK8ATbGxDOfjGjHfEF22PIFyzlpk-Rpad0","title":"Get API key"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#save-api-key-in-choco","text":"In this step, we will be setting the apikey which will be used to authenticate against the source in the future steps. Windows 1 2 3 # This needs to be run in an administrative command prompt or powershell! set REPO_URL=http://localhost:48080/storages/storage-nuget/nuget-releases choco apikey -k %API_KEY% -s \"%REPO_URL%\" Linux 1 2 REPO_URL=http://localhost:48080/storages/storage-nuget/nuget-releases choco apikey -k $API_KEY -s \"$REPO_URL\" The output should be like follows: Chocolatey v.10.15 Added ApiKey for http://localhost:48080/storages/storage-nuget/nuget-releases","title":"Save API key in choco"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#add-strongbox-repository-to-chocolatey-package-sources","text":"To manage packages, you'll need to configure Chocolatey to access your storages by running the following command: Windows 1 2 # This needs to be run as administrative command prompt or powershell! choco source add -n=strongbox -s \"%REPO_URL%\" --priority=1 Linux 1 choco source add -n=strongbox -s \"$REPO_URL\" --priority=1 The output should be like follows: Chocolatey v0.10.15 Added strongbox - http://localhost:48080/storages/storage-nuget/nuget-releases (Priority 1) Important notes You cannot deploy to group repositories, as they are only for resolving artifacts. Also, please note that the nuget-public group includes the nuget.org repository itself You can only deploy to hosted repositories. The deploy URLs would begin with /storages/{storageId}/{repositoryId} (i.e. /storages/storage-nuget/nuget-releases , nuget-snapshot , etc)","title":"Add Strongbox repository to Chocolatey package sources"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#how-to","text":"","title":"How to"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#create-a-package","text":"The command below will create a folder named hello-chocolatey with some files including a .nuspec and a folder called tools . Windows 1 2 cd C:\\some\\path choco new --name=hello-chocolatey --version=1.0.0 Linux 1 2 cd /some/path choco new --name=hello-chocolatey --version=1.0.0 Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Creating a new package specification at C:\\Users\\User\\Documents\\hello-chocolatey Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\hello-chocolatey.nuspec' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\chocolateyinstall.ps1' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\chocolateybeforemodify.ps1' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\chocolateyuninstall.ps1' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\LICENSE.txt' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\tools\\VERIFICATION.txt' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\ReadMe.md' Generating template to a file at 'C:\\Users\\User\\Documents\\hello-chocolatey\\_TODO.txt' Successfully generated hello-chocolatey package specification files at 'C:\\Users\\User\\Documents\\hello-chocolatey'","title":"Create a package"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#additional-instructions","text":"Delete _TODO.txt and ReadMe.md in the hello-chocolatey directory. Delete chocolateybeforemodify.ps1 and chocolateyuninstall.ps1 in the tools sub-directory. The LICENSE.txt and VERIFICATION.txt can also be deleted, although this is not required. Edit chocolateyinstall.ps1 in the tools sub-directory with a text editor and replace the entire content with Write-Output 'Package would install here' . If you are running on a Linux file system, edit hello-chocolatey.nuspec and replace \"tools\\**\" with \"tools/**\" (backwards to forwards slash) in the file section. It should be the forth row from the bottom. You can also check against the example files located in the strongbox-examples repository.","title":"Additional instructions"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#make-chocolatey-nuget-package","text":"Execute the following command in the same directory as hello-chocolatey.nuspec : Windows 1 2 cd C:\\some\\path\\hello-chocolatey choco pack Linux 1 2 cd /some/path/to/hello-chocolatey choco pack Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Attempting to build package from 'hello-chocolatey.nuspec'. Successfully created package 'C:\\Users\\User\\Documents\\hello-chocolatey\\hello-chocolatey.1.0.0.nupkg'","title":"Make Chocolatey NuGet package"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#push-nuget-package-into-strongbox-repository","text":"Execute the following command in the directory with hello-chocolatey.1.0.0.nupkg : Windows 1 2 cd C:\\some\\path\\hello-chocolatey choco push --source \"%REPO_URL%\" --force Linux 1 2 cd /some/path/to/hello-chocolatey choco push --source \"$REPO_URL\" --force Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Attempting to push hello-chocolatey.1.0.0.nupkg to http://localhost:48080/storages/storage-nuget/nuget-releases hello-chocolatey 1.0.0 was pushed successfully to http://localhost:48080/storages/storage-nuget/nuget-releases","title":"Push NuGet package into Strongbox repository"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#search-for-packages-in-strongbox-repositories","text":"Execute the following command: Windows 1 choco search -s \"%REPO_URL%\" Linux 1 choco search -s \"$REPO_URL\" Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). hello-chocolatey 1.0.0 1 packages found.","title":"Search for packages in Strongbox repositories"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#delete-a-chocolatey-package-from-strongbox","text":"Chocolatey does not have a built in way to delete packages from the server. As a workaround, you can use nuget to delete packages, see hello-strongbox-nuget-visual-studio for more details.","title":"Delete a Chocolatey package from strongbox"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#install-a-package","text":"To install a choco package you should use the command below. Windows 1 2 # Execute the following command as a administrator! choco install hello-chocolatey -s \"%REPO_URL%\" Linux 1 choco install hello-chocolatey -s \"$REPO_URL\" Tip Adding -s \"{repo_url}\" is optional. However, choco will loop through all sources until it finds the package which might be time consuming so you might want to force choco using the right source. Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Installing the following packages: hello-chocolatey.1.0.0.nupkg By installing you accept licenses for the packages. hello-chocolatey v1.0.0 hello-chocolatey package files install completed. Performing other installation steps. Package would install here The install of hello-chocolatey was successful. Software install location not explicitly set, could be in package or default install location if installer. Chocolatey installed 1/1 packages. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).","title":"Install a package"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#uninstall-a-package","text":"Windows 1 2 # Execute the following command as a administrator! choco uninstall hello-chocolatey Linux 1 choco uninstall hello-chocolatey Example output Chocolatey <version> 2 validations performed. 1 success(es), 0 warning(s), and 0 error(s). Uninstalling the following packages: hello-chocolatey hello-chocolatey v1.0.0 Skipping auto uninstaller - No registry snapshot. hello-chocolatey has been successfully uninstalled. Chocolatey uninstalled 1/1 packages. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).","title":"Uninstall a package"},{"location":"user-guide/tool-integration/nuget-chocolatey-example.html#see-also","text":"Chocolatey commands reference Chocolatey docs hello-strongbox-nuget-chocolatey","title":"See also"},{"location":"user-guide/tool-integration/nuget-mono-example.html","text":"Nuget using Mono \u00b6 This is an example of how to use the Strongbox artifact repository manager with NuGet. Pre-requisites \u00b6 Linux OS Mono cli environment nuget.exe Microsoft.Build.dll if running Mono pre version 3 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x If using alias nuget=\"mono /usr/local/bin/nuget.exe\" then mono --runtime=v4.0 nuget.exe can be replaced with nuget in commands below. Example project \u00b6 The \"Hello, Strongbox!\" example project can be found here . Prepare project workspace \u00b6 Go to the root project folder and execute the following commands: $ mkdir -p ./bin $ mkdir -p ./.nuget $ echo '<?xml version=\"1.0\" encoding=\"utf-8\"?><configuration></configuration>' > ./.nuget/NuGet.config There should be no output if success Note Note that bin and .nuget folders must be added to ignore list of your VCS Create NuGet configuration \u00b6 Add default push repository URL \u00b6 $ mono --runtime=v4.0 nuget.exe config -set DefaultPushSource={repositoryUrl} -ConfigFile ./.nuget/NuGet.config Example below ( there should be no output if success ): localhsot:/strongbox-examples/hello-strongbox-nuget-mono$ mono --runtime=v4.0 nuget.exe config -set DefaultPushSource=http://localhost:48080/storages/storage-nuget/nuget-releases -ConfigFile ./.nuget/NuGet.config Get api key to use with your repository \u00b6 NuGet protocol assumes that users need to be authenticated with API Key to be able to deploy or delete your packages. Strongbox provides the REST API to get an API Key for specified user, you can use curl for this like follows: $ curl -X GET --user admin:password http://localhost:48080/api/users/admin/generate-security-token eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdHJvbmdib3giLCJqdGkiOiJCdU85OU8xV2VzQ1NkYWcyT3k0eHh3Iiwic3ViIjoiYWRtaW4iLCJzZWN1cml0eS10b2tlbi1rZXkiOiJhZG1pbi1zZWNyZXQifQ.Yzq5zYlDZVCVSxRmSgclRCHW_KojZw-iFGfkWWnTTEw Set api key to use with your repository \u00b6 $ mono --runtime=v4.0 nuget.exe setApiKey {apiKey} -Source {repositoryUrl} -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe setApiKey bXktYXBpLWtleQ== -Source http://localhost:48080/storages/storage-nuget/nuget-releases -ConfigFile ./.nuget/NuGet.config The API Key 'bXktYXBpLWtleQ==' was saved for 'http://localhost:48080/storages/storage-nuget/nuget-releases'. Provide storage authentication (if needed) \u00b6 Strongbox is using HTTP Basic Authentication to access storages by default, so you need to configure your credentials in the <packageSourceCredentials> section of your NuGet.config file. Finally, your NuGet.config file should look like follows: $ cat .nuget/NuGet.config <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <config> <add key=\"DefaultPushSource\" value=\"http://localhost:48080/storages/storage-nuget/nuget-releases\" /> </config> <apikeys> <add key=\"http://localhost:48080/storages/nuget-common-storage/nuget-releases\" value=\"YpDSPr0yOqTjEPuaG6+aTOV6QJWI0X4MliV/yARLTZXb4cb55LaZF8jOhWvg+Zqnkn8ykhHtj3byEwKL60GWbsaeZZJdPHeP4OgFftPSmGkJSovyMRh1bbATPi6hx6eRpquP8daWKhfAvca0RjnPA22s3KtcdDlI3dV6IQzTLOfANkdmyhH95A+LHc51BXQKVWQPJ6B94TEBonEqWIt2bNti66Pd4sbDvKZJAA1GRjDprFxukg4EUz8YD++JYWP6X+BNCu2jYNXBS6tbw6Zx1o9HwOd/9eUC+1lP9Sbvj4tGSB/D5MwKhNabKwElhjikDNg5TaI4Il6R3sw9zJXyDdsGIfpKg4ICwBt6suuqEOQZQIWJKum3NuFYOocke6BsHpHC2Iz/hMkCjQz3v8DNaKLU+9pr6qOOaEsfyJCkj313AWxigkHqKcFMlJPfhGcUjZX6wq1vmPMO2erYBiE89IFCdAadBWpB2J6s79YoWwb5Elvf7SiLlU6lDEq9D8mOQLTeWrEkoD3S9h/CiV2qug==\" /> </apikeys> <packageSources> <add key=\"strongbox\" value=\"http://localhost:48080/storages/storage-nuget/nuget-releases\" /> </packageSources> <packageSourceCredentials> <strongbox> <add key=\"Username\" value=\"admin\" /> <add key=\"ClearTextPassword\" value=\"password\" /> </strongbox> </packageSourceCredentials> </configuration> How to build \u00b6 Execute the following command: $ mcs -t:library -out:./bin/HelloWorld.dll ./src/HelloWorld.cs This will build the code and make a dll library. How to make NuGet package \u00b6 Execute the following command: $ mono --runtime=v4.0 nuget.exe pack ./Hello.Strongbox.Nuget.Mono.nuspec Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe pack ./Hello.Strongbox.Nuget.Mono.nuspec Attempting to build package from 'Hello.Strongbox.Nuget.Mono.nuspec'. Successfully created package '/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono/Org.Carlspring.Strongbox.Examples.Nuget.Mono.1.0.nupkg'. How to push NuGet package into Strongbox repository \u00b6 Execute the following command: $ mono --runtime=v4.0 nuget.exe push ./Org.Carlspring.Strongbox.Examples.Nuget.Mono.1.0.0.nupkg -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe push ./Org.Carlspring.Strongbox.Examples.Nuget.Mono.1.0.nupkg -ConfigFile ./.nuget/NuGet.config Pushing Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.0 to 'http://localhost:48080/storages/storage-nuget/nuget-releases'... Your package was pushed. How to search for NuGet packages in Strongbox repositories \u00b6 Execute the following command: $ mono --runtime=v4.0 nuget.exe list Org.Carlspring -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe list Org.Carlspring -ConfigFile ./.nuget/NuGet.config Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.0 How to delete a NuGet package \u00b6 Execute the following command: $ mono --runtime=v4.0 nuget.exe delete Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 -Source strongbox -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget-4_1_0.exe delete Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 -Source strongbox -ConfigFile ./.nuget/NuGet.config Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 will be deleted from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. Would you like to continue? (y/N) y WARNING: Deleting Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. DELETE http://localhost:48080/storages/storage-nuget/nuget-releases/Org.Carlspring.Strongbox.Examples.Nuget.Mono/1.0.1 OK http://localhost:48080/storages/storage-nuget/nuget-releases/Org.Carlspring.Strongbox.Examples.Nuget.Mono/1.0.1 7277ms Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 was deleted successfully. See also: \u00b6 Install Mono on Linux NuGet CLI Reference Running NuGet command-line on Linux Nuget: Dependency Resolution In Nuget 3.x","title":"Nuget + Mono Example"},{"location":"user-guide/tool-integration/nuget-mono-example.html#nuget-using-mono","text":"This is an example of how to use the Strongbox artifact repository manager with NuGet.","title":"Nuget using Mono"},{"location":"user-guide/tool-integration/nuget-mono-example.html#pre-requisites","text":"Linux OS Mono cli environment nuget.exe Microsoft.Build.dll if running Mono pre version 3 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x If using alias nuget=\"mono /usr/local/bin/nuget.exe\" then mono --runtime=v4.0 nuget.exe can be replaced with nuget in commands below.","title":"Pre-requisites"},{"location":"user-guide/tool-integration/nuget-mono-example.html#example-project","text":"The \"Hello, Strongbox!\" example project can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/nuget-mono-example.html#prepare-project-workspace","text":"Go to the root project folder and execute the following commands: $ mkdir -p ./bin $ mkdir -p ./.nuget $ echo '<?xml version=\"1.0\" encoding=\"utf-8\"?><configuration></configuration>' > ./.nuget/NuGet.config There should be no output if success Note Note that bin and .nuget folders must be added to ignore list of your VCS","title":"Prepare project workspace"},{"location":"user-guide/tool-integration/nuget-mono-example.html#create-nuget-configuration","text":"","title":"Create NuGet configuration"},{"location":"user-guide/tool-integration/nuget-mono-example.html#add-default-push-repository-url","text":"$ mono --runtime=v4.0 nuget.exe config -set DefaultPushSource={repositoryUrl} -ConfigFile ./.nuget/NuGet.config Example below ( there should be no output if success ): localhsot:/strongbox-examples/hello-strongbox-nuget-mono$ mono --runtime=v4.0 nuget.exe config -set DefaultPushSource=http://localhost:48080/storages/storage-nuget/nuget-releases -ConfigFile ./.nuget/NuGet.config","title":"Add default push repository URL"},{"location":"user-guide/tool-integration/nuget-mono-example.html#get-api-key-to-use-with-your-repository","text":"NuGet protocol assumes that users need to be authenticated with API Key to be able to deploy or delete your packages. Strongbox provides the REST API to get an API Key for specified user, you can use curl for this like follows: $ curl -X GET --user admin:password http://localhost:48080/api/users/admin/generate-security-token eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdHJvbmdib3giLCJqdGkiOiJCdU85OU8xV2VzQ1NkYWcyT3k0eHh3Iiwic3ViIjoiYWRtaW4iLCJzZWN1cml0eS10b2tlbi1rZXkiOiJhZG1pbi1zZWNyZXQifQ.Yzq5zYlDZVCVSxRmSgclRCHW_KojZw-iFGfkWWnTTEw","title":"Get api key to use with your repository"},{"location":"user-guide/tool-integration/nuget-mono-example.html#set-api-key-to-use-with-your-repository","text":"$ mono --runtime=v4.0 nuget.exe setApiKey {apiKey} -Source {repositoryUrl} -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe setApiKey bXktYXBpLWtleQ== -Source http://localhost:48080/storages/storage-nuget/nuget-releases -ConfigFile ./.nuget/NuGet.config The API Key 'bXktYXBpLWtleQ==' was saved for 'http://localhost:48080/storages/storage-nuget/nuget-releases'.","title":"Set api key to use with your repository"},{"location":"user-guide/tool-integration/nuget-mono-example.html#provide-storage-authentication-if-needed","text":"Strongbox is using HTTP Basic Authentication to access storages by default, so you need to configure your credentials in the <packageSourceCredentials> section of your NuGet.config file. Finally, your NuGet.config file should look like follows: $ cat .nuget/NuGet.config <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <config> <add key=\"DefaultPushSource\" value=\"http://localhost:48080/storages/storage-nuget/nuget-releases\" /> </config> <apikeys> <add key=\"http://localhost:48080/storages/nuget-common-storage/nuget-releases\" value=\"YpDSPr0yOqTjEPuaG6+aTOV6QJWI0X4MliV/yARLTZXb4cb55LaZF8jOhWvg+Zqnkn8ykhHtj3byEwKL60GWbsaeZZJdPHeP4OgFftPSmGkJSovyMRh1bbATPi6hx6eRpquP8daWKhfAvca0RjnPA22s3KtcdDlI3dV6IQzTLOfANkdmyhH95A+LHc51BXQKVWQPJ6B94TEBonEqWIt2bNti66Pd4sbDvKZJAA1GRjDprFxukg4EUz8YD++JYWP6X+BNCu2jYNXBS6tbw6Zx1o9HwOd/9eUC+1lP9Sbvj4tGSB/D5MwKhNabKwElhjikDNg5TaI4Il6R3sw9zJXyDdsGIfpKg4ICwBt6suuqEOQZQIWJKum3NuFYOocke6BsHpHC2Iz/hMkCjQz3v8DNaKLU+9pr6qOOaEsfyJCkj313AWxigkHqKcFMlJPfhGcUjZX6wq1vmPMO2erYBiE89IFCdAadBWpB2J6s79YoWwb5Elvf7SiLlU6lDEq9D8mOQLTeWrEkoD3S9h/CiV2qug==\" /> </apikeys> <packageSources> <add key=\"strongbox\" value=\"http://localhost:48080/storages/storage-nuget/nuget-releases\" /> </packageSources> <packageSourceCredentials> <strongbox> <add key=\"Username\" value=\"admin\" /> <add key=\"ClearTextPassword\" value=\"password\" /> </strongbox> </packageSourceCredentials> </configuration>","title":"Provide storage authentication (if needed)"},{"location":"user-guide/tool-integration/nuget-mono-example.html#how-to-build","text":"Execute the following command: $ mcs -t:library -out:./bin/HelloWorld.dll ./src/HelloWorld.cs This will build the code and make a dll library.","title":"How to build"},{"location":"user-guide/tool-integration/nuget-mono-example.html#how-to-make-nuget-package","text":"Execute the following command: $ mono --runtime=v4.0 nuget.exe pack ./Hello.Strongbox.Nuget.Mono.nuspec Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe pack ./Hello.Strongbox.Nuget.Mono.nuspec Attempting to build package from 'Hello.Strongbox.Nuget.Mono.nuspec'. Successfully created package '/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono/Org.Carlspring.Strongbox.Examples.Nuget.Mono.1.0.nupkg'.","title":"How to make NuGet package"},{"location":"user-guide/tool-integration/nuget-mono-example.html#how-to-push-nuget-package-into-strongbox-repository","text":"Execute the following command: $ mono --runtime=v4.0 nuget.exe push ./Org.Carlspring.Strongbox.Examples.Nuget.Mono.1.0.0.nupkg -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe push ./Org.Carlspring.Strongbox.Examples.Nuget.Mono.1.0.nupkg -ConfigFile ./.nuget/NuGet.config Pushing Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.0 to 'http://localhost:48080/storages/storage-nuget/nuget-releases'... Your package was pushed.","title":"How to push NuGet package into Strongbox repository"},{"location":"user-guide/tool-integration/nuget-mono-example.html#how-to-search-for-nuget-packages-in-strongbox-repositories","text":"Execute the following command: $ mono --runtime=v4.0 nuget.exe list Org.Carlspring -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget.exe list Org.Carlspring -ConfigFile ./.nuget/NuGet.config Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.0","title":"How to search for NuGet packages in Strongbox repositories"},{"location":"user-guide/tool-integration/nuget-mono-example.html#how-to-delete-a-nuget-package","text":"Execute the following command: $ mono --runtime=v4.0 nuget.exe delete Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 -Source strongbox -ConfigFile ./.nuget/NuGet.config Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-nuget-mono> mono --runtime=v4.0 nuget-4_1_0.exe delete Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 -Source strongbox -ConfigFile ./.nuget/NuGet.config Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 will be deleted from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. Would you like to continue? (y/N) y WARNING: Deleting Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. DELETE http://localhost:48080/storages/storage-nuget/nuget-releases/Org.Carlspring.Strongbox.Examples.Nuget.Mono/1.0.1 OK http://localhost:48080/storages/storage-nuget/nuget-releases/Org.Carlspring.Strongbox.Examples.Nuget.Mono/1.0.1 7277ms Org.Carlspring.Strongbox.Examples.Nuget.Mono 1.0.1 was deleted successfully.","title":"How to delete a NuGet package"},{"location":"user-guide/tool-integration/nuget-mono-example.html#see-also","text":"Install Mono on Linux NuGet CLI Reference Running NuGet command-line on Linux Nuget: Dependency Resolution In Nuget 3.x","title":"See also:"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html","text":"Nuget using Visual Studio \u00b6 This is an example of how to use the Strongbox artifact repository manager with NuGet. Pre-requisites \u00b6 Windows nuget.exe Visual Studio Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Example project \u00b6 The \"Hello, Strongbox!\" sample application for this can be found here . Create NuGet configuration \u00b6 Append the -Source option to your NuGet.exe commands to access your storages in Strongbox: nuget <command> -Source http://localhost:48080/storages/storage-nuget/nuget-releases Add your repository to NuGet package sources \u00b6 To manage packages, you'll need to configure NuGet to access your storages by performing following steps: In Visual Studio Go to Tools \u2192 Nuget Package Manager \u2192 Package Manager Settings Select Package Sources in the navigation menu To add a source, select +, edit the name, enter the URL or path in the Source control, and select Update. The source now appears in the selector drop-down. The nuget-public group repository should be at the top of the list. You cannot deploy to group repositories, as they are only for resolving artifacts. Also, please note that the nuget-public group includes the nuget.org repository itself The URL when deploying artifacts is the one for the hosted repository ( nuget-releases , nuget-snapshot , etc) Get api key to use with your repository \u00b6 The NuGet protocol assumes that users need to be authenticated with API Key to be able to deploy or delete your packages. Strongbox provides the REST API to get an API Key for specified user, you can use a browser for this like follows: http://localhost:48080/api/users/admin/generate-security-token Enter your Strongbox credentials. (Default: admin:password) The output should be like follows: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdHJvbmdib3giLCJqdGkiOiJtU3N0TGVOMGpabzJNcmdleGdWSUVRIiwic3ViIjoiYWRtaW4iLCJzZWN1cml0eS10b2tlbi1rZXkiOiJhZG1pbi1zZWNyAMQifQ.SgpKb4yUidK8ATbGxDOfjGjHfEF22PIFyzlpk-Rpad0 Set api key to use with your repository \u00b6 nuget setApiKey { apiKey } -Source { repositoryUrl } The output should be like follows: nuget.exe setApiKey eyJhbGciOiJIUzI1NiJ9. -Source http://localhost:48080/storages/storage-nuget/nuget-releases The API Key 'eyJhbGciOiJIUzI1NiJ9.' was saved for 'http://localhost:48080/storages/storage-nuget/nuget-releases' . How to build NuGet package \u00b6 Create a class library project in Visual Studio. Add dependencies to your package from other NuGet repositories. In Solution Explorer, right-click either References or a project and select Manage NuGet Packages. In the browse tab search for log4net and install stable version. Right-click on the resulting project file and select Build to make sure the project was created properly. The DLL is found within the Debug folder (or Release if you build that configuration instead). Open a command prompt and navigate to the folder containing your solution(.sln) file nuget spec This will create the Package.nuspec XML file. The manifest looks something like the code below, where tokens in the form (such as id id ) are to be replaced during the packaging process with values from the project's Properties/AssemblyInfo.cs file. <?xml version=\"1.0\"?> <package > <metadata> <id> Package </id> <version> 1.0.2 </version> <authors> gokhan.kuyucak </authors> <owners> gokhan.kuyucak </owners> <licenseUrl> http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE </licenseUrl> <projectUrl> http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE </projectUrl> <iconUrl> http://ICON_URL_HERE_OR_DELETE_THIS_LINE </iconUrl> <requireLicenseAcceptance> false </requireLicenseAcceptance> <description> An example to generate package and publish with strongbox </description> <releaseNotes> Summary of changes made in this release of the package. </releaseNotes> <copyright> Copyright 2018 </copyright> <tags> Tag1 Tag2 </tags> <dependencies> <dependency id= \"SampleDependency\" version= \"1.0\" /> </dependencies> </metadata> </package> You can edit the Package.nuspec file in text editor. Remember that authors and description entities are mandatory. How to make NuGet package \u00b6 Execute the following command: nuget pack ./hello-strongbox-nuget-visual-studio/hello-strongbox-nuget-visual-studio.csproj Example output Attempting to build package from 'hello-strongbox-nuget-visual-studio.csproj'. MSBuild auto-detection: using msbuild version '15.5.180.51428' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\bin'. Packing files from 'hello-strongbox-nuget-visual-studio\\hello-strongbox-nuget-visual-studio\\bin\\Release'. WARNING: Description was not specified. Using 'Description'. WARNING: Author was not specified. Using 'gokhan.kuyucak'. Successfully created package 'hello-strongbox-nuget-visual-studio.1.0.0.nupkg'. How to push NuGet package into Strongbox \u00b6 Execute the following command: nuget push hello-strongbox-nuget-visual-studio.1.0.0.nupkg -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output Pushing hello-strongbox-nuget-visual-studio.1.0.0.nupkg to 'http://localhost:48080/storages/storage-nuget/nuget-releases'... PUT http://localhost:48080/storages/storage-nuget/nuget-releases Created http://localhost:48080/storages/storage-nuget/nuget-releases 3153ms Your package was pushed. How to search for NuGet packages in Strongbox \u00b6 To list the current versions for your packages, execute the following command: nuget.exe list -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output HelloNuget 1.0.2 NoSleep 1.0.0 NugetWorld.Hello 1.0.0 hello-strongbox-nuget-visual-studio 1.0.0 To search a keyword in repository, execute the following command: nuget.exe list strongbox -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output hello-strongbox-nuget-visual-studio 1.0.0 For example, you can look up log4net like this: How to delete a NuGet package \u00b6 Execute the following command: nuget.exe delete NugetWorld.Hello 1 .0.0 -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output NugetWorld.Hello 1.0.0 will be deleted from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. Would you like to continue? (y/N) y WARNING: Deleting NugetWorld.Hello 1.0.0 from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. DELETE http://localhost:48080/storages/storage-nuget/nuget-releases/NugetWorld.Hello/1.0.0 OK http://localhost:48080/storages/storage-nuget/nuget-releases/NugetWorld.Hello/1.0.0 536ms NugetWorld.Hello 1.0.0 was deleted successfully. How to install a NuGet package with Visual Studio Nuget Manager \u00b6 Open your project in Visual Studio and in Solution Explorer, right-click either References or a project and select Manage NuGet Packages. You should switch to StrongBox repository in the source tab and search for the package you have built in the previous steps. Search for the NuGet package, select and install the version that is available. You can also check if all dependencies you packaged in How to make NuGet package section have been installed. How to install a NuGet package with Package Manager Console \u00b6 The NuGet Package Manager Console is built into Visual Studio. To find and install a package, you should execute following commands: Open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command. Switch to Strongbox repository in Package Source tab. To find a package execute Find-Package hello-strongbox-nuget-visual-studio Example output | Id | Versions | Description | |-------------------------------------|----------|-------------| | hello-strongbox-nuget-visual-studio | {1.0.0} | Description | | | | | Time Elapsed: 00:00:01.3270740 To install the package execute Example output Attempting to gather dependency information for package 'hello-strongbox-nuget-visual-studio.1.0.0' with respect to project 'hello-strongbox-nuget-visual-studio', targeting '.NETFramework,Version=v4.6.1' Gathering dependency information took 614,18 ms Attempting to resolve dependencies for package 'hello-strongbox-nuget-visual-studio.1.0.0' with DependencyBehavior 'Lowest' Resolving dependency information took 0 ms Resolving actions to install package 'hello-strongbox-nuget-visual-studio.1.0.0' Resolved actions to install package 'hello-strongbox-nuget-visual-studio.1.0.0' Retrieving package 'hello-strongbox-nuget-visual-studio 1.0.0' from 'Strongbox Packages'. GET http://localhost:48080/storages/storage-nuget/nuget-releases/download/hello-strongbox-nuget-visual-studio/1.0.0 OK http://localhost:48080/storages/storage-nuget/nuget-releases/download/hello-strongbox-nuget-visual-studio/1.0.0 195ms Installing hello-strongbox-nuget-visual-studio 1.0.0. Adding package 'hello-strongbox-nuget-visual-studio.1.0.0' to folder 'hello-strongbox-nuget-visual-studio\\packages' Added package 'hello-strongbox-nuget-visual-studio.1.0.0' to folder 'hello-strongbox-nuget-visual-studio\\packages' Added package 'hello-strongbox-nuget-visual-studio.1.0.0' to 'packages.config' Successfully installed 'hello-strongbox-nuget-visual-studio 1.0.0' to hello-strongbox-nuget-visual-studio Executing nuget actions took 837,38 ms Time Elapsed: 00:00:02.4972295 See also: \u00b6 Strongbox NuGet Mono Example NuGet Package Manager UI NuGet CLI Reference Package Manager Console Nuget: Dependency Resolution In Nuget 3.x","title":"Nuget + Visual Studio Example"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#nuget-using-visual-studio","text":"This is an example of how to use the Strongbox artifact repository manager with NuGet.","title":"Nuget using Visual Studio"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#pre-requisites","text":"Windows nuget.exe Visual Studio Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x","title":"Pre-requisites"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#example-project","text":"The \"Hello, Strongbox!\" sample application for this can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#create-nuget-configuration","text":"Append the -Source option to your NuGet.exe commands to access your storages in Strongbox: nuget <command> -Source http://localhost:48080/storages/storage-nuget/nuget-releases","title":"Create NuGet configuration"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#add-your-repository-to-nuget-package-sources","text":"To manage packages, you'll need to configure NuGet to access your storages by performing following steps: In Visual Studio Go to Tools \u2192 Nuget Package Manager \u2192 Package Manager Settings Select Package Sources in the navigation menu To add a source, select +, edit the name, enter the URL or path in the Source control, and select Update. The source now appears in the selector drop-down. The nuget-public group repository should be at the top of the list. You cannot deploy to group repositories, as they are only for resolving artifacts. Also, please note that the nuget-public group includes the nuget.org repository itself The URL when deploying artifacts is the one for the hosted repository ( nuget-releases , nuget-snapshot , etc)","title":"Add your repository to NuGet package sources"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#get-api-key-to-use-with-your-repository","text":"The NuGet protocol assumes that users need to be authenticated with API Key to be able to deploy or delete your packages. Strongbox provides the REST API to get an API Key for specified user, you can use a browser for this like follows: http://localhost:48080/api/users/admin/generate-security-token Enter your Strongbox credentials. (Default: admin:password) The output should be like follows: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdHJvbmdib3giLCJqdGkiOiJtU3N0TGVOMGpabzJNcmdleGdWSUVRIiwic3ViIjoiYWRtaW4iLCJzZWN1cml0eS10b2tlbi1rZXkiOiJhZG1pbi1zZWNyAMQifQ.SgpKb4yUidK8ATbGxDOfjGjHfEF22PIFyzlpk-Rpad0","title":"Get api key to use with your repository"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#set-api-key-to-use-with-your-repository","text":"nuget setApiKey { apiKey } -Source { repositoryUrl } The output should be like follows: nuget.exe setApiKey eyJhbGciOiJIUzI1NiJ9. -Source http://localhost:48080/storages/storage-nuget/nuget-releases The API Key 'eyJhbGciOiJIUzI1NiJ9.' was saved for 'http://localhost:48080/storages/storage-nuget/nuget-releases' .","title":"Set api key to use with your repository"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-build-nuget-package","text":"Create a class library project in Visual Studio. Add dependencies to your package from other NuGet repositories. In Solution Explorer, right-click either References or a project and select Manage NuGet Packages. In the browse tab search for log4net and install stable version. Right-click on the resulting project file and select Build to make sure the project was created properly. The DLL is found within the Debug folder (or Release if you build that configuration instead). Open a command prompt and navigate to the folder containing your solution(.sln) file nuget spec This will create the Package.nuspec XML file. The manifest looks something like the code below, where tokens in the form (such as id id ) are to be replaced during the packaging process with values from the project's Properties/AssemblyInfo.cs file. <?xml version=\"1.0\"?> <package > <metadata> <id> Package </id> <version> 1.0.2 </version> <authors> gokhan.kuyucak </authors> <owners> gokhan.kuyucak </owners> <licenseUrl> http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE </licenseUrl> <projectUrl> http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE </projectUrl> <iconUrl> http://ICON_URL_HERE_OR_DELETE_THIS_LINE </iconUrl> <requireLicenseAcceptance> false </requireLicenseAcceptance> <description> An example to generate package and publish with strongbox </description> <releaseNotes> Summary of changes made in this release of the package. </releaseNotes> <copyright> Copyright 2018 </copyright> <tags> Tag1 Tag2 </tags> <dependencies> <dependency id= \"SampleDependency\" version= \"1.0\" /> </dependencies> </metadata> </package> You can edit the Package.nuspec file in text editor. Remember that authors and description entities are mandatory.","title":"How to build NuGet package"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-make-nuget-package","text":"Execute the following command: nuget pack ./hello-strongbox-nuget-visual-studio/hello-strongbox-nuget-visual-studio.csproj Example output Attempting to build package from 'hello-strongbox-nuget-visual-studio.csproj'. MSBuild auto-detection: using msbuild version '15.5.180.51428' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\bin'. Packing files from 'hello-strongbox-nuget-visual-studio\\hello-strongbox-nuget-visual-studio\\bin\\Release'. WARNING: Description was not specified. Using 'Description'. WARNING: Author was not specified. Using 'gokhan.kuyucak'. Successfully created package 'hello-strongbox-nuget-visual-studio.1.0.0.nupkg'.","title":"How to make NuGet package"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-push-nuget-package-into-strongbox","text":"Execute the following command: nuget push hello-strongbox-nuget-visual-studio.1.0.0.nupkg -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output Pushing hello-strongbox-nuget-visual-studio.1.0.0.nupkg to 'http://localhost:48080/storages/storage-nuget/nuget-releases'... PUT http://localhost:48080/storages/storage-nuget/nuget-releases Created http://localhost:48080/storages/storage-nuget/nuget-releases 3153ms Your package was pushed.","title":"How to push NuGet package into Strongbox"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-search-for-nuget-packages-in-strongbox","text":"To list the current versions for your packages, execute the following command: nuget.exe list -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output HelloNuget 1.0.2 NoSleep 1.0.0 NugetWorld.Hello 1.0.0 hello-strongbox-nuget-visual-studio 1.0.0 To search a keyword in repository, execute the following command: nuget.exe list strongbox -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output hello-strongbox-nuget-visual-studio 1.0.0 For example, you can look up log4net like this:","title":"How to search for NuGet packages in Strongbox"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-delete-a-nuget-package","text":"Execute the following command: nuget.exe delete NugetWorld.Hello 1 .0.0 -Source http://localhost:48080/storages/storage-nuget/nuget-releases Example output NugetWorld.Hello 1.0.0 will be deleted from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. Would you like to continue? (y/N) y WARNING: Deleting NugetWorld.Hello 1.0.0 from the 'http://localhost:48080/storages/storage-nuget/nuget-releases'. DELETE http://localhost:48080/storages/storage-nuget/nuget-releases/NugetWorld.Hello/1.0.0 OK http://localhost:48080/storages/storage-nuget/nuget-releases/NugetWorld.Hello/1.0.0 536ms NugetWorld.Hello 1.0.0 was deleted successfully.","title":"How to delete a NuGet package"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-install-a-nuget-package-with-visual-studio-nuget-manager","text":"Open your project in Visual Studio and in Solution Explorer, right-click either References or a project and select Manage NuGet Packages. You should switch to StrongBox repository in the source tab and search for the package you have built in the previous steps. Search for the NuGet package, select and install the version that is available. You can also check if all dependencies you packaged in How to make NuGet package section have been installed.","title":"How to install a NuGet package with Visual Studio Nuget Manager"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#how-to-install-a-nuget-package-with-package-manager-console","text":"The NuGet Package Manager Console is built into Visual Studio. To find and install a package, you should execute following commands: Open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command. Switch to Strongbox repository in Package Source tab. To find a package execute Find-Package hello-strongbox-nuget-visual-studio Example output | Id | Versions | Description | |-------------------------------------|----------|-------------| | hello-strongbox-nuget-visual-studio | {1.0.0} | Description | | | | | Time Elapsed: 00:00:01.3270740 To install the package execute Example output Attempting to gather dependency information for package 'hello-strongbox-nuget-visual-studio.1.0.0' with respect to project 'hello-strongbox-nuget-visual-studio', targeting '.NETFramework,Version=v4.6.1' Gathering dependency information took 614,18 ms Attempting to resolve dependencies for package 'hello-strongbox-nuget-visual-studio.1.0.0' with DependencyBehavior 'Lowest' Resolving dependency information took 0 ms Resolving actions to install package 'hello-strongbox-nuget-visual-studio.1.0.0' Resolved actions to install package 'hello-strongbox-nuget-visual-studio.1.0.0' Retrieving package 'hello-strongbox-nuget-visual-studio 1.0.0' from 'Strongbox Packages'. GET http://localhost:48080/storages/storage-nuget/nuget-releases/download/hello-strongbox-nuget-visual-studio/1.0.0 OK http://localhost:48080/storages/storage-nuget/nuget-releases/download/hello-strongbox-nuget-visual-studio/1.0.0 195ms Installing hello-strongbox-nuget-visual-studio 1.0.0. Adding package 'hello-strongbox-nuget-visual-studio.1.0.0' to folder 'hello-strongbox-nuget-visual-studio\\packages' Added package 'hello-strongbox-nuget-visual-studio.1.0.0' to folder 'hello-strongbox-nuget-visual-studio\\packages' Added package 'hello-strongbox-nuget-visual-studio.1.0.0' to 'packages.config' Successfully installed 'hello-strongbox-nuget-visual-studio 1.0.0' to hello-strongbox-nuget-visual-studio Executing nuget actions took 837,38 ms Time Elapsed: 00:00:02.4972295","title":"How to install a NuGet package with Package Manager Console"},{"location":"user-guide/tool-integration/nuget-visual-studio-example.html#see-also","text":"Strongbox NuGet Mono Example NuGet Package Manager UI NuGet CLI Reference Package Manager Console Nuget: Dependency Resolution In Nuget 3.x","title":"See also:"},{"location":"user-guide/tool-integration/pypi-example.html","text":"Pip / Twine \u00b6 This is an example of how to use the Strongbox artifact repository manager with twine and pip . Pre-requisites \u00b6 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Python version 3 or higher twine pip Example project \u00b6 The \"Hello, World!\" sample application for this can be found here . Configuration \u00b6 setup.py \u00b6 This file is the build script for setuptools . It tells setuptools about your package like its name, a description, the current version etc. The Strongbox PyPi Example contains sample setup.py file with pre-defined sample information. The setup.cfg file \u00b6 Used to define metadata information like description file name. The LICENCE file \u00b6 Used to define license details. For more details check the \"See also\" section below. How to build python package \u00b6 Execute the following commands within your project folder. This will build package: python3 setup.py sdist bdist_wheel Example output python3 setup.py sdist bdist_wheel running sdist running egg_info creating hello_world_pypi.egg-info writing hello_world_pypi.egg-info/PKG-INFO writing dependency_links to hello_world_pypi.egg-info/dependency_links.txt writing requirements to hello_world_pypi.egg-info/requires.txt writing top-level names to hello_world_pypi.egg-info/top_level.txt writing manifest file 'hello_world_pypi.egg-info/SOURCES.txt' reading manifest file 'hello_world_pypi.egg-info/SOURCES.txt' writing manifest file 'hello_world_pypi.egg-info/SOURCES.txt' running check creating hello-world-pypi-1.0.0 creating hello-world-pypi-1.0.0/hello-world-pypi creating hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying files to hello-world-pypi-1.0.0... copying README.md -> hello-world-pypi-1.0.0 copying setup.cfg -> hello-world-pypi-1.0.0 copying setup.py -> hello-world-pypi-1.0.0 copying hello-world-pypi/__init__.py -> hello-world-pypi-1.0.0/hello-world-pypi copying hello-world-pypi/helloworld.py -> hello-world-pypi-1.0.0/hello-world-pypi copying hello_world_pypi.egg-info/PKG-INFO -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/SOURCES.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/dependency_links.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/requires.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/top_level.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info Writing hello-world-pypi-1.0.0/setup.cfg creating dist Creating tar archive removing 'hello-world-pypi-1.0.0' (and everything under it) running bdist_wheel running build running build_py creating build creating build/lib creating build/lib/hello-world-pypi copying hello-world-pypi/__init__.py -> build/lib/hello-world-pypi copying hello-world-pypi/helloworld.py -> build/lib/hello-world-pypi installing to build/bdist.macosx-10.12-x86_64/wheel running install running install_lib creating build/bdist.macosx-10.12-x86_64 creating build/bdist.macosx-10.12-x86_64/wheel creating build/bdist.macosx-10.12-x86_64/wheel/hello-world-pypi copying build/lib/hello-world-pypi/__init__.py -> build/bdist.macosx-10.12-x86_64/wheel/hello-world-pypi copying build/lib/hello-world-pypi/helloworld.py -> build/bdist.macosx-10.12-x86_64/wheel/hello-world-pypi running install_egg_info Copying hello_world_pypi.egg-info to build/bdist.macosx-10.12-x86_64/wheel/hello_world_pypi-1.0.0-py3.7.egg-info running install_scripts adding license file \"LICENSE\" (matched pattern \"LICEN[CS]E*\") creating build/bdist.macosx-10.12-x86_64/wheel/hello_world_pypi-1.0.0.dist-info/WHEEL creating 'dist/hello_world_pypi-1.0.0-py3-none-any.whl' and adding 'build/bdist.macosx-10.12-x86_64/wheel' to it adding 'hello-world-pypi/__init__.py' adding 'hello-world-pypi/helloworld.py' adding 'hello_world_pypi-1.0.0.dist-info/LICENSE' adding 'hello_world_pypi-1.0.0.dist-info/METADATA' adding 'hello_world_pypi-1.0.0.dist-info/WHEEL' adding 'hello_world_pypi-1.0.0.dist-info/top_level.txt' adding 'hello_world_pypi-1.0.0.dist-info/RECORD' removing build/bdist.macosx-10.12-x86_64/wheel How to deploy python package \u00b6 This will deploy python package to Strongbox. python3 -m twine upload --username admin --password password --repository-url http://localhost:48080/storages/storage-pypi/pypi-releases dist/* --verbose Example output python3 -m twine upload --username admin --password password --repository-url http://localhost:48080/storages/storage-pypi/pypi-releases dist/* --verbose Uploading distributions to http://localhost:48080/storages/storage-pypi/pypi-releases Uploading hello_world_pypi-1.0.0-py3-none-any.whl 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9.69k/9.69k [00:07<00:00, 1.38kB/s] Uploading hello-world-pypi-1.0.0.tar.gz 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5.14k/5.14k [00:00<00:00, 7.30kB/s] How to install python package \u00b6 Execute the following to install python package: pip3 install --extra-index-url http://localhost:48080/storages/storage-pypi/pypi-releases hello-world-pypi Example output pip3 install --extra-index-url http://localhost:48080/storages/storage-pypi/pypi-releases hello-world-pypi Looking in indexes: https://pypi.org/simple, http://localhost:48080/storages/storage-pypi/pypi-releases Collecting hello-world-pypi Downloading http://localhost:48080/storages/storage-pypi/pypi-releases/packages/hello_world_pypi-1.0.0-py3-none-any.whl Processing /Users/ankit.tomar/Library/Caches/pip/wheels/95/70/6e/0f8362d968f0fef63006a07ba4158ac5d921fbcc664f976db3/pip_hello_world-0.1-cp37-none-any.whl Installing collected packages: pip-hello-world, hello-world-pypi Successfully installed hello-world-pypi-1.0.0 pip-hello-world-0.1 See also \u00b6 Python Packages User Guide How to upload python package","title":"PyPi Example"},{"location":"user-guide/tool-integration/pypi-example.html#pip-twine","text":"This is an example of how to use the Strongbox artifact repository manager with twine and pip .","title":"Pip / Twine"},{"location":"user-guide/tool-integration/pypi-example.html#pre-requisites","text":"Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x Python version 3 or higher twine pip","title":"Pre-requisites"},{"location":"user-guide/tool-integration/pypi-example.html#example-project","text":"The \"Hello, World!\" sample application for this can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/pypi-example.html#configuration","text":"","title":"Configuration"},{"location":"user-guide/tool-integration/pypi-example.html#setuppy","text":"This file is the build script for setuptools . It tells setuptools about your package like its name, a description, the current version etc. The Strongbox PyPi Example contains sample setup.py file with pre-defined sample information.","title":"setup.py"},{"location":"user-guide/tool-integration/pypi-example.html#the-setupcfg-file","text":"Used to define metadata information like description file name.","title":"The setup.cfg file"},{"location":"user-guide/tool-integration/pypi-example.html#the-licence-file","text":"Used to define license details. For more details check the \"See also\" section below.","title":"The LICENCE file"},{"location":"user-guide/tool-integration/pypi-example.html#how-to-build-python-package","text":"Execute the following commands within your project folder. This will build package: python3 setup.py sdist bdist_wheel Example output python3 setup.py sdist bdist_wheel running sdist running egg_info creating hello_world_pypi.egg-info writing hello_world_pypi.egg-info/PKG-INFO writing dependency_links to hello_world_pypi.egg-info/dependency_links.txt writing requirements to hello_world_pypi.egg-info/requires.txt writing top-level names to hello_world_pypi.egg-info/top_level.txt writing manifest file 'hello_world_pypi.egg-info/SOURCES.txt' reading manifest file 'hello_world_pypi.egg-info/SOURCES.txt' writing manifest file 'hello_world_pypi.egg-info/SOURCES.txt' running check creating hello-world-pypi-1.0.0 creating hello-world-pypi-1.0.0/hello-world-pypi creating hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying files to hello-world-pypi-1.0.0... copying README.md -> hello-world-pypi-1.0.0 copying setup.cfg -> hello-world-pypi-1.0.0 copying setup.py -> hello-world-pypi-1.0.0 copying hello-world-pypi/__init__.py -> hello-world-pypi-1.0.0/hello-world-pypi copying hello-world-pypi/helloworld.py -> hello-world-pypi-1.0.0/hello-world-pypi copying hello_world_pypi.egg-info/PKG-INFO -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/SOURCES.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/dependency_links.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/requires.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info copying hello_world_pypi.egg-info/top_level.txt -> hello-world-pypi-1.0.0/hello_world_pypi.egg-info Writing hello-world-pypi-1.0.0/setup.cfg creating dist Creating tar archive removing 'hello-world-pypi-1.0.0' (and everything under it) running bdist_wheel running build running build_py creating build creating build/lib creating build/lib/hello-world-pypi copying hello-world-pypi/__init__.py -> build/lib/hello-world-pypi copying hello-world-pypi/helloworld.py -> build/lib/hello-world-pypi installing to build/bdist.macosx-10.12-x86_64/wheel running install running install_lib creating build/bdist.macosx-10.12-x86_64 creating build/bdist.macosx-10.12-x86_64/wheel creating build/bdist.macosx-10.12-x86_64/wheel/hello-world-pypi copying build/lib/hello-world-pypi/__init__.py -> build/bdist.macosx-10.12-x86_64/wheel/hello-world-pypi copying build/lib/hello-world-pypi/helloworld.py -> build/bdist.macosx-10.12-x86_64/wheel/hello-world-pypi running install_egg_info Copying hello_world_pypi.egg-info to build/bdist.macosx-10.12-x86_64/wheel/hello_world_pypi-1.0.0-py3.7.egg-info running install_scripts adding license file \"LICENSE\" (matched pattern \"LICEN[CS]E*\") creating build/bdist.macosx-10.12-x86_64/wheel/hello_world_pypi-1.0.0.dist-info/WHEEL creating 'dist/hello_world_pypi-1.0.0-py3-none-any.whl' and adding 'build/bdist.macosx-10.12-x86_64/wheel' to it adding 'hello-world-pypi/__init__.py' adding 'hello-world-pypi/helloworld.py' adding 'hello_world_pypi-1.0.0.dist-info/LICENSE' adding 'hello_world_pypi-1.0.0.dist-info/METADATA' adding 'hello_world_pypi-1.0.0.dist-info/WHEEL' adding 'hello_world_pypi-1.0.0.dist-info/top_level.txt' adding 'hello_world_pypi-1.0.0.dist-info/RECORD' removing build/bdist.macosx-10.12-x86_64/wheel","title":"How to build python package"},{"location":"user-guide/tool-integration/pypi-example.html#how-to-deploy-python-package","text":"This will deploy python package to Strongbox. python3 -m twine upload --username admin --password password --repository-url http://localhost:48080/storages/storage-pypi/pypi-releases dist/* --verbose Example output python3 -m twine upload --username admin --password password --repository-url http://localhost:48080/storages/storage-pypi/pypi-releases dist/* --verbose Uploading distributions to http://localhost:48080/storages/storage-pypi/pypi-releases Uploading hello_world_pypi-1.0.0-py3-none-any.whl 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9.69k/9.69k [00:07<00:00, 1.38kB/s] Uploading hello-world-pypi-1.0.0.tar.gz 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5.14k/5.14k [00:00<00:00, 7.30kB/s]","title":"How to deploy python package"},{"location":"user-guide/tool-integration/pypi-example.html#how-to-install-python-package","text":"Execute the following to install python package: pip3 install --extra-index-url http://localhost:48080/storages/storage-pypi/pypi-releases hello-world-pypi Example output pip3 install --extra-index-url http://localhost:48080/storages/storage-pypi/pypi-releases hello-world-pypi Looking in indexes: https://pypi.org/simple, http://localhost:48080/storages/storage-pypi/pypi-releases Collecting hello-world-pypi Downloading http://localhost:48080/storages/storage-pypi/pypi-releases/packages/hello_world_pypi-1.0.0-py3-none-any.whl Processing /Users/ankit.tomar/Library/Caches/pip/wheels/95/70/6e/0f8362d968f0fef63006a07ba4158ac5d921fbcc664f976db3/pip_hello_world-0.1-cp37-none-any.whl Installing collected packages: pip-hello-world, hello-world-pypi Successfully installed hello-world-pypi-1.0.0 pip-hello-world-0.1","title":"How to install python package"},{"location":"user-guide/tool-integration/pypi-example.html#see-also","text":"Python Packages User Guide How to upload python package","title":"See also"},{"location":"user-guide/tool-integration/sbt-example.html","text":"SBT \u00b6 This is an example of how to use SBT with the Strongbox artifact repository manager. Pre-requisites \u00b6 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x SBT version 1.3 or higher Example project \u00b6 The \"Hello, World!\" sample application for this can be found here . Configuration \u00b6 The build.sbt file \u00b6 This file is used to define your project's information about things like your dependencies, which repositories to use to resolve and deploy artifacts, which plugins to use, etc.The Strongbox SBT Example contains sample build.sbt file with pre-defined configuration. The key things that each project needs to have are: organization - a logical prefix where other similar projects reside. name - the artifact's name. version - the version of the artifact. publishMavenStyle := true - used to specify that the remote repository's layout format is Maven-based. credentials - defines your credentials for the remote repositories. resolvers - defines where to resolve the dependencies from (if this is not specified, or the required artifacts cannot be located in the remote, SBT will attempt to resolve it from it's built-in default list of remotes). publishTo - defines where to deploy the artifact(s) produced by this build to. The repositories file \u00b6 This file lists the remote repositories (and their layouts) to use when resolving artifacts. It is perhaps most-practical and portable to include the repositories file as part of your project. For more details check the \"See also\" section below. The credentials \u00b6 These are plain-text. One way to do it is by specifying these as system properties such as -Dstrongbox.username=maven -Dstrongbox.password=password and reading them in from the build.sbt script. For more details check the \"See also\" section below. How to deploy \u00b6 Execute the following command to build and deploy into Strongbox: sbt compile publish Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-sbt> sbt [info] Set current project to hello-strongbox-sbt (in build file:/home/carlspring/strongbox-examples/hello-strongbox-sbt/) > compile [success] Total time: 0 s, completed Apr 30, 2016 4:54:22 AM > run [info] Running Main Hello, Strongbox! [success] Total time: 0 s, completed Apr 30, 2016 4:54:23 AM > publish [info] Wrote /home/carlspring/strongbox-examples/hello-strongbox-sbt/target/scala-2.10/hello-strongbox-sbt_2.10-1.0-SNAPSHOT.pom [info] :: delivering :: org.carlspring.strongbox.examples#hello-strongbox-sbt_2.10;1.0-SNAPSHOT :: 1.0-SNAPSHOT :: integration :: Sat Apr 30 04:54:30 BST 2016 [info] delivering ivy file to /home/carlspring/strongbox-examples/hello-strongbox-sbt/target/scala-2.10/ivy-1.0-SNAPSHOT.xml [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT.pom [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT.jar [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT-sources.jar [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT-javadoc.jar [success] Total time: 2 s, completed Apr 30, 2016 4:54:30 AM See also \u00b6 SBT: Publishing SBT: Repositories SBT: Metadata","title":"SBT Example"},{"location":"user-guide/tool-integration/sbt-example.html#sbt","text":"This is an example of how to use SBT with the Strongbox artifact repository manager.","title":"SBT"},{"location":"user-guide/tool-integration/sbt-example.html#pre-requisites","text":"Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x SBT version 1.3 or higher","title":"Pre-requisites"},{"location":"user-guide/tool-integration/sbt-example.html#example-project","text":"The \"Hello, World!\" sample application for this can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/sbt-example.html#configuration","text":"","title":"Configuration"},{"location":"user-guide/tool-integration/sbt-example.html#the-buildsbt-file","text":"This file is used to define your project's information about things like your dependencies, which repositories to use to resolve and deploy artifacts, which plugins to use, etc.The Strongbox SBT Example contains sample build.sbt file with pre-defined configuration. The key things that each project needs to have are: organization - a logical prefix where other similar projects reside. name - the artifact's name. version - the version of the artifact. publishMavenStyle := true - used to specify that the remote repository's layout format is Maven-based. credentials - defines your credentials for the remote repositories. resolvers - defines where to resolve the dependencies from (if this is not specified, or the required artifacts cannot be located in the remote, SBT will attempt to resolve it from it's built-in default list of remotes). publishTo - defines where to deploy the artifact(s) produced by this build to.","title":"The build.sbt file"},{"location":"user-guide/tool-integration/sbt-example.html#the-repositories-file","text":"This file lists the remote repositories (and their layouts) to use when resolving artifacts. It is perhaps most-practical and portable to include the repositories file as part of your project. For more details check the \"See also\" section below.","title":"The repositories file"},{"location":"user-guide/tool-integration/sbt-example.html#the-credentials","text":"These are plain-text. One way to do it is by specifying these as system properties such as -Dstrongbox.username=maven -Dstrongbox.password=password and reading them in from the build.sbt script. For more details check the \"See also\" section below.","title":"The credentials"},{"location":"user-guide/tool-integration/sbt-example.html#how-to-deploy","text":"Execute the following command to build and deploy into Strongbox: sbt compile publish Example output carlspring@linux-70e2:/home/carlspring/strongbox-examples/hello-strongbox-sbt> sbt [info] Set current project to hello-strongbox-sbt (in build file:/home/carlspring/strongbox-examples/hello-strongbox-sbt/) > compile [success] Total time: 0 s, completed Apr 30, 2016 4:54:22 AM > run [info] Running Main Hello, Strongbox! [success] Total time: 0 s, completed Apr 30, 2016 4:54:23 AM > publish [info] Wrote /home/carlspring/strongbox-examples/hello-strongbox-sbt/target/scala-2.10/hello-strongbox-sbt_2.10-1.0-SNAPSHOT.pom [info] :: delivering :: org.carlspring.strongbox.examples#hello-strongbox-sbt_2.10;1.0-SNAPSHOT :: 1.0-SNAPSHOT :: integration :: Sat Apr 30 04:54:30 BST 2016 [info] delivering ivy file to /home/carlspring/strongbox-examples/hello-strongbox-sbt/target/scala-2.10/ivy-1.0-SNAPSHOT.xml [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT.pom [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT.jar [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT-sources.jar [info] published hello-strongbox-sbt_2.10 to http://localhost:48080/storages/storage0/snapshots/org/carlspring/strongbox/examples/hello-strongbox-sbt_2.10/1.0-SNAPSHOT/hello-strongbox-sbt_2.10-1.0-SNAPSHOT-javadoc.jar [success] Total time: 2 s, completed Apr 30, 2016 4:54:30 AM","title":"How to deploy"},{"location":"user-guide/tool-integration/sbt-example.html#see-also","text":"SBT: Publishing SBT: Repositories SBT: Metadata","title":"See also"},{"location":"user-guide/tool-integration/yarn-example.html","text":"Yarn \u00b6 This is an example of how to use the Strongbox artifact repository manager with Yarn. Pre-requisites \u00b6 Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x NodeJS version 12 or higher Yarn version 1.19.1 or higher Example project \u00b6 The \"Hello, World!\" sample application for this can be found here . Prepare project workspace \u00b6 First, you need to configure yarn to use Strongbox as a private registry. This can be done in your project by creating a .npmrc file, which is local npm configuration applied to your project. The Strongbox Yarn Example contains an npmrc.template file with a set of pre-defined configuration properties that can be used in your own project, or on your machine. Typically, all you'll need to do, is execute the following command, and create your .npmrc file: $ cp npmrc.template .npmrc After that the pre-defined configuration parameters can be changed, according to your needs and environment (Strongbox URL, username and password). Your .npmrc should look like this: $ cat .npmrc registry=http://localhost:48080/storages/storage-npm/npm-releases always-auth=true email=someuser@example.com _auth=YWRtaW46cGFzc3dvcmQ= ; `_auth` is a base64 encoded authentication token ; you can use it instead of: ; username=admin ; _password=password How to publish npm package into Strongbox registry \u00b6 Execute the following command within your project folder: $ yarn publish Example output $ yarn publish v1.19.1 + [1/4] Bumping version... + info Current version: 1.0.0 + question New version: 1.0.0 + [2/4] Logging in... + [3/4] Publishing... + success Published. + [4/4] Revoking token... + Done in 4.50s. See also \u00b6 Yarn official site","title":"Yarn Example"},{"location":"user-guide/tool-integration/yarn-example.html#yarn","text":"This is an example of how to use the Strongbox artifact repository manager with Yarn.","title":"Yarn"},{"location":"user-guide/tool-integration/yarn-example.html#pre-requisites","text":"Installed and configured a Strongbox Distribution Java Development Kit (JDK) version 1.8.x NodeJS version 12 or higher Yarn version 1.19.1 or higher","title":"Pre-requisites"},{"location":"user-guide/tool-integration/yarn-example.html#example-project","text":"The \"Hello, World!\" sample application for this can be found here .","title":"Example project"},{"location":"user-guide/tool-integration/yarn-example.html#prepare-project-workspace","text":"First, you need to configure yarn to use Strongbox as a private registry. This can be done in your project by creating a .npmrc file, which is local npm configuration applied to your project. The Strongbox Yarn Example contains an npmrc.template file with a set of pre-defined configuration properties that can be used in your own project, or on your machine. Typically, all you'll need to do, is execute the following command, and create your .npmrc file: $ cp npmrc.template .npmrc After that the pre-defined configuration parameters can be changed, according to your needs and environment (Strongbox URL, username and password). Your .npmrc should look like this: $ cat .npmrc registry=http://localhost:48080/storages/storage-npm/npm-releases always-auth=true email=someuser@example.com _auth=YWRtaW46cGFzc3dvcmQ= ; `_auth` is a base64 encoded authentication token ; you can use it instead of: ; username=admin ; _password=password","title":"Prepare project workspace"},{"location":"user-guide/tool-integration/yarn-example.html#how-to-publish-npm-package-into-strongbox-registry","text":"Execute the following command within your project folder: $ yarn publish Example output $ yarn publish v1.19.1 + [1/4] Bumping version... + info Current version: 1.0.0 + question New version: 1.0.0 + [2/4] Logging in... + [3/4] Publishing... + success Published. + [4/4] Revoking token... + Done in 4.50s.","title":"How to publish npm package into Strongbox registry"},{"location":"user-guide/tool-integration/yarn-example.html#see-also","text":"Yarn official site","title":"See also"},{"location":"user-guide/ui/browsing.html","text":"Browsing \u00b6 In Strongbox there are two ways you can \"browse\" the artifacts: Using the user interface Accessing /api/browse , which depending on the content negotiation, will return either JSON with the directories/files for the requested path or a very lightweight HTML page.","title":"Browsing"},{"location":"user-guide/ui/browsing.html#browsing","text":"In Strongbox there are two ways you can \"browse\" the artifacts: Using the user interface Accessing /api/browse , which depending on the content negotiation, will return either JSON with the directories/files for the requested path or a very lightweight HTML page.","title":"Browsing"},{"location":"user-guide/ui/default-url-users.html","text":"Default URL and Credentials \u00b6 Below you can find the default URL and user credentials for the Strongbox UI. Default URL \u00b6 http://localhost:48080/ User Credentials \u00b6 username password admin password deployer password","title":"Default URL and Credentials"},{"location":"user-guide/ui/default-url-users.html#default-url-and-credentials","text":"Below you can find the default URL and user credentials for the Strongbox UI.","title":"Default URL and Credentials"},{"location":"user-guide/ui/default-url-users.html#default-url","text":"http://localhost:48080/","title":"Default URL"},{"location":"user-guide/ui/default-url-users.html#user-credentials","text":"username password admin password deployer password","title":"User Credentials"},{"location":"user-guide/ui/global-settings.html","text":"Global Settings \u00b6 This module provides access to configuring global settings in Strongbox such as basic settings , CORS , SMTP and Proxy related settings.","title":"Global settings"},{"location":"user-guide/ui/global-settings.html#global-settings","text":"This module provides access to configuring global settings in Strongbox such as basic settings , CORS , SMTP and Proxy related settings.","title":"Global Settings"},{"location":"user-guide/ui/storage-management.html","text":"Intro \u00b6 The Storage Management module gives you the power to easily manage all of your Storages and Repositories .","title":"Storage management"},{"location":"user-guide/ui/storage-management.html#intro","text":"The Storage Management module gives you the power to easily manage all of your Storages and Repositories .","title":"Intro"},{"location":"user-guide/ui/system-information.html","text":"System Information \u00b6 This module provides information about the environment where Strongbox is currently running. To make your live easier, we've included a search filter so that you can find what you're looking for faster. JVM Arguments \u00b6 Environment Variables \u00b6 System Properties \u00b6","title":"System Information"},{"location":"user-guide/ui/system-information.html#system-information","text":"This module provides information about the environment where Strongbox is currently running. To make your live easier, we've included a search filter so that you can find what you're looking for faster.","title":"System Information"},{"location":"user-guide/ui/system-information.html#jvm-arguments","text":"","title":"JVM Arguments"},{"location":"user-guide/ui/system-information.html#environment-variables","text":"","title":"Environment Variables"},{"location":"user-guide/ui/system-information.html#system-properties","text":"","title":"System Properties"},{"location":"user-guide/ui/user-management.html","text":"Intro \u00b6 The user management module allows you to list/add/update/delete users fine-tune their access level to Strongbox. Access Model \u00b6 TODO: Add mode information about this later. (SB-1339; SB-1285)","title":"User management"},{"location":"user-guide/ui/user-management.html#intro","text":"The user management module allows you to list/add/update/delete users fine-tune their access level to Strongbox.","title":"Intro"},{"location":"user-guide/ui/user-management.html#access-model","text":"TODO: Add mode information about this later. (SB-1339; SB-1285)","title":"Access Model"}]}